{"version":3,"sources":["utils/getRpcUrl.ts","utils/makeBatchRequest.ts","config/constants/contracts.ts","utils/addressHelpers.ts","state/actions.ts","utils/kingdomScripts.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmsPrices.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/teams/helpers.ts","config/constants/teams.ts","hooks/useRefresh.ts","utils/wallet.ts","hooks/useToast.ts","hooks/useAuth.ts","config/constants/ifo.ts","state/block/index.ts","utils/web3React.ts","utils/collectibles.ts","utils/farmsPriceHelpers.ts","state/prices/index.ts","state/collectibles/index.ts","contexts/RefreshContext.tsx","config/constants/campaigns.ts","utils/achievements.ts","state/achievements/helpers.ts","state/achievements/index.ts","contexts/ToastsContext/Provider.tsx","config/constants/tokens.ts","utils/formatBalance.ts","config/constants/meta.ts","components/layout/Page.tsx","contexts/Localisation/translationsContext.ts","config/constants/index.ts","utils/farmHelpers.ts","utils/bigNumber.ts","components/layout/Container.tsx","utils/multicall.ts","config/constants/types.ts","config/constants/pools.ts","state/types.ts","state/predictions/helpers.ts","state/predictions/queries.ts","state/predictions/index.ts","state/index.ts","utils/contractHelpers.ts","utils/web3.ts","state/teams/index.tsx","state/profile/helpers.ts","state/profile/getProfile.ts","state/profile/index.tsx","config/constants/nfts.ts","state/hooks.ts","config/index.ts","hooks/useEagerConnect.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/SuspenseWithChunkError/index.tsx","components/PageLoader.tsx","routerHistory.ts","App.tsx","Providers.tsx","index.tsx","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","config/constants/endpoints.ts"],"names":["nodes","process","getNodeUrl","randomIndex","random","length","makeBatchRequest","calls","batch","getWeb3NoAccount","BatchRequest","promises","map","call","Promise","resolve","reject","add","request","err","result","execute","all","56","97","getAddress","address","getCakeAddress","tokens","cub","getMasterChefAddress","addresses","getKingdomsAddress","getBnbDividendsAddress","getPCSv2MasterChefAddress","getBakery","getBelt","getMulticallAddress","getWbnbAddress","wbnb","getLotteryAddress","getLotteryTicketAddress","getPancakeProfileAddress","getPancakeRabbitsAddress","getBunnyFactoryAddress","getClaimRefundAddress","getPointCenterIfoAddress","getBunnySpecialAddress","getTradingCompetitionAddress","getEasterNftAddress","getCakeVaultAddress","getPredictionsAddress","PCS_ABI","require","BAKERY_ABI","BELT_ABI","web3","Web3","providers","HttpProvider","getCAKEamount","a","contract","eth","Contract","methods","userInfo","amount","getWBNBBUSDAmount","getWBNBETHAmount","getWBNBDOTAmount","getCUBAmount","getBTCBNBAmount","poolUserInfoMap","getBTCAmount","shares","getETHAmount","getUSDAmount","getBeltAPR","axios","get","timeout","then","data","catch","btc","stable","stableRate","fetchFarms","farmsToFetch","beltData","farmConfig","lpAddress","lpAddresses","tokenAddress","token","quoteAddress","quoteToken","name","params","isTokenOnly","isKingdom","hostMasterchef","farmType","isKingdomToken","multicall","erc20","multiResult","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","pid","kingdomSupply","BigNumber","div","DEFAULT_TOKEN_DECIMAL","toString","beltAPR","beltRate","lpTotalInQuoteTokenPCS","tokenAmount","pow","tokenPriceVsQuote","symbol","lpTotalInQuoteToken","times","lpTokenRatio","lpTokenRatioPCS","ratioPCStoKingdom","kingdomTokenSupply","kingdomQuoteTokenSupply","BIG_TEN","quoteTokenAmount","comparedTo","tokenAmountTotal","mCalls","masterchefABI","error","Error","info","totalAllocPoint","cubPerBlock","kCalls","kingdomsABI","kInfo","kTotalAllocPoint","allocPoint","_hex","kingdomTotalAlloc","kingdomCorrectAlloc","kingdomPoolWeight","poolWeightPCS","altPid","hostAbi","pcsv2ABI","beltABI","hostCalls","infoPCS","totalAllocPointPCS","bakeryCalls","bakeryABI","infoBakery","totalAllocPointBakery","tokenValuePerOrigin","BIG_ZERO","lpSymbol","bCalls","multiStratABI","pricePerFullShare","toJSON","poolWeight","multiplier","depositFeeBP","toNumber","lpTokenBalancePCS","getFarmFromTokenSymbol","farms","tokenSymbol","preferredQuoteTokens","farmsWithTokenSymbol","filter","farm","filterFarmsByQuoteToken","getFarmBaseTokenPrice","quoteTokenFarm","bnbPriceBusd","hasTokenPriceVsQuote","Boolean","quoteTokenInBusd","getFarmQuoteTokenPrice","fetchFarmsPrices","bnbBusdFarm","find","farmsWithPrices","baseTokenPrice","quoteTokenPrice","busdPrice","fetchFarmUserAllowances","account","masterChefAddress","kingdomAddress","lpContractAddress","mainAddress","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","nonKingdomFarms","kingdomFarms","callsMC","callsK","rawStakedBalancesMC","rawStakedBalancesK","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarningsMasterChef","rawEarningsKingdoms","rawEarnings","parsedEarnings","earnings","nonArchivedFarms","farmsConfig","isArchivedPid","initialState","userData","allowance","loadArchivedFarmsData","userDataLoaded","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","findIndex","setLoadArchivedFarmsData","actions","fetchFarmsPublicDataAsync","dispatch","getState","fetchArchived","newFarms","tokenPrice","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","profileContract","getProfileContract","getTeam","teamId","getTeamProfile","teamName","numberUsers","numberPoints","isJoinable","staticTeamInfo","teamsList","staticTeam","id","merge","users","points","getTeams","teamsById","reduce","accum","team","numberTeams","nbTeams","i","push","teamData","onChainTeamData","Number","teams","description","images","lg","md","sm","alt","ipfs","background","textColor","useRefresh","useContext","RefreshContext","fastRefresh","fast","slowRefresh","slow","setupNetwork","provider","window","ethereum","chainId","parseInt","method","chainName","nativeCurrency","decimals","rpcUrls","blockExplorerUrls","console","useToast","toastContext","ToastsContext","undefined","useAuth","useAppDispatch","useWeb3React","activate","deactivate","toastError","login","useCallback","connectorID","connector","connectorsByName","UnsupportedChainIdError","localStorage","removeItem","connectorLocalStorageKey","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","walletConnectProvider","message","logout","profileClear","ifos","blockSlice","currentBlock","initialBlock","setBlock","rpcUrl","injected","InjectedConnector","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","bscConnector","BscConnector","ConnectorNames","Injected","WalletConnect","BSC","getLibrary","getIdentifierKeyFromAddress","nftAddress","nftSource","Object","values","nftSources","nftSourceEntry","identifierKey","getTokenUrl","tokenUri","startsWith","IPFS_GATEWAY","slice","getTokenUriData","tokenId","getErc721Contract","tokenURI","fetch","uriDataResponse","ok","json","uriData","getNftByTokenId","Nfts","nft","includes","identifier","preferredFarm","some","fetchPrices","createAsyncThunk","response","updated_at","keys","toLowerCase","parseFloat","price","pricesSlice","isLoading","lastUpdated","extraReducers","builder","addCase","pending","fulfilled","fetchWalletNfts","nftSourcePromises","nftSourceType","addressObj","getTokenIdAndData","tokenOfOwnerByIndex","walletNft","balanceOf","balanceOfResponse","nftDataFetchPromises","nftData","nftSourceData","flat","collectiblesSlice","isInitialized","association","React","createContext","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","campaigns","type","title","badge","campaignMap","Map","campaign","set","getAchievementTitle","fallback","getAchievementDescription","getUserPointIncreaseEvents","GRAPH_API_PROFILE","gql","user","getAchievements","pointIncreaseEvents","userPoint","campaignMeta","campaignId","achievementSlice","addAchievement","addAchievements","setAchievements","clearAchievements","fetchAchievements","achievements","ToastsProvider","toasts","setToasts","toast","prevToasts","kebabCase","currentToasts","prevToast","clear","remove","toastTypes","DANGER","toastInfo","INFO","toastSuccess","SUCCESS","toastWarning","WARNING","bnb","projectLink","cake","busd","usdc","dai","dot","usdt","btcb","bleo","dec","bake","belt","beltbtc","belteth","beltusd","getBalanceAmount","dividedBy","getBalanceNumber","balance","getFullDisplayBalance","decimalsToAppear","toFixed","DEFAULT_META","image","customMeta","StyledPage","styled","Container","theme","mediaQueries","PageMeta","pathname","useLocation","cakePriceUsd","usePriceCakeBusd","cakePriceUsdDisplay","eq","toLocaleString","minimumFractionDigits","maximumFractionDigits","pageMeta","pageTitle","join","property","content","Page","props","defaultTranslationState","translations","setTranslations","TranslationsContext","abi","multi","MultiCallAbi","itf","Interface","calldata","encodeFunctionData","aggregate","returnData","res","decodeFunctionResult","PoolIds","PoolCategory","NftType","pools","BetPosition","PredictionStatus","HistoryFilter","numberOrNull","valueNum","isNaN","transformBetResponse","betResponse","bet","hash","position","BULL","BEAR","claimed","block","totalBets","totalBNB","round","transformRoundResponse","roundResponse","positionResponse","epoch","failed","startBlock","startAt","lockAt","lockBlock","lockPrice","endBlock","closePrice","totalAmount","bullBets","bearBets","bearAmount","bullAmount","bets","getBetHistory","where","first","skip","GRAPH_API_PREDICTIONS","getBet","betId","status","INITIAL","isHistoryPaneOpen","isChartPaneOpen","isFetchingHistory","historyFilter","ALL","currentEpoch","currentRoundStartBlockNumber","intervalBlocks","bufferBlocks","minBetAmount","rounds","history","fetchBet","fetchRoundBet","roundId","betResponses","fetchHistory","predictionsSlice","setPredictionStatus","setHistoryPaneState","setChartPaneState","setHistoryFilter","initialize","updateMarketData","market","newRoundData","makeRoundData","incomingCurrentRound","maxBy","newestRound","futureRound","paused","PAUSED","LIVE","setCurrentEpoch","markBetAsCollected","betIndex","markPositionAsEntered","partialBet","currentBet","rejected","store","configureStore","devTools","reducer","achievementsReducer","blockReducer","farmsReducer","poolsReducer","prices","pricesReducer","predictions","predictionsReducer","profile","profileReducer","teamsReducer","collectibles","collectiblesReducer","useDispatch","getContract","web3NoAccount","getBep20Contract","bep20Abi","erc721Abi","getIfoV1Contract","ifoV1Abi","getIfoV2Contract","ifoV2Abi","getSouschefContract","config","poolsConfig","pool","sousId","poolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","getPointCenterIfoContract","pointCenterIfo","getCakeContract","cakeAbi","profileABI","getPancakeRabbitContract","pancakeRabbitsAbi","getBunnyFactoryContract","bunnyFactoryAbi","getBunnySpecialContract","bunnySpecialAbi","getLotteryContract","lotteryAbi","getLotteryTicketContract","lotteryTicketAbi","getMasterchefContract","masterChef","getKingdomsContract","kingdomsAbi","getBnbDvividendsContract","bnbDividendsAbi","getClaimRefundContract","claimRefundAbi","getTradingCompetitionContract","tradingCompetitionAbi","getEasterNftContract","easterNftAbi","getCakeVaultContract","cakeVaultAbi","getPredictionsContract","predictionsAbi","RPC_URL","getRpcUrl","httpProvider","teamsSlice","fetchStart","fetchFailed","teamFetchSucceeded","teamsFetchSucceeded","fetchTeam","fetchTeams","transformProfileResponse","profileResponse","userId","isActive","getUsername","username","getProfile","hasRegistered","getUserProfile","Cookies","avatar","domain","secure","expires","profileSlice","profileFetchStart","profileFetchSucceeded","_state","profileFetchFailed","addPoints","fetchProfile","PANCAKE","MIXIE","sortOrder","variationId","video","webm","mp4","blur","useFetchPublicData","fetchPoolsPublicDataAsync","getBlockNumber","blockNumber","useFarms","useSelector","useFarmFromPid","useFarmFromSymbol","useFarmUser","useBusdPriceFromLpSymbol","useFetchProfile","useProfile","hasProfile","useFetchPriceList","useGetApiPrices","cakeBnbFarm","useTotalValue","accu","quoteTokenPriceUsd","totalLiquidity","newAccu","isZero","plus","useTotalValueKingdoms","kingdoms","EXPONENTIAL_AT","DECIMAL_PLACES","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","PCSCAKE_PER_BLOCK","PCSBLOCKS_PER_YEAR","PCSCAKE_PER_YEAR","BAKE_PER_YEAR","BELT_PER_YEAR","BASE_EXCHANGE_URL","BASE_ADD_LIQUIDITY_URL","PCS_EXCHANGE_URL","PCS_ADD_LIQUIDITY_URL","BAKERY_EXCHANGE_URL","BAKERY_ADD_LIQUIDITY_URL","BELT_EXCHANGE","_binanceChainListener","defineProperty","this","bsc","useEagerConnect","connectorId","getItem","isConnectorBinanceChain","isBinanceChainDefined","Reflect","has","GlobalStyle","createGlobalStyle","colors","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","projectId","REACT_APP_CROWDIN_PROJECTID","stringTranslationsApi","StringTranslations","REACT_APP_CROWDIN_APIKEY","LanguageContextProvider","storedLangCode","storedLang","getStoredLang","listLanguageTranslations","fetchTranslationsForSelectedLanguage","translationApiResponse","e","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeContext","label","icon","href","items","text","color","Menu","currentLang","langs","setLang","links","priceLink","profileLink","noProfileLink","showPip","SuspenseWithChunkError","hasError","isJsChunkLoadError","isCssChunkLoadError","isChunkLoadError","isRecoveringFromChunkError","nextState","replaceState","location","reload","Component","Wrapper","PageLoader","createBrowserHistory","Home","lazy","Farms","Kingdoms","NotFound","App","warn","Global","path","exact","tokenMode","component","memo","Providers","ReactDOM","render","StrictMode","document","getElementById","fetchPoolsBlockLimits","poolsWithEnd","p","callsStartBlock","poolConfig","callsEndBlock","sousChefABI","starts","ends","cakePoolConfig","fetchPoolsTotalStaking","nonBnbPools","stakingToken","bnbPool","callsNonBnbPools","callsBnbPools","cakeABI","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","totalStaked","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","acc","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","stakedBalances","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingCub","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","blockLimits","totalStakings","liveData","blockLimit","totalStaking","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","compounding","kingdomContract","REACT_APP_GRAPH_WS_PREDICTIONS"],"mappings":"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","file":"static/js/main.2b738ac0.chunk.js","sourcesContent":["import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nexport const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import { getWeb3NoAccount } from './web3'\r\n\r\n/**\r\n * Accepts an array of contract method calls and batches them\r\n *\r\n * Example:\r\n *\r\n * [\r\n *  contract.method.balanceOf().call,\r\n *  contract.method.startBlockNumber().call\r\n * ]\r\n */\r\nconst makeBatchRequest = (calls: any[]) => {\r\n  try {\r\n    const web3 = getWeb3NoAccount()\r\n    const batch = new web3.BatchRequest()\r\n\r\n    const promises = calls.map((call) => {\r\n      return new Promise((resolve, reject) => {\r\n        batch.add(\r\n          call.request({}, (err, result) => {\r\n            if (err) {\r\n              reject(err)\r\n            } else {\r\n              resolve(result)\r\n            }\r\n          }),\r\n        )\r\n      })\r\n    })\r\n\r\n    batch.execute()\r\n\r\n    return Promise.all(promises)\r\n  } catch {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default makeBatchRequest\r\n","export default {\r\n  cake: {\r\n    56: '0x50d809c74e0b8e49e7b4c65bb3109abe3ff4c1c1',\r\n    666: 'This is CUB token',\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0x227e79c83065edb8b954848c46ca50b96cb33e16',\r\n    97: '',\r\n  },\r\n  kingdoms: {\r\n    56: '0x2e72f4b196b9e5b89c29579cc135756a00e6cbbd',\r\n    97: '',\r\n  },\r\n  bnbDividends: {\r\n    56: '0xa22efc88F3Eb641D881D0807dc8E305d71920cAB',\r\n    97: '',\r\n  },\r\n  pcsV2masterChef: {\r\n    56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n    97: '',\r\n  },\r\n  bakery: {\r\n    56: '0x20ec291bb8459b6145317e7126532ce7ece5056f',\r\n    97: '',\r\n  },\r\n  belt: {\r\n    56: '0xD4BbC80b9B102b77B21A06cb77E954049605E6c1',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  multiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n  },\r\n  cake_real: {\r\n    56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    97: '',\r\n  },\r\n\r\n  sousChef: {\r\n    97: '',\r\n    56: '',\r\n  },\r\n  pancakeProfile: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  pancakeRabbits: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  bunnyFactory: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  claimRefund: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  pointCenterIfo: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  bunnySpecial: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  tradingCompetition: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  easterNft: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  cakeVault: {\r\n    56: '0xa80240Eb5d7E05d3F250cF000eEc0891d00b51CC',\r\n    97: '',\r\n  },\r\n  predictions: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n\r\n}\r\n","import addresses from 'config/constants/contracts'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport const getAddress = (address: Address): string => {\r\n  const mainNetChainId = 56\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  return address[chainId] ? address[chainId] : address[mainNetChainId]\r\n}\r\n\r\nexport const getCakeAddress = () => {\r\n  return getAddress(tokens.cub.address)\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return getAddress(addresses.masterChef)\r\n}\r\nexport const getKingdomsAddress = () => {\r\n  return getAddress(addresses.kingdoms)\r\n}\r\nexport const getBnbDividendsAddress = () => {\r\n  return getAddress(addresses.bnbDividends)\r\n}\r\nexport const getPCSv2MasterChefAddress = () => {\r\n  return getAddress(addresses.pcsV2masterChef)\r\n}\r\nexport const getBakery = () => {\r\n  return getAddress(addresses.bakery)\r\n}\r\nexport const getBelt = () => {\r\n  return getAddress(addresses.belt)\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return getAddress(addresses.multiCall)\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return getAddress(tokens.wbnb.address)\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return getAddress(addresses.lottery)\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return getAddress(addresses.lotteryNFT)\r\n}\r\nexport const getPancakeProfileAddress = () => {\r\n  return getAddress(addresses.pancakeProfile)\r\n}\r\nexport const getPancakeRabbitsAddress = () => {\r\n  return getAddress(addresses.pancakeRabbits)\r\n}\r\nexport const getBunnyFactoryAddress = () => {\r\n  return getAddress(addresses.bunnyFactory)\r\n}\r\nexport const getClaimRefundAddress = () => {\r\n  return getAddress(addresses.claimRefund)\r\n}\r\nexport const getPointCenterIfoAddress = () => {\r\n  return getAddress(addresses.pointCenterIfo)\r\n}\r\nexport const getBunnySpecialAddress = () => {\r\n  return getAddress(addresses.bunnySpecial)\r\n}\r\nexport const getTradingCompetitionAddress = () => {\r\n  return getAddress(addresses.tradingCompetition)\r\n}\r\nexport const getEasterNftAddress = () => {\r\n  return getAddress(addresses.easterNft)\r\n}\r\nexport const getCakeVaultAddress = () => {\r\n  return getAddress(addresses.cakeVault)\r\n}\r\nexport const getPredictionsAddress = () => {\r\n  return getAddress(addresses.predictions)\r\n}\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\nexport { profileFetchStart, profileFetchSucceeded, profileFetchFailed } from './profile'\r\nexport { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } from './teams'\r\nexport { setBlock } from './block'\r\n","import Web3 from 'web3'\r\nimport axios from 'axios'\r\n\r\nconst PCS_ABI = require('config/abi/PCS.json')\r\nconst BAKERY_ABI = require('config/abi/bakery.json')\r\nconst BELT_ABI = require('config/abi/belt.json')\r\n\r\nconst web3 = new Web3(new Web3.providers.HttpProvider('https://bsc-dataseed.binance.org/'));\r\n\r\nexport const getCAKEamount = async () => {\r\n  // 0x73feaa1ee314f8c655e354234017be2193c9e24e: Main staking contract\r\n  // 0x77440f4dc7b4ef591e78d460374bd12d3d6bdad8: CAKE Kingdom vault\r\n  const contract = new web3.eth.Contract(PCS_ABI, '0x73feaa1ee314f8c655e354234017be2193c9e24e');\r\n  const call = await contract.methods.userInfo(0, '0x77440f4dc7b4ef591E78d460374bD12d3D6BdAD8').call();\r\n  return call.amount\r\n}\r\n\r\nexport const getWBNBBUSDAmount = async () => {\r\n  // 0x73feaa1ee314f8c655e354234017be2193c9e24e: Main staking contract\r\n  // 0x701d4f8168b00abbd948d36e11added4e1cac742: WBNB-BUSD Kingdom vault\r\n  const contract = new web3.eth.Contract(PCS_ABI, '0x73feaa1ee314f8c655e354234017be2193c9e24e');\r\n  const call = await contract.methods.userInfo(252, '0x701d4f8168b00abbd948d36e11added4e1cac742').call();\r\n  return call.amount\r\n}\r\n\r\nexport const getWBNBETHAmount = async () => {\r\n  const contract = new web3.eth.Contract(PCS_ABI, '0x73feaa1ee314f8c655e354234017be2193c9e24e');\r\n  const call = await contract.methods.userInfo(261, '0x3582933accc5732484138a2dd61fcdd02d0a021c').call();\r\n  return call.amount\r\n}\r\n\r\nexport const getWBNBDOTAmount = async () => {\r\n  const contract = new web3.eth.Contract(PCS_ABI, '0x73feaa1ee314f8c655e354234017be2193c9e24e');\r\n  const call = await contract.methods.userInfo(255, '0x03e48360dc132a1838492b6870c98d2bd895ea9a').call();\r\n  return call.amount\r\n}\r\n\r\nexport const getCUBAmount = async () => {\r\n  const contract = new web3.eth.Contract(PCS_ABI, '0x227e79c83065edb8b954848c46ca50b96cb33e16');\r\n  const call = await contract.methods.userInfo(12, '0xc2adf5fc4d4e6c2cc97f8190acbdf808c689117c').call();\r\n  return call.amount\r\n}\r\n\r\nexport const getBTCBNBAmount = async () => {\r\n  const contract = new web3.eth.Contract(BAKERY_ABI, '0x20ec291bb8459b6145317e7126532ce7ece5056f');\r\n  const call = await contract.methods.poolUserInfoMap('0x58521373474810915b02fe968d1bcbe35fc61e09', '0xbdc40a031f6908a8203fb1c75bb2b9c4abf59e2e').call();\r\n  return call.amount\r\n}\r\n\r\nexport const getBTCAmount = async () => {\r\n  const contract = new web3.eth.Contract(BELT_ABI, '0xD4BbC80b9B102b77B21A06cb77E954049605E6c1');\r\n  const call = await contract.methods.userInfo(7, '0x3f1b0319E2EbeD04D5e2ce367393914bBf8f59f5').call();\r\n  return call.shares\r\n}\r\n\r\nexport const getETHAmount = async () => {\r\n  const contract = new web3.eth.Contract(BELT_ABI, '0xD4BbC80b9B102b77B21A06cb77E954049605E6c1');\r\n  const call = await contract.methods.userInfo(8, '0x3f2C7e9cf2e3a718eedf52403e0FB71b9AfC51b0').call();\r\n  return call.shares\r\n}\r\n\r\nexport const getUSDAmount = async () => {\r\n  const contract = new web3.eth.Contract(BELT_ABI, '0xD4BbC80b9B102b77B21A06cb77E954049605E6c1');\r\n  const call = await contract.methods.userInfo(3, '0x5860046Ccf3ab8D840F1ac15A547E0c2bBECA6F0').call();\r\n  return call.shares\r\n}\r\n\r\nexport const getBeltAPR = async () => {\r\n  return axios.get(process.env.REACT_APP_BELT_SCRAPE, { timeout: 3000 }).then(result => result.data).catch(() => {\r\n    return { btc: '5', eth: '5', stable: '10', stableRate: '0.97' }\r\n  })\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { useSelector } from 'react-redux'\r\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\r\nimport {\r\n  getAddress,\r\n  getMasterChefAddress,\r\n  getKingdomsAddress,\r\n  getPCSv2MasterChefAddress,\r\n  getBakery,\r\n  getBelt\r\n} from 'utils/addressHelpers'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport kingdomsABI from 'config/abi/kingdoms.json'\r\nimport pcsv2ABI from 'config/abi/PCS-v2-masterchef.json'\r\nimport bakeryABI from 'config/abi/bakery.json'\r\nimport beltABI from 'config/abi/belt.json'\r\nimport multiStratABI from 'config/abi/MultiStrategyTokenImpl.json'\r\nimport {\r\n  getCAKEamount,\r\n  getWBNBBUSDAmount,\r\n  getWBNBETHAmount,\r\n  getWBNBDOTAmount,\r\n  getCUBAmount,\r\n  getBTCBNBAmount,\r\n  getBTCAmount,\r\n  getETHAmount,\r\n  getUSDAmount,\r\n  getBeltAPR,\r\n} from 'utils/kingdomScripts'\r\n\r\nconst fetchFarms = async (farmsToFetch: FarmConfig[]) => {\r\n  const beltData = await getBeltAPR()\r\n  const data = await Promise.all(\r\n    farmsToFetch.map(async (farmConfig) => {\r\n      const lpAddress = getAddress(farmConfig.lpAddresses)\r\n      const tokenAddress = getAddress(farmConfig.token.address)\r\n      const quoteAddress = getAddress(farmConfig.quoteToken.address)\r\n\r\n      let calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: tokenAddress,\r\n          name: 'balanceOf',\r\n          params: [lpAddress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: quoteAddress,\r\n          name: 'balanceOf',\r\n          params: [lpAddress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? tokenAddress : lpAddress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAddress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: tokenAddress,\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: quoteAddress,\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      if (farmConfig.isKingdom) {\r\n        let hostMasterchef = getPCSv2MasterChefAddress()\r\n        if (farmConfig.farmType === 'Bakery') hostMasterchef = getBakery()\r\n        else if (farmConfig.farmType === 'Belt') hostMasterchef = getBelt()\r\n\r\n        calls = [\r\n          // Balance of token in the LP contract\r\n          {\r\n            address: tokenAddress,\r\n            name: 'balanceOf',\r\n            params: [lpAddress],\r\n          },\r\n          // Balance of quote token on LP contract\r\n          {\r\n            address: quoteAddress,\r\n            name: 'balanceOf',\r\n            params: [lpAddress],\r\n          },\r\n          // Balance of LP tokens in the master chef contract\r\n          {\r\n            address: farmConfig.isKingdomToken ? tokenAddress : lpAddress,\r\n            name: 'balanceOf',\r\n            params: [hostMasterchef],\r\n          },\r\n          {\r\n            address: lpAddress,\r\n            name: 'totalSupply',\r\n          },\r\n          // Token decimals\r\n          {\r\n            address: tokenAddress,\r\n            name: 'decimals',\r\n          },\r\n          // Quote token decimals\r\n          {\r\n            address: quoteAddress,\r\n            name: 'decimals',\r\n          },\r\n        ]\r\n      }\r\n// if (farmConfig.lpSymbol === 'beltBTC') console.log('calls',calls)\r\n\r\n      const multiResult = await multicall(erc20, calls)\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBalanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals,\r\n      ] = multiResult\r\n\r\n      let kingdomSupply:string\r\n      let beltAPR:string\r\n      let beltRate:string\r\n\r\n      if (farmConfig.isKingdom) {\r\n        switch (farmConfig.pid) {\r\n          case 0:\r\n            kingdomSupply = await getCAKEamount()\r\n            break\r\n          case 1:\r\n            kingdomSupply = await getWBNBBUSDAmount()\r\n            break\r\n          case 2:\r\n            kingdomSupply = await getWBNBETHAmount()\r\n            break\r\n          case 3:\r\n            kingdomSupply = await getWBNBDOTAmount()\r\n            break\r\n          case 4:\r\n            kingdomSupply = await getCUBAmount()\r\n            break\r\n          case 5:\r\n            kingdomSupply = await getBTCBNBAmount()\r\n            break\r\n          case 6:\r\n            kingdomSupply = await getBTCAmount()\r\n            kingdomSupply = new BigNumber(kingdomSupply).div(DEFAULT_TOKEN_DECIMAL).toString()\r\n            beltAPR = beltData.btc\r\n            break\r\n          case 7:\r\n            kingdomSupply = await getETHAmount()\r\n            kingdomSupply = new BigNumber(kingdomSupply).div(DEFAULT_TOKEN_DECIMAL).toString()\r\n            beltAPR = beltData.eth\r\n            break\r\n          case 8:\r\n            kingdomSupply = await getUSDAmount()\r\n            kingdomSupply = new BigNumber(kingdomSupply).div(DEFAULT_TOKEN_DECIMAL).toString()\r\n            beltAPR = beltData.stable\r\n            beltRate = beltData.stableRate\r\n            break\r\n          default:\r\n            break\r\n        }\r\n      }\r\n\r\n      let tokenAmount\r\n      let lpTotalInQuoteToken\r\n      let tokenPriceVsQuote\r\n      let quoteTokenAmount\r\n      let lpTotalInQuoteTokenPCS = new BigNumber(0)\r\n\r\n      if (farmConfig.isTokenOnly || farmConfig.isKingdomToken) {\r\n        tokenAmount = farmConfig.isKingdomToken ? new BigNumber(kingdomSupply).div(new BigNumber(10).pow(tokenDecimals)) : new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\r\n\r\n        if (farmConfig.farmType === 'Belt') tokenAmount = new BigNumber(kingdomSupply)\r\n\r\n        if(farmConfig.token.symbol === 'BUSD' && farmConfig.quoteToken.symbol === 'BUSD') {\r\n          tokenPriceVsQuote = new BigNumber(1)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n// console.log('farmConfig.lpSymbol',farmConfig.lpSymbol)\r\n// console.log('lpTotalInQuoteToken',lpTotalInQuoteToken.toNumber())\r\n        // lpTotalInQuoteTokenPCS = tokenAmountPCS.times(tokenPriceVsQuote)\r\n      } else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        let lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBalanceLP)\r\n          .div(DEFAULT_TOKEN_DECIMAL)\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP))\r\n\r\n        if (farmConfig.isKingdom) {\r\n// console.log('farmConfig.lpSymbol',farmConfig.lpSymbol)\r\n// console.log('kingdomSupply',new BigNumber(kingdomSupply).div(DEFAULT_TOKEN_DECIMAL).toNumber())\r\n\r\n          const lpTokenRatioPCS = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n// console.log('lpTokenRatioPCS',lpTokenRatioPCS.toNumber())\r\n\r\n          lpTotalInQuoteTokenPCS = new BigNumber(quoteTokenBalanceLP)\r\n            .div(DEFAULT_TOKEN_DECIMAL)\r\n            .times(new BigNumber(2))\r\n            .times(lpTokenRatioPCS)\r\n// console.log('lpTotalInQuoteTokenPCS',lpTotalInQuoteTokenPCS.toFixed(2))\r\n\r\n          const ratioPCStoKingdom = new BigNumber(lpTotalSupply).div(new BigNumber(kingdomSupply))\r\n// console.log('ratioPCStoKingdom',ratioPCStoKingdom.toNumber())\r\n\r\n          const kingdomTokenSupply = new BigNumber(tokenBalanceLP).div(new BigNumber(ratioPCStoKingdom))\r\n// console.log('kingdomTokenSupply',kingdomTokenSupply.div(DEFAULT_TOKEN_DECIMAL).toNumber())\r\n\r\n          const kingdomQuoteTokenSupply = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(ratioPCStoKingdom))\r\n// console.log('kingdomQuoteTokenSupply',kingdomQuoteTokenSupply.div(DEFAULT_TOKEN_DECIMAL).toNumber())\r\n\r\n          lpTokenRatio = new BigNumber(kingdomTokenSupply).div(new BigNumber(kingdomQuoteTokenSupply))\r\n// console.log('lpTokenRatio',lpTokenRatio.toNumber())\r\n\r\n          lpTotalInQuoteToken = new BigNumber(kingdomQuoteTokenSupply)\r\n            .div(DEFAULT_TOKEN_DECIMAL)\r\n            .times(new BigNumber(2))\r\n            // .times(lpTokenRatio)\r\n// console.log('lpTotalInQuoteToken',lpTotalInQuoteToken.toNumber())\r\n        }\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals)).times(lpTokenRatio)\r\n        quoteTokenAmount = new BigNumber(quoteTokenBalanceLP)\r\n          .div(BIG_TEN.pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n      }\r\n\r\n      const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\r\n\r\n      // let info = 0\r\n      // let totalAllocPoint = 0\r\n      // let cubPerBlock = 0\r\n\r\n      const mCalls = [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'cubPerBlock',\r\n        }\r\n      ]\r\n\r\n      const [info, totalAllocPoint, cubPerBlock] = await multicall(masterchefABI, mCalls).catch(error => {\r\n        throw new Error(`multicall nontoken: ${error}`)\r\n      })\r\n\r\n      if (farmConfig.isKingdom) {\r\n        const kCalls = [\r\n          {\r\n            address: getKingdomsAddress(),\r\n            name: 'poolInfo',\r\n            params: [farmConfig.pid],\r\n          },\r\n          {\r\n            address: getKingdomsAddress(),\r\n            name: 'totalAllocPoint',\r\n          },\r\n        ]\r\n\r\n        const [kInfo, kTotalAllocPoint] = await multicall(kingdomsABI, kCalls).catch(error => {\r\n          throw new Error(`multicall nontoken: ${error}`)\r\n        })\r\n\r\n        const allocPoint = new BigNumber(kInfo.allocPoint._hex)\r\n        const kingdomTotalAlloc = new BigNumber(600)\r\n\r\n        const kingdomCorrectAlloc = allocPoint.times(new BigNumber(kingdomTotalAlloc)).div(new BigNumber(kTotalAllocPoint))\r\n\r\n        const kingdomPoolWeight = kingdomCorrectAlloc.div(new BigNumber(totalAllocPoint))\r\n\r\n        let poolWeightPCS = new BigNumber(0)\r\n        if (farmConfig.altPid || farmConfig.altPid === 0) {\r\n          let hostMasterchef = getPCSv2MasterChefAddress()\r\n          let hostAbi = pcsv2ABI\r\n          if (farmConfig.farmType === 'Belt') {\r\n            hostMasterchef = getBelt()\r\n            hostAbi = beltABI\r\n          }\r\n\r\n          const hostCalls = [\r\n            {\r\n              address: hostMasterchef,\r\n              name: 'poolInfo',\r\n              params: [farmConfig.altPid],\r\n            },\r\n            {\r\n              address: hostMasterchef,\r\n              name: 'totalAllocPoint',\r\n            }\r\n          ]\r\n\r\n          const [infoPCS, totalAllocPointPCS] = await multicall(hostAbi, hostCalls).catch(error => {\r\n            throw new Error(`multicall pcs error: ${error}`)\r\n          })\r\n\r\n          poolWeightPCS = new BigNumber(infoPCS.allocPoint._hex).div(new BigNumber(totalAllocPointPCS))\r\n        } else if (farmConfig.farmType === 'Bakery') {\r\n          const bakeryCalls = [\r\n            {\r\n              address: getBakery(),\r\n              name: 'poolInfoMap',\r\n              params: [lpAddress],\r\n            },\r\n            {\r\n              address: getBakery(),\r\n              name: 'totalAllocPoint',\r\n            }\r\n          ]\r\n\r\n          const [infoBakery, totalAllocPointBakery] = await multicall(bakeryABI, bakeryCalls).catch(error => {\r\n            throw new Error(`multicall pcs error: ${error}`)\r\n          })\r\n\r\n          poolWeightPCS = new BigNumber(infoBakery.allocPoint._hex).div(new BigNumber(totalAllocPointBakery))\r\n        }\r\n\r\n        let tokenValuePerOrigin = BIG_ZERO\r\n        // let totalSupplyBelt = BIG_ZERO\r\n        if (farmConfig.farmType === 'Belt' && farmConfig.lpSymbol !== 'beltUSD') {\r\n          const bCalls = [\r\n            {\r\n              address: tokenAddress,\r\n              name: 'getPricePerFullShare',\r\n            },\r\n            // {\r\n            //   address: tokenAddress,\r\n            //   name: 'totalSupply',\r\n            // },\r\n          ]\r\n          const [pricePerFullShare] = await multicall(multiStratABI, bCalls)\r\n          tokenValuePerOrigin = new BigNumber(pricePerFullShare).div(DEFAULT_TOKEN_DECIMAL)\r\n          // totalSupplyBelt = new BigNumber(tSupply).div(DEFAULT_TOKEN_DECIMAL)\r\n        }\r\n\r\n        return {\r\n          ...farmConfig,\r\n          tokenAmount: tokenAmount.toJSON(),\r\n          lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\r\n          lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n          tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n          poolWeight: farmConfig.pid === 4 ? '0.19' : kingdomPoolWeight.toJSON(),\r\n          multiplier: farmConfig.pid === 4 ? '30X' : `${kingdomCorrectAlloc.div(100).toString()}X`,\r\n          // multiplier: '1.5X',\r\n          depositFeeBP: kInfo.depositFeeBP,\r\n          cubPerBlock: new BigNumber(cubPerBlock).toNumber(),\r\n          lpTokenBalancePCS: new BigNumber(lpTokenBalanceMC).div(DEFAULT_TOKEN_DECIMAL).toNumber(),\r\n          lpTotalInQuoteTokenPCS: lpTotalInQuoteTokenPCS.toNumber(),\r\n          poolWeightPCS: poolWeightPCS.toJSON(),\r\n          kingdomSupply,\r\n          tokenAmountTotal: tokenAmountTotal.toJSON(),\r\n          tokenValuePerOrigin: tokenValuePerOrigin.toJSON(),\r\n          // totalSupplyBelt: totalSupplyBelt.toJSON(),\r\n          beltAPR,\r\n          beltRate,\r\n        }\r\n      }\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount.toJSON(),\r\n        lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        // tokenPriceVsQuote: quoteTokenAmount.div(tokenAmount).toJSON(),\r\n        poolWeight: poolWeight.toJSON(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        cubPerBlock: new BigNumber(cubPerBlock).toNumber(),\r\n        tokenAmountTotal: tokenAmountTotal.toJSON(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\r\nimport { Farm } from 'state/types'\r\n\r\nconst getFarmFromTokenSymbol = (farms: Farm[], tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\r\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol)\r\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens)\r\n  return filteredFarm\r\n}\r\n\r\nexport const getFarmBaseTokenPrice = (farm: Farm, quoteTokenFarm: Farm, bnbPriceBusd: BigNumber): BigNumber => {\r\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote)\r\n\r\n  if (farm.quoteToken.symbol === 'BUSD') {\r\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'BNB') {\r\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  // Possible alternative farm quoteTokens:\r\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\r\n  // If the farm's quote token isn't BUSD or wBNB, we then use the quote token, of the original farm's quote token\r\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\r\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BNB') {\r\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\r\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  // Catch in case token does not have immediate or once-removed BUSD/wBNB quoteToken\r\n  return BIG_ZERO\r\n}\r\n\r\nexport const getFarmQuoteTokenPrice = (farm: Farm, quoteTokenFarm: Farm, bnbPriceBusd: BigNumber): BigNumber => {\r\n  if (farm.quoteToken.symbol === 'BUSD') {\r\n    return new BigNumber(1)\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'BNB') {\r\n    return bnbPriceBusd\r\n  }\r\n\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BNB') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  return BIG_ZERO\r\n}\r\n\r\nconst fetchFarmsPrices = async (farms) => {\r\n  const bnbBusdFarm = farms.find((farm: Farm) => farm.pid === 1)\r\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? new BigNumber(1).times(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\r\n\r\n  const farmsWithPrices = farms.map((farm) => {\r\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol)\r\n    const baseTokenPrice = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n    const quoteTokenPrice = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n    const token = { ...farm.token, busdPrice: baseTokenPrice.toJSON() }\r\n    const quoteToken = { ...farm.quoteToken, busdPrice: quoteTokenPrice.toJSON() }\r\n    return { ...farm, token, quoteToken }\r\n  })\r\n\r\n  return farmsWithPrices\r\n}\r\n\r\nexport default fetchFarmsPrices\r\n","import BigNumber from 'bignumber.js'\r\n// import axios from 'axios'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport kingdomsABI from 'config/abi/kingdoms.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress, getKingdomsAddress } from 'utils/addressHelpers'\r\nimport { FarmConfig } from 'config/constants/types'\r\n\r\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n  const kingdomAddress = getKingdomsAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    // const lpContractAddress = getAddress(farm.lpAddresses)\r\n    const lpContractAddress = farm.isTokenOnly || farm.isKingdomToken ? getAddress(farm.token.address) : getAddress(farm.lpAddresses)\r\n    const mainAddress = farm.isKingdom ? kingdomAddress : masterChefAddress\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, mainAddress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    // const lpContractAddress = getAddress(farm.lpAddresses)\r\n    const lpContractAddress = farm.isTokenOnly || farm.isKingdomToken ? getAddress(farm.token.address) : getAddress(farm.lpAddresses)\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n  const kingdomAddress = getKingdomsAddress()\r\n\r\n  const nonKingdomFarms = farmsToFetch.filter(farm => !farm.isKingdom)\r\n  const kingdomFarms = farmsToFetch.filter(farm => farm.isKingdom)\r\n\r\n  const callsMC = nonKingdomFarms.map((farm) => ({\r\n    address: masterChefAddress,\r\n    name: 'userInfo',\r\n    params: [farm.pid, account],\r\n  }))\r\n\r\n  const callsK = kingdomFarms.map((farm) => ({\r\n    address: kingdomAddress,\r\n    name: 'stakedWantTokens',\r\n    params: [farm.pid, account],\r\n  }))\r\n\r\n  const rawStakedBalancesMC = await multicall(masterchefABI, callsMC)\r\n  const rawStakedBalancesK = await multicall(kingdomsABI, callsK)\r\n\r\n  const rawStakedBalances = [...rawStakedBalancesMC, ...rawStakedBalancesK]\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n  const kingdomAddress = getKingdomsAddress()\r\n\r\n  const nonKingdomFarms = farmsToFetch.filter(farm => !farm.isKingdom)\r\n  const kingdomFarms = farmsToFetch.filter(farm => farm.isKingdom)\r\n\r\n  const callsMC = nonKingdomFarms.map((farm) => ({\r\n    address: masterChefAddress,\r\n    name: 'pendingCub',\r\n    params: [farm.pid, account],\r\n  }))\r\n\r\n  const callsK = kingdomFarms.map((farm) => ({\r\n    address: kingdomAddress,\r\n    name: 'pendingCUB',\r\n    params: [farm.pid, account],\r\n  }))\r\n\r\n  const rawEarningsMasterChef = await multicall(masterchefABI, callsMC)\r\n  const rawEarningsKingdoms = await multicall(kingdomsABI, callsK)\r\n\r\n  const rawEarnings = [...rawEarningsMasterChef, ...rawEarningsKingdoms]\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport BigNumber from 'bignumber.js'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport fetchFarms from './fetchFarms'\r\nimport fetchFarmsPrices from './fetchFarmsPrices'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\r\n\r\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\r\n  ...farm,\r\n  userData: {\r\n    allowance: '0',\r\n    tokenBalance: '0',\r\n    stakedBalance: '0',\r\n    earnings: '0',\r\n  },\r\n}))\r\n\r\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map(farm => {\r\n        const liveFarmData = liveFarmsData.find(f => f.pid === farm.pid && f.isKingdom === farm.isKingdom)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { pid, isKingdom, lpSymbol } = userDataEl\r\n        const index = state.data.findIndex((farm) => farm.pid === pid && isKingdom === farm.isKingdom)\r\n        if (isKingdom && lpSymbol === 'CUB') state.data[index] = { ...state.data[index], userData: { ...userDataEl }}\r\n        else state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n      state.userDataLoaded = true\r\n    },\r\n    setLoadArchivedFarmsData: (state, action) => {\r\n      const loadArchivedFarmsData = action.payload\r\n      state.loadArchivedFarmsData = loadArchivedFarmsData\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData, setLoadArchivedFarmsData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch, getState) => {\r\n  const fetchArchived = getState().farms.loadArchivedFarmsData\r\n  const farmsToFetch = fetchArchived ? farmsConfig : nonArchivedFarms\r\n  const farms = await fetchFarms(farmsToFetch)\r\n  const farmsWithPrices = await fetchFarmsPrices(farms)\r\n\r\n  // Modify token price based on quotetoken price, only for Belt\r\n  const newFarms = farmsWithPrices.map((farm) => {\r\n    if (farm.farmType === 'Belt') {\r\n      let tokenPrice = new BigNumber(0)\r\n      if (farm.lpSymbol !== 'beltUSD') {\r\n\r\n        tokenPrice = farm.quoteToken.busdPrice ? new BigNumber(farm.tokenValuePerOrigin).times(farm.quoteToken.busdPrice) : new BigNumber(0)\r\n      } else {\r\n        tokenPrice = new BigNumber(farm.beltRate)\r\n      }\r\n      const updatedFarm = { ...farm, lpTotalInQuoteToken:  farm.tokenAmount, token: { ...farm.token, busdPrice: tokenPrice.toString() } }\r\n\r\n      return updatedFarm\r\n    }\r\n    return farm\r\n  })\r\n\r\n  dispatch(setFarmsPublicData(newFarms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account: string) => async (dispatch, getState) => {\r\n  const fetchArchived = getState().farms.loadArchivedFarmsData\r\n  const farmsToFetch = fetchArchived ? farmsConfig : nonArchivedFarms\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      pid: farmsToFetch[index].pid,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n      isKingdom: farmsToFetch[index].isKingdom,\r\n      lpSymbol: farmsToFetch[index].lpSymbol,\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import merge from 'lodash/merge'\r\nimport teamsList from 'config/constants/teams'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Team } from 'config/constants/types'\r\nimport makeBatchRequest from 'utils/makeBatchRequest'\r\nimport { TeamsById, TeamResponse } from 'state/types'\r\n\r\nconst profileContract = getProfileContract()\r\n\r\nexport const getTeam = async (teamId: number): Promise<Team> => {\r\n  try {\r\n    const {\r\n      0: teamName,\r\n      2: numberUsers,\r\n      3: numberPoints,\r\n      4: isJoinable,\r\n    } = await profileContract.methods.getTeamProfile(teamId).call()\r\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\r\n\r\n    return merge({}, staticTeamInfo, {\r\n      isJoinable,\r\n      name: teamName,\r\n      users: numberUsers,\r\n      points: numberPoints,\r\n    })\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets on-chain data and merges it with the existing static list of teams\r\n */\r\nexport const getTeams = async (): Promise<TeamsById> => {\r\n  try {\r\n    const teamsById = teamsList.reduce((accum, team) => {\r\n      return {\r\n        ...accum,\r\n        [team.id]: team,\r\n      }\r\n    }, {})\r\n    const nbTeams = await profileContract.methods.numberTeams().call()\r\n    const calls = []\r\n\r\n    for (let i = 1; i <= nbTeams; i++) {\r\n      calls.push(profileContract.methods.getTeamProfile(i).call)\r\n    }\r\n\r\n    const teamData = (await makeBatchRequest(calls)) as TeamResponse[]\r\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\r\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\r\n\r\n      return {\r\n        ...accum,\r\n        [index + 1]: {\r\n          name: teamName,\r\n          users: Number(numberUsers),\r\n          points: Number(numberPoints),\r\n          isJoinable,\r\n        },\r\n      }\r\n    }, {})\r\n\r\n    return merge({}, teamsById, onChainTeamData)\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n","import { Team } from './types'\r\n\r\nconst teams: Team[] = [\r\n  {\r\n    id: 1,\r\n    name: 'Syrup Storm',\r\n    description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\r\n    images: {\r\n      lg: 'syrup-storm-lg.png',\r\n      md: 'syrup-storm-md.png',\r\n      sm: 'syrup-storm-sm.png',\r\n      alt: 'syrup-storm-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png',\r\n    },\r\n    background: 'syrup-storm-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Fearsome Flippers',\r\n    description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped too!\",\r\n    images: {\r\n      lg: 'fearsome-flippers-lg.png',\r\n      md: 'fearsome-flippers-md.png',\r\n      sm: 'fearsome-flippers-sm.png',\r\n      alt: 'fearsome-flippers-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png',\r\n    },\r\n    background: 'fearsome-flippers-bg.svg',\r\n    textColor: '#FFFFFF',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Chaotic Cakers',\r\n    description: 'Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!',\r\n    images: {\r\n      lg: 'chaotic-cakers-lg.png',\r\n      md: 'chaotic-cakers-md.png',\r\n      sm: 'chaotic-cakers-sm.png',\r\n      alt: 'chaotic-cakers-alt.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png',\r\n    },\r\n    background: 'chaotic-cakers-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n]\r\n\r\nexport default teams\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","// Set of helper functions to facilitate wallet setup\r\n\r\nimport { nodes } from './getRpcUrl'\r\n\r\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\r\nexport const setupNetwork = async () => {\r\n  const provider = (window as WindowChain).ethereum\r\n  if (provider) {\r\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n    try {\r\n      await provider.request({\r\n        method: 'wallet_addEthereumChain',\r\n        params: [\r\n          {\r\n            chainId: `0x${chainId.toString(16)}`,\r\n            chainName: 'Binance Smart Chain Mainnet',\r\n            nativeCurrency: {\r\n              name: 'BNB',\r\n              symbol: 'bnb',\r\n              decimals: 18,\r\n            },\r\n            rpcUrls: nodes,\r\n            blockExplorerUrls: ['https://bscscan.com/'],\r\n          },\r\n        ],\r\n      })\r\n      return true\r\n    } catch (error) {\r\n      console.error(error)\r\n      return false\r\n    }\r\n  } else {\r\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @param tokenImage\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\r\nexport const registerToken = async (\r\n  tokenAddress: string,\r\n  tokenSymbol: string,\r\n  tokenDecimals: number,\r\n  tokenImage: string,\r\n) => {\r\n  const tokenAdded = await (window as WindowChain).ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals,\r\n        image: tokenImage,\r\n      },\r\n    },\r\n  })\r\n\r\n  return tokenAdded\r\n}\r\n","import { useContext } from 'react'\r\nimport { ToastsContext } from 'contexts/ToastsContext'\r\n\r\nconst useToast = () => {\r\n  const toastContext = useContext(ToastsContext)\r\n\r\n  if (toastContext === undefined) {\r\n    throw new Error('Toasts context undefined')\r\n  }\r\n\r\n  return toastContext\r\n}\r\n\r\nexport default useToast\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\r\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from '@web3-react/injected-connector'\r\nimport {\r\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\r\n  WalletConnectConnector,\r\n} from '@web3-react/walletconnect-connector'\r\nimport { ConnectorNames, connectorLocalStorageKey } from '@pancakeswap-libs/uikit'\r\nimport { connectorsByName } from 'utils/web3React'\r\nimport { setupNetwork } from 'utils/wallet'\r\nimport useToast from 'hooks/useToast'\r\nimport { profileClear } from 'state/profile'\r\nimport { useAppDispatch } from 'state'\r\n\r\nconst useAuth = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { activate, deactivate } = useWeb3React()\r\n  const { toastError } = useToast()\r\n\r\n  const login = useCallback((connectorID: ConnectorNames) => {\r\n    const connector = connectorsByName[connectorID]\r\n    if (connector) {\r\n      activate(connector, async (error: Error) => {\r\n        if (error instanceof UnsupportedChainIdError) {\r\n          const hasSetup = await setupNetwork()\r\n          if (hasSetup) {\r\n            activate(connector)\r\n          }\r\n        } else {\r\n          window.localStorage.removeItem(connectorLocalStorageKey)\r\n          if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\r\n            toastError('Provider Error', 'No provider was found')\r\n          } else if (\r\n            error instanceof UserRejectedRequestErrorInjected ||\r\n            error instanceof UserRejectedRequestErrorWalletConnect\r\n          ) {\r\n            if (connector instanceof WalletConnectConnector) {\r\n              const walletConnector = connector as WalletConnectConnector\r\n              walletConnector.walletConnectProvider = null\r\n            }\r\n            toastError('Authorization Error', 'Please authorize to access your account')\r\n          } else {\r\n            toastError(error.name, error.message)\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      toastError(\"Can't find connector\", 'The connector config is wrong')\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const logout = useCallback(() => {\r\n    dispatch(profileClear())\r\n    deactivate()\r\n  }, [deactivate, dispatch])\r\n\r\n  return { login, logout }\r\n}\r\n\r\nexport default useAuth\r\n","// import tokens from './tokens'\r\n// import farms from './farms'\r\n// import { Ifo, Token } from './types'\r\nimport { Ifo } from './types'\r\n\r\n/* const cakeBnbLpToken: Token = {\r\n  symbol: farms[1].lpSymbol,\r\n  address: farms[1].lpAddresses,\r\n  decimals: 18,\r\n} */\r\n\r\nconst ifos: Ifo[] = [\r\n  /* {\r\n    id: 'horizon',\r\n    address: '0x6137B571f7F1E44839ae10310a08be86D1A4D03B',\r\n    isActive: true,\r\n    name: 'Horizon Protocol (HZN)',\r\n    poolBasic: {\r\n      saleAmount: '3,000,000 HZN',\r\n      raiseAmount: '$750,000',\r\n      cakeToBurn: '$375,000',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '7,000,000 HZN',\r\n      raiseAmount: '$1,750,000',\r\n      cakeToBurn: '$875,000',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.hzn,\r\n    releaseBlockNumber: 6581111,\r\n    campaignId: '511090000',\r\n    articleUrl: 'https://pancakeswap.medium.com/horizon-protocol-hzn-ifo-to-be-hosted-on-pancakeswap-51f79601c9d8',\r\n    tokenOfferingPrice: 0.25,\r\n    isV1: false,\r\n  },\r\n  {\r\n    id: 'belt',\r\n    address: '0xc9FBedC033a1c479a6AD451ffE463025E92a1d38',\r\n    isActive: false,\r\n    name: 'Belt (BELT)',\r\n    poolUnlimited: {\r\n      saleAmount: '150,000 BELT',\r\n      raiseAmount: '$3,000,000',\r\n      cakeToBurn: '$1,500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.belt,\r\n    releaseBlockNumber: 5493919,\r\n    campaignId: '511080000',\r\n    articleUrl: 'https://pancakeswap.medium.com/belt-fi-belt-ifo-to-be-hosted-on-pancakeswap-353585117e32',\r\n    tokenOfferingPrice: null,\r\n    isV1: true,\r\n  },\r\n  {\r\n    id: 'watch',\r\n    address: '0x55344b55C71Ad8834C397E6e08dF5195cF84fe6d',\r\n    isActive: false,\r\n    name: 'Yieldwatch (WATCH)',\r\n    poolUnlimited: {\r\n      saleAmount: '8,000,000 WATCH',\r\n      raiseAmount: '$800,000',\r\n      cakeToBurn: '$400,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.watch,\r\n    releaseBlockNumber: 5294924,\r\n    campaignId: '511070000',\r\n    articleUrl: 'https://pancakeswap.medium.com/yieldwatch-watch-ifo-to-be-hosted-on-pancakeswap-d24301f17241',\r\n    tokenOfferingPrice: null,\r\n    isV1: true,\r\n  },\r\n  {\r\n    id: 'berry',\r\n    address: '0x5d028cE3435B2bB9AceBfaC599EEbA1ccD63d7dd',\r\n    isActive: false,\r\n    name: 'Berry (BRY)',\r\n    poolUnlimited: {\r\n      saleAmount: '2,000,000 BRY',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.bry,\r\n    releaseBlockNumber: 4750968,\r\n    campaignId: '511060000',\r\n    articleUrl: 'https://pancakeswap.medium.com/berry-bry-ifo-to-be-hosted-on-pancakeswap-b4f9095e9cdb',\r\n    tokenOfferingPrice: null,\r\n    isV1: true,\r\n  },\r\n  {\r\n    id: 'soteria',\r\n    address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\r\n    isActive: false,\r\n    name: 'Soteria (wSOTE)',\r\n    poolUnlimited: {\r\n      saleAmount: '1,500,000 wSOTE',\r\n      raiseAmount: '$525,000',\r\n      cakeToBurn: '$262,500',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.wsote,\r\n    releaseBlockNumber: 4086064,\r\n    campaignId: '511050000',\r\n    articleUrl: 'https://pancakeswap.medium.com/soteria-sota-ifo-to-be-hosted-on-pancakeswap-64b727c272ae',\r\n    tokenOfferingPrice: null,\r\n    isV1: true,\r\n  },\r\n  {\r\n    id: 'helmet',\r\n    address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\r\n    isActive: false,\r\n    name: 'Helmet.insure (Helmet)',\r\n    poolUnlimited: {\r\n      saleAmount: '10,000,000 Helmet',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.helmet,\r\n    releaseBlockNumber: 3771926,\r\n    campaignId: '511040000',\r\n    articleUrl: 'https://pancakeswap.medium.com/1-000-000-helmet-helmet-ifo-to-be-hosted-on-pancakeswap-3379a2a89a67',\r\n    tokenOfferingPrice: null,\r\n    isV1: true,\r\n  },\r\n  {\r\n    id: 'tenet',\r\n    address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\r\n    isActive: false,\r\n    name: 'Tenet (TEN)',\r\n    poolUnlimited: {\r\n      saleAmount: '1,000,000 TEN',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.ten,\r\n    releaseBlockNumber: 3483883,\r\n    campaignId: '511030000',\r\n    articleUrl: 'https://pancakeswap.medium.com/tenet-ten-ifo-to-be-hosted-on-pancakeswap-b7e1eb4cb272',\r\n    tokenOfferingPrice: null,\r\n    isV1: true,\r\n  },\r\n  {\r\n    id: 'ditto',\r\n    address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\r\n    isActive: false,\r\n    name: 'Ditto (DITTO)',\r\n    poolUnlimited: {\r\n      saleAmount: '700,000 DITTO',\r\n      raiseAmount: '$630,000',\r\n      cakeToBurn: '$315,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.ditto,\r\n    releaseBlockNumber: 3279767,\r\n    campaignId: '511020000',\r\n    articleUrl: 'https://pancakeswap.medium.com/ditto-money-ditto-ifo-to-be-hosted-on-pancakeswap-342da3059a66',\r\n    tokenOfferingPrice: null,\r\n    isV1: true,\r\n  },\r\n  {\r\n    id: 'blink',\r\n    address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\r\n    isActive: false,\r\n    name: 'BLINk (BLK)',\r\n    poolUnlimited: {\r\n      saleAmount: '100,000,000 BLINK',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.blink,\r\n    releaseBlockNumber: 3279767,\r\n    campaignId: '511010000',\r\n    articleUrl: 'https://medium.com/pancakeswap/1-000-000-ifo-blink-joins-pancakeswap-15841800bdd8',\r\n    tokenOfferingPrice: null,\r\n    isV1: true,\r\n  }, */\r\n]\r\n\r\nexport default ifos\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { BlockState } from '../types'\r\n\r\nconst initialState: BlockState = { currentBlock: 0, initialBlock: 0 }\r\n\r\nexport const blockSlice = createSlice({\r\n  name: 'Block',\r\n  initialState,\r\n  reducers: {\r\n    setBlock: (state, action: PayloadAction<number>) => {\r\n      if (state.initialBlock === 0) {\r\n        state.initialBlock = action.payload\r\n      }\r\n\r\n      state.currentBlock = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setBlock } = blockSlice.actions\r\n\r\nexport default blockSlice.reducer\r\n","import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { BscConnector } from '@binance-chain/bsc-connector'\r\nimport { ConnectorNames } from '@pancakeswap-libs/uikit'\r\nimport Web3 from 'web3'\r\nimport getNodeUrl from './getRpcUrl'\r\n\r\nconst POLLING_INTERVAL = 12000\r\nconst rpcUrl = getNodeUrl()\r\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n\r\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\r\n\r\nconst walletconnect = new WalletConnectConnector({\r\n  rpc: { [chainId]: rpcUrl },\r\n  bridge: 'https://bridge.walletconnect.org',\r\n  qrcode: true,\r\n  pollingInterval: POLLING_INTERVAL,\r\n})\r\n\r\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: bscConnector,\r\n}\r\n\r\nexport const getLibrary = (provider): Web3 => {\r\n  return provider\r\n}\r\n","import Nfts, { IPFS_GATEWAY, nftSources } from 'config/constants/nfts'\r\nimport { Nft, NftType } from 'config/constants/types'\r\nimport { getAddress } from './addressHelpers'\r\nimport { getErc721Contract } from './contractHelpers'\r\n\r\n/**\r\n * Gets the identifier key based on the nft address\r\n * Helpful for looking up the key when all you have is the address\r\n */\r\nexport const getIdentifierKeyFromAddress = (nftAddress: string) => {\r\n  const nftSource = Object.values(nftSources).find((nftSourceEntry) => {\r\n    const address = getAddress(nftSourceEntry.address)\r\n    return address === nftAddress\r\n  })\r\n\r\n  return nftSource ? nftSource.identifierKey : null\r\n}\r\n\r\n/**\r\n * Some sources like Pancake do not return HTTP tokenURI's\r\n */\r\nexport const getTokenUrl = (tokenUri: string) => {\r\n  if (tokenUri.startsWith('ipfs://')) {\r\n    return `${IPFS_GATEWAY}/ipfs/${tokenUri.slice(6)}`\r\n  }\r\n\r\n  return tokenUri\r\n}\r\n\r\nexport const getAddressByType = (type: NftType) => {\r\n  return getAddress(nftSources[type].address)\r\n}\r\n\r\nexport const getTokenUriData = async (nftAddress: string, tokenId: number) => {\r\n  try {\r\n    const contract = getErc721Contract(nftAddress)\r\n    const tokenUri = await contract.methods.tokenURI(tokenId).call()\r\n    const uriDataResponse = await fetch(getTokenUrl(tokenUri))\r\n\r\n    if (!uriDataResponse.ok) {\r\n      return null\r\n    }\r\n\r\n    const uriData = await uriDataResponse.json()\r\n    return uriData\r\n  } catch (error) {\r\n    console.error('getTokenUriData', error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const getNftByTokenId = async (nftAddress: string, tokenId: number): Promise<Nft | null> => {\r\n  const uriData = await getTokenUriData(nftAddress, tokenId)\r\n  const identifierKey = getIdentifierKeyFromAddress(nftAddress)\r\n\r\n  // Bail out early if we have no uriData, identifierKey, or the value does not\r\n  // exist in the object\r\n  if (!uriData) {\r\n    return null\r\n  }\r\n\r\n  if (!identifierKey) {\r\n    return null\r\n  }\r\n\r\n  if (!uriData[identifierKey]) {\r\n    return null\r\n  }\r\n\r\n  return Nfts.find((nft) => {\r\n    return uriData[identifierKey].includes(nft.identifier)\r\n  })\r\n}\r\n","import { Farm } from 'state/types'\r\n\r\n/**\r\n * Returns the first farm with a quote token that matches from an array of preferred quote tokens\r\n * @param farms Array of farms\r\n * @param preferredQuoteTokens Array of preferred quote tokens\r\n * @returns A preferred farm, if found - or the first element of the farms array\r\n */\r\nexport const filterFarmsByQuoteToken = (farms: Farm[], preferredQuoteTokens: string[] = ['BUSD', 'wBNB']): Farm => {\r\n  const preferredFarm = farms.find((farm) => {\r\n    return preferredQuoteTokens.some((quoteToken) => {\r\n      return farm.quoteToken.symbol === quoteToken\r\n    })\r\n  })\r\n  return preferredFarm || farms[0]\r\n}\r\n\r\nexport default filterFarmsByQuoteToken\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { PriceApiResponse, PriceApiThunk, PriceState } from 'state/types'\r\n\r\nconst initialState: PriceState = {\r\n  isLoading: false,\r\n  lastUpdated: null,\r\n  data: null,\r\n}\r\n\r\n// Thunks\r\nexport const fetchPrices = createAsyncThunk<PriceApiThunk>('prices/fetch', async () => {\r\n  const response = await fetch('https://api.pancakeswap.info/api/v2/tokens')\r\n  const data = (await response.json()) as PriceApiResponse\r\n\r\n  // Return normalized token names\r\n  return {\r\n    updated_at: data.updated_at,\r\n    data: Object.keys(data.data).reduce((accum, token) => {\r\n      return {\r\n        ...accum,\r\n        [token.toLowerCase()]: parseFloat(data.data[token].price),\r\n      }\r\n    }, {}),\r\n  }\r\n})\r\n\r\nexport const pricesSlice = createSlice({\r\n  name: 'prices',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchPrices.pending, (state) => {\r\n      state.isLoading = true\r\n    })\r\n    builder.addCase(fetchPrices.fulfilled, (state, action: PayloadAction<PriceApiThunk>) => {\r\n      state.isLoading = false\r\n      state.lastUpdated = action.payload.updated_at\r\n      state.data = action.payload.data\r\n    })\r\n  },\r\n})\r\n\r\nexport default pricesSlice.reducer\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { CollectiblesState } from 'state/types'\r\nimport { nftSources } from 'config/constants/nfts'\r\nimport { NftType } from 'config/constants/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { getNftByTokenId } from 'utils/collectibles'\r\n\r\nconst initialState: CollectiblesState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  data: {},\r\n}\r\n\r\ntype NftSourceItem = [number, string]\r\n\r\n// Thunks\r\nexport const fetchWalletNfts = createAsyncThunk<NftSourceItem[], string>(\r\n  'collectibles/fetchWalletNfts',\r\n  async (account) => {\r\n    // For each nft source get nft data\r\n    const nftSourcePromises = Object.keys(nftSources).map(async (nftSourceType) => {\r\n      const { address: addressObj } = nftSources[nftSourceType as NftType]\r\n      const address = getAddress(addressObj)\r\n      const contract = getErc721Contract(address)\r\n\r\n      const getTokenIdAndData = async (index: number) => {\r\n        try {\r\n          const tokenId = await contract.methods.tokenOfOwnerByIndex(account, index).call()\r\n          const walletNft = await getNftByTokenId(address, tokenId)\r\n          return [Number(tokenId), walletNft.identifier]\r\n        } catch (error) {\r\n          console.error('getTokenIdAndData', error)\r\n          return null\r\n        }\r\n      }\r\n\r\n      const balanceOfResponse = await contract.methods.balanceOf(account).call()\r\n      const balanceOf = Number(balanceOfResponse)\r\n\r\n      if (balanceOf === 0) {\r\n        return []\r\n      }\r\n\r\n      const nftDataFetchPromises = []\r\n\r\n      // For each index get the tokenId and data associated with it\r\n      for (let i = 0; i < balanceOf; i++) {\r\n        nftDataFetchPromises.push(getTokenIdAndData(i))\r\n      }\r\n\r\n      const nftData = await Promise.all(nftDataFetchPromises)\r\n      return nftData\r\n    })\r\n\r\n    const nftSourceData = await Promise.all(nftSourcePromises)\r\n\r\n    return nftSourceData.flat()\r\n  },\r\n)\r\n\r\nexport const collectiblesSlice = createSlice({\r\n  name: 'collectibles',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchWalletNfts.pending, (state) => {\r\n      state.isLoading = true\r\n    })\r\n    builder.addCase(fetchWalletNfts.fulfilled, (state, action) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n      state.data = action.payload.reduce((accum, association) => {\r\n        if (!association) {\r\n          return accum\r\n        }\r\n\r\n        const [tokenId, identifier] = association as NftSourceItem\r\n\r\n        return {\r\n          ...accum,\r\n          [identifier]: accum[identifier] ? [...accum[identifier], tokenId] : [tokenId],\r\n        }\r\n      }, {})\r\n    })\r\n  },\r\n})\r\n\r\nexport default collectiblesSlice.reducer\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","import { Campaign } from './types'\r\n\r\n/**\r\n * id: The campaign id (required)\r\n * type: The type of the achievement\r\n * title: A string or an object to be translated.\r\n * Note: If the value is a string it is likely used as data in a translation object\r\n *\r\n * badge: Achievement avatar\r\n */\r\n\r\nconst campaigns: Campaign[] = [\r\n  {\r\n    id: '511090000',\r\n    type: 'ifo',\r\n    title: 'Horizon Protocol',\r\n    badge: 'ifo-hzn.svg',\r\n  },\r\n  {\r\n    id: '511080000',\r\n    type: 'ifo',\r\n    title: 'Belt',\r\n    badge: 'ifo-belt.svg',\r\n  },\r\n  {\r\n    id: '511070000',\r\n    type: 'ifo',\r\n    title: 'Yieldwatch',\r\n    badge: 'ifo-watch.svg',\r\n  },\r\n  {\r\n    id: '511060000',\r\n    type: 'ifo',\r\n    title: 'Berry',\r\n    badge: 'ifo-bry.svg',\r\n  },\r\n  {\r\n    id: '511050000',\r\n    type: 'ifo',\r\n    title: 'Soteria',\r\n    badge: 'ifo-wsote.svg',\r\n  },\r\n  {\r\n    id: '511040000',\r\n    type: 'ifo',\r\n    title: 'Helmet',\r\n    badge: 'ifo-helmet.svg',\r\n  },\r\n  {\r\n    id: '511030000',\r\n    type: 'ifo',\r\n    title: 'Tenet',\r\n    badge: 'ifo-ten.svg',\r\n  },\r\n  {\r\n    id: '511020000',\r\n    type: 'ifo',\r\n    title: 'Ditto',\r\n    badge: 'ifo-ditto.svg',\r\n  },\r\n  {\r\n    id: '511010000',\r\n    type: 'ifo',\r\n    title: 'Blink',\r\n    badge: 'ifo-blk.svg',\r\n  },\r\n  {\r\n    id: '512010001',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Gold',\r\n    badge: 'easter-champion-gold.svg',\r\n  },\r\n  {\r\n    id: '512010002',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010003',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010004',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010005',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Gold',\r\n    badge: 'easter-participant-gold.svg',\r\n  },\r\n  {\r\n    id: '512010006',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Silver',\r\n    badge: 'easter-champion-silver.svg',\r\n  },\r\n  {\r\n    id: '512010007',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010008',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010009',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010010',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Silver',\r\n    badge: 'easter-participant-silver.svg',\r\n  },\r\n  {\r\n    id: '512010011',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Bronze',\r\n    badge: 'easter-champion-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010012',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010013',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010014',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010015',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Bronze',\r\n    badge: 'easter-participant-bronze.svg',\r\n  },\r\n]\r\n\r\n/**\r\n * Transform the campaign config into a map. Keeps the config the same\r\n * as the others and allows easy access to a campaign by id\r\n */\r\nexport const campaignMap = new Map<string, Campaign>()\r\n\r\ncampaigns.forEach((campaign) => {\r\n  campaignMap.set(campaign.id, campaign)\r\n})\r\n\r\nexport default campaigns\r\n","import { Campaign } from 'config/constants/types'\r\nimport { getPointCenterIfoContract } from 'utils/contractHelpers'\r\nimport ifosList from 'config/constants/ifo'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { Achievement, TranslatableText } from 'state/types'\r\nimport makeBatchRequest from './makeBatchRequest'\r\n\r\ninterface IfoMapResponse {\r\n  thresholdToClaim: string\r\n  campaignId: string\r\n  numberPoints: string\r\n}\r\n\r\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        id: 999,\r\n        fallback: `IFO Shopper: ${campaign.title}`,\r\n        data: {\r\n          name: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.title\r\n  }\r\n}\r\n\r\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        id: 999,\r\n        fallback: `Committed more than $5 worth of LP in the ${campaign.title} IFO`,\r\n        data: {\r\n          name: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.description\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if a wallet is eligble to claim points from valid IFO's\r\n */\r\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\r\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\r\n  const ifoCampaignAddresses = ifoCampaigns.map((ifoItem) => ifoItem.address)\r\n  const pointCenterContract = getPointCenterIfoContract()\r\n\r\n  // Returns the claim status of every IFO with a campaign ID\r\n  const claimStatuses = (await pointCenterContract.methods\r\n    .checkClaimStatuses(account, ifoCampaignAddresses)\r\n    .call()) as boolean[]\r\n\r\n  // Get IFO data for all IFO's that are eligible to claim\r\n  const claimableIfoData = (await makeBatchRequest(\r\n    claimStatuses.reduce((accum, claimStatus, index) => {\r\n      if (claimStatus === true) {\r\n        return [...accum, pointCenterContract.methods.ifos(ifoCampaignAddresses[index]).call]\r\n      }\r\n\r\n      return accum\r\n    }, []),\r\n  )) as IfoMapResponse[]\r\n\r\n  // Transform response to an Achievement\r\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\r\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId)\r\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableIfoDataItem.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        address,\r\n        id: claimableIfoDataItem.campaignId,\r\n        type: 'ifo',\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(claimableIfoDataItem.numberPoints),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n","import { request, gql } from 'graphql-request'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\r\nimport { Achievement } from 'state/types'\r\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\r\n\r\ninterface UserPointIncreaseEvent {\r\n  campaignId: string\r\n  id: string // wallet address\r\n  points: string\r\n}\r\n\r\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\r\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\r\n  try {\r\n    const { user } = await request(\r\n      GRAPH_API_PROFILE,\r\n      gql`\r\n        query getUserPointIncreaseEvents($account: ID!) {\r\n          user(id: $account) {\r\n            points {\r\n              id\r\n              campaignId\r\n              points\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        account: account.toLowerCase(),\r\n      },\r\n    )\r\n\r\n    return user.points\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\r\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\r\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\r\n\r\n  if (!pointIncreaseEvents) {\r\n    return []\r\n  }\r\n\r\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\r\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: userPoint.campaignId,\r\n        type: campaignMeta.type,\r\n        address: userPoint.id,\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(userPoint.points),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit'\r\nimport { AchievementState, Achievement } from '../types'\r\nimport { getAchievements } from './helpers'\r\n\r\nconst initialState: AchievementState = {\r\n  data: [],\r\n}\r\n\r\nexport const achievementSlice = createSlice({\r\n  name: 'achievements',\r\n  initialState,\r\n  reducers: {\r\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\r\n      state.data.push(action.payload)\r\n    },\r\n    addAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data = [...state.data, ...action.payload]\r\n    },\r\n    setAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data = action.payload\r\n    },\r\n    clearAchievements: (state) => {\r\n      state.data = []\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { addAchievement, addAchievements, setAchievements, clearAchievements } = achievementSlice.actions\r\n\r\n// Thunks\r\nexport const fetchAchievements = (account: string) => async (dispatch: Dispatch) => {\r\n  try {\r\n    const achievements = await getAchievements(account)\r\n    dispatch(setAchievements(achievements))\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n\r\nexport default achievementSlice.reducer\r\n","import React, { createContext, ReactNode, useCallback, useState } from 'react'\r\nimport { kebabCase } from 'lodash'\r\nimport { Toast, toastTypes } from '@pancakeswap-libs/uikit'\r\nimport { ToastContextApi } from './types'\r\n\r\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\r\n\r\nexport const ToastsProvider: React.FC = ({ children }) => {\r\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\r\n\r\n  const toast = useCallback(\r\n    ({ title, description, type }: Omit<Toast, 'id'>) => {\r\n      setToasts((prevToasts) => {\r\n        const id = kebabCase(title)\r\n\r\n        // Remove any existing toasts with the same id\r\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\r\n\r\n        return [\r\n          {\r\n            id,\r\n            title,\r\n            description,\r\n            type,\r\n          },\r\n          ...currentToasts,\r\n        ]\r\n      })\r\n    },\r\n    [setToasts],\r\n  )\r\n\r\n  const toastError = (title: string, description?: ReactNode) => {\r\n    return toast({ title, description, type: toastTypes.DANGER })\r\n  }\r\n  const toastInfo = (title: string, description?: ReactNode) => {\r\n    return toast({ title, description, type: toastTypes.INFO })\r\n  }\r\n  const toastSuccess = (title: string, description?: ReactNode) => {\r\n    return toast({ title, description, type: toastTypes.SUCCESS })\r\n  }\r\n  const toastWarning = (title: string, description?: ReactNode) => {\r\n    return toast({ title, description, type: toastTypes.WARNING })\r\n  }\r\n  const clear = () => setToasts([])\r\n  const remove = (id: string) => {\r\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\r\n  }\r\n\r\n  return (\r\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\r\n      {children}\r\n    </ToastsContext.Provider>\r\n  )\r\n}\r\n","const tokens = {\r\n  bnb: {\r\n    symbol: 'BNB',\r\n    projectLink: 'https://www.binance.com/',\r\n  },\r\n  cake: {\r\n    symbol: 'CAKE',\r\n    address: {\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n      97: '0xa35062141Fa33BCA92Ce69FeD37D0E8908868AAe',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://pancakeswap.finance/',\r\n  },\r\n  wbnb: {\r\n    symbol: 'BNB',\r\n    address: {\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n      97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://pancakeswap.finance/',\r\n  },\r\n  busd: {\r\n    symbol: 'BUSD',\r\n    address: {\r\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.paxos.com/busd/',\r\n  },\r\n  eth: {\r\n    symbol: 'ETH',\r\n    address: {\r\n      56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://ethereum.org/en/',\r\n  },\r\n  usdc: {\r\n    symbol: 'USDC',\r\n    address: {\r\n      56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.centre.io/usdc',\r\n  },\r\n  dai: {\r\n    symbol: 'DAI',\r\n    address: {\r\n      56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'http://www.makerdao.com/',\r\n  },\r\n  dot: {\r\n    symbol: 'DOT',\r\n    address: {\r\n      56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://polkadot.network/',\r\n  },\r\n  usdt: {\r\n    symbol: 'USDT',\r\n    address: {\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n      56: '0x55d398326f99059ff775485246999027b3197955',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://tether.to/',\r\n  },\r\n  btcb: {\r\n    symbol: 'BTCB',\r\n    address: {\r\n      56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://bitcoin.org/',\r\n  },\r\n  cub: {\r\n    symbol: 'CUB',\r\n    address: {\r\n      56: '0x50d809c74e0b8e49e7b4c65bb3109abe3ff4c1c1',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://cubdefi.com/',\r\n  },\r\n  bleo: {\r\n    symbol: 'bLEO',\r\n    address: {\r\n      56: '0x6421531af54c7b14ea805719035ebf1e3661c44a',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://cubdefi.com/',\r\n  },\r\n  dec: {\r\n    symbol: 'DEC',\r\n    address: {\r\n      56: '0xe9d7023f2132d55cbd4ee1f78273cb7a3e74f10a',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://cubdefi.com/',\r\n  },\r\n  bake: {\r\n    symbol: 'BAKE',\r\n    address: {\r\n      56: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n      97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://www.bakeryswap.org/',\r\n  },\r\n  belt: {\r\n    symbol: 'BELT',\r\n    address: {\r\n      56: '0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://beta.belt.fi/',\r\n  },\r\n  beltbtc: {\r\n    symbol: 'beltBTC',\r\n    address: {\r\n      56: '0x51bd63f240fb13870550423d208452ca87c44444',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://belt.fi/bsc',\r\n  },\r\n  belteth: {\r\n    symbol: 'beltETH',\r\n    address: {\r\n      56: '0xaa20e8cb61299df2357561c2ac2e1172bc68bc25',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://belt.fi/bsc',\r\n  },\r\n  beltusd: {\r\n    symbol: 'beltUSD',\r\n    address: {\r\n      56: '0x9cb73f20164e399958261c289eb5f9846f4d1404',\r\n      97: '',\r\n    },\r\n    decimals: 18,\r\n    projectLink: 'https://belt.fi/bsc',\r\n  },\r\n}\r\n\r\nexport default tokens\r\n","import BigNumber from 'bignumber.js'\r\nimport { BIG_TEN } from './bigNumber'\r\n\r\n/**\r\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\r\n */\r\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\r\n}\r\n\r\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\r\n}\r\n\r\n/**\r\n * This function is not really necessary but is used throughout the site.\r\n */\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  return getBalanceAmount(balance, decimals).toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, decimalsToAppear?: number) => {\r\n  return balance.dividedBy(BIG_TEN.pow(decimals)).toFixed(decimalsToAppear)\r\n}\r\n\r\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\r\n  const options = {\r\n    minimumFractionDigits: minPrecision,\r\n    maximumFractionDigits: maxPrecision,\r\n  }\r\n  return number.toLocaleString(undefined, options)\r\n}\r\n","import { PageMeta } from './types'\r\n\r\nexport const DEFAULT_META: PageMeta = {\r\n  title: 'Cub Finance',\r\n  description:\r\n    'The most popular AMM on BSC by user count! Earn CAKE through yield farming or win it in the Lottery, then stake it in Syrup Pools to earn more tokens! Initial Farm Offerings (new token launch model pioneered by Cub Finance), NFTs, and more, on a platform you can trust.',\r\n  image: 'https://cubdefi.com/images/2logos',\r\n}\r\n\r\nexport const customMeta: { [key: string]: PageMeta } = {\r\n  '/': {\r\n    title: 'Home | Cub Finance',\r\n  },\r\n  '/competition': {\r\n    title: 'Trading Battle | Cub Finance',\r\n  },\r\n  '/prediction': {\r\n    title: 'Prediction | Cub Finance',\r\n  },\r\n  '/farms': {\r\n    title: 'Farms | Cub Finance',\r\n  },\r\n  '/pools': {\r\n    title: 'Pools | Cub Finance',\r\n  },\r\n  '/lottery': {\r\n    title: 'Lottery | Cub Finance',\r\n  },\r\n  '/collectibles': {\r\n    title: 'Collectibles | Cub Finance',\r\n  },\r\n  '/ifo': {\r\n    title: 'Initial Farm Offering | Cub Finance',\r\n  },\r\n  '/teams': {\r\n    title: 'Leaderboard | Cub Finance',\r\n  },\r\n  '/profile/tasks': {\r\n    title: 'Task Center | Cub Finance',\r\n  },\r\n  '/profile': {\r\n    title: 'Your Profile | Cub Finance',\r\n  },\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useLocation } from 'react-router'\r\nimport { customMeta, DEFAULT_META } from 'config/constants/meta'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport Container from './Container'\r\n\r\nconst StyledPage = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 16px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nconst PageMeta = () => {\r\n  const { pathname } = useLocation()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n  const cakePriceUsdDisplay = cakePriceUsd.eq(0)\r\n    ? ''\r\n    : `$${cakePriceUsd.toNumber().toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })}`\r\n  const pageMeta = customMeta[pathname] || {}\r\n  const { title, description, image } = { ...DEFAULT_META, ...pageMeta }\r\n  const pageTitle = cakePriceUsdDisplay ? [title, cakePriceUsdDisplay].join(' - ') : title\r\n\r\n  return (\r\n    <Helmet>\r\n      <title>{pageTitle}</title>\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={description} />\r\n      <meta property=\"og:image\" content={image} />\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\r\n  return (\r\n    <>\r\n      <PageMeta />\r\n      <StyledPage {...props}>{children}</StyledPage>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Page\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","export { default as farmsConfig } from './farms'\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","const ARCHIVED_FARMS_START_PID = 139\r\nconst ARCHIVED_FARMS_END_PID = 250\r\n\r\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID\r\n\r\nexport default isArchivedPid\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport const BIG_ZERO = new BigNumber(0)\r\nexport const BIG_TEN = new BigNumber(10)\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 1200px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (example: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3NoAccount()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import { TranslatableText } from 'state/types'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface Token {\r\n  symbol: string\r\n  address?: Address\r\n  decimals?: number\r\n  projectLink?: string\r\n  busdPrice?: string\r\n}\r\n\r\nexport enum PoolIds {\r\n  poolBasic = 'poolBasic',\r\n  poolUnlimited = 'poolUnlimited',\r\n}\r\n\r\nexport type IfoStatus = 'idle' | 'coming_soon' | 'live' | 'finished'\r\n\r\ninterface IfoPoolInfo {\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  distributionRatio: number // Range [0-1]\r\n}\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  currency: Token\r\n  token: Token\r\n  releaseBlockNumber: number\r\n  articleUrl: string\r\n  campaignId: string\r\n  tokenOfferingPrice: number\r\n  isV1: boolean\r\n  [PoolIds.poolBasic]?: IfoPoolInfo\r\n  [PoolIds.poolUnlimited]: IfoPoolInfo\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n  'AUTO' = 'Auto',\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  token: Token\r\n  quoteToken: Token\r\n  multiplier?: string\r\n  isCommunity?: boolean\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n  isKingdom?: boolean\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n  compounding?: number\r\n  kingdomContract?: string\r\n  altPid?: number\r\n  farmType?: string\r\n  // lpTotalInQuoteTokenPCS?: BigNumber\r\n  tokenAmountTotal?: BigNumber\r\n  tokenValuePerOrigin?: BigNumber\r\n  tokenPerBlock?: number\r\n  totalSupplyBelt?: BigNumber\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  earningToken: Token\r\n  stakingToken: Token\r\n  stakingLimit?: number\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n}\r\n\r\nexport type Images = {\r\n  lg: string\r\n  md: string\r\n  sm: string\r\n  ipfs?: string\r\n}\r\n\r\nexport type NftImages = {\r\n  blur?: string\r\n} & Images\r\n\r\nexport type NftVideo = {\r\n  webm: string\r\n  mp4: string\r\n}\r\n\r\nexport type NftSource = {\r\n  [key in NftType]: {\r\n    address: Address\r\n    identifierKey: string\r\n  }\r\n}\r\n\r\nexport enum NftType {\r\n  PANCAKE = 'pancake',\r\n  MIXIE = 'mixie',\r\n}\r\n\r\nexport type Nft = {\r\n  description: string\r\n  name: string\r\n  images: NftImages\r\n  sortOrder: number\r\n  type: NftType\r\n  video?: NftVideo\r\n\r\n  // Uniquely identifies the nft.\r\n  // Used for matching an NFT from the config with the data from the NFT's tokenURI\r\n  identifier: string\r\n\r\n  // Used to be \"bunnyId\". Used when minting NFT\r\n  variationId?: number | string\r\n}\r\n\r\nexport type TeamImages = {\r\n  alt: string\r\n} & Images\r\n\r\nexport type Team = {\r\n  id: number\r\n  name: string\r\n  description: string\r\n  isJoinable?: boolean\r\n  users: number\r\n  points: number\r\n  images: TeamImages\r\n  background: string\r\n  textColor: string\r\n}\r\n\r\nexport type CampaignType = 'ifo' | 'teambattle'\r\n\r\nexport type Campaign = {\r\n  id: string\r\n  type: CampaignType\r\n  title?: TranslatableText\r\n  description?: TranslatableText\r\n  badge?: string\r\n}\r\n\r\nexport type PageMeta = {\r\n  title: string\r\n  description?: string\r\n  image?: string\r\n}\r\n","// import tokens from './tokens'\r\n// import { PoolConfig, PoolCategory } from './types'\r\nimport { PoolConfig } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  /* {\r\n    sousId: 0,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.cake,\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '10',\r\n    sortOrder: 1,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 116,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.dfd,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xAF3EfE5fCEeBc603Eada6A2b0172be11f7405102',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.46296',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 115,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.alpaca,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xf73fdeb26a8c7a4abf3809d3db11a06ba5c13d0e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.22743',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 114,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.τbtc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xaac7171afc93f4b75e1268d208040b152ac65e32',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00000608',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 113,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.τbtc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2c6017269b4324d016ca5d8e3267368652c18905',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00000608',\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 112,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.swingby,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x675434c68f2672c983e36cf10ed13a4014720b79',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.21527',\r\n  },\r\n  {\r\n    sousId: 111,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.xed,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x05d6c2d1d687eacfb5e6440d5a3511e91f2201a8',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3472',\r\n  },\r\n  {\r\n    sousId: 110,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.hakka,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xd623a32da4a632ce01766c317d07cb2cad56949b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.4722',\r\n  },\r\n  {\r\n    sousId: 109,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.cgg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xdf75f38dbc98f9f26377414e567abcb8d57cca33',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.10918',\r\n  },\r\n  {\r\n    sousId: 108,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.mix,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xce64a930884b2c68cd93fc1c7c7cdc221d427692',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3721',\r\n  },\r\n  {\r\n    sousId: 107,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.suter,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xc1E70edd0141c454b834Deac7ddDeA413424aEf9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '15.3356',\r\n  },\r\n  {\r\n    sousId: 106,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.broobee,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x189d8228CdfDc404Bd9e5bD65ff958cb5fd8855c',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '14.4675',\r\n  },\r\n  {\r\n    sousId: 105,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.hzn,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0196c582216e2463f052E2B07Ef8667Bec9Fb17a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.6944',\r\n  },\r\n  {\r\n    sousId: 104,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.alpa,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x8f84106286c9c8A42bc3555C835E6e2090684ab7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.23495',\r\n  },\r\n  {\r\n    sousId: 103,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.perl,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xa8d32b31ECB5142f067548Bf0424389eE98FaF26',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.1574',\r\n  },\r\n  {\r\n    sousId: 102,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.tlm,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xC59aa49aE508050c2dF653E77bE13822fFf02E9A',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '17.361',\r\n  },\r\n  {\r\n    sousId: 101,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.jgn,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x14AeA62384789EDA98f444cCb970F6730877d3F9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.08796',\r\n  },\r\n  {\r\n    sousId: 100,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.eps,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xebb87dF24D65977cbe62538E4B3cFBD5d0308642',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.07716',\r\n  },\r\n  {\r\n    sousId: 99,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.arpa,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x40918EF8efFF4aA061656013a81E0e5A8A702eA7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.949',\r\n  },\r\n  {\r\n    sousId: 98,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.itam,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x44eC1B26035865D9A7C130fD872670CD7Ebac2bC',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.096',\r\n  },\r\n  {\r\n    sousId: 97,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bondly,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1329ad151dE6C441184E32E108401126AE850937',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.4629',\r\n  },\r\n  {\r\n    sousId: 96,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.tko,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9bbDc92474a7e7321B78dcDA5EF35f4981438760',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.1574',\r\n  },\r\n  {\r\n    sousId: 95,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.apys,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x46530d79b238f809e80313e73715b160c66677aF',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.09953',\r\n  },\r\n  {\r\n    sousId: 94,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.hoo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x47fD853D5baD391899172892F91FAa6d0cd8A2Aa',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.489',\r\n  },\r\n  {\r\n    sousId: 93,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.oddz,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xe25aB6F05BBF6C1be953BF2d7df15B3e01b8e5a5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.11284',\r\n  },\r\n  {\r\n    sousId: 92,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.easy,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xEB8Fd597921E3Dd37B0F103a2625F855e2C9b9B5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0072338',\r\n  },\r\n  {\r\n    sousId: 91,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.nrv,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xABFd8d1942628124aB971937154f826Bce86DcbC',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.15046',\r\n  },\r\n  {\r\n    sousId: 90,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.dego,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x526d3c204255f807C95a99b69596f2f9f72345e5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00405',\r\n  },\r\n  {\r\n    sousId: 89,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.gum,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xAa2082BeE04fc518300ec673F9497ffa6F669dB8',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.08912',\r\n  },\r\n  {\r\n    sousId: 88,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.pbtc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9096625Bc0d36F5EDa6d44e511641667d89C28f4',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0000031',\r\n  },\r\n  {\r\n    sousId: 87,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.dft,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x78BD4dB48F8983c3C36C8EAFbEF38f6aC7B55285',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.6811',\r\n  },\r\n  {\r\n    sousId: 86,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.swth,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x35418e14F5aA615C4f020eFBa6e01C5DbF15AdD2',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '2.3148',\r\n  },\r\n  {\r\n    sousId: 85,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.lien,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3c7cC49a35942fbD3C2ad428a6c22490cd709d03',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.003472',\r\n  },\r\n  {\r\n    sousId: 84,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.zil,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xF795739737ABcFE0273f4Dced076460fdD024Dd9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.0995',\r\n  },\r\n  {\r\n    sousId: 83,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.pcws,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x06FF8960F7F4aE572A3f57FAe77B2882BE94Bf90',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00434',\r\n  },\r\n  {\r\n    sousId: 82,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bbadger,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xe4dD0C50fb314A8B2e84D211546F5B57eDd7c2b9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00265278',\r\n  },\r\n  {\r\n    sousId: 81,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bdigg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb627A7e33Db571bE792B0b69c5C2f5a8160d5500',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00000403',\r\n  },\r\n  {\r\n    sousId: 80,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.lto,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xadBfFA25594AF8Bc421ecaDF54D057236a99781e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.2893',\r\n  },\r\n  {\r\n    sousId: 79,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.mir,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3e31488f08EBcE6F2D8a2AA512aeFa49a3C7dFa7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01273',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 78,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.mir,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x453a75908fb5a36d482d5f8fe88eca836f32ead5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01273',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 77,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.trade,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x509C99D73FB54b2c20689708b3F824147292D38e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.4484',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 76,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.dusk,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xF1bd5673Ea4a1C415ec84fa3E402F2F7788E7717',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.4629',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 75,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bifi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xB4C68A1C565298834360BbFF1652284275120D47',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00007234',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 74,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.txl,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x153e62257F1AAe05d5d253a670Ca7585c8D3F94F',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.434027',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 73,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.cos,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xF682D186168b4114ffDbF1291F19429310727151',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '5.787',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 72,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bunny,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xaDdAE5f4dB84847ac9d947AED1304A8e7D19f7cA',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00289',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 71,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.alice,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4C32048628D0d32d4D6c52662FB4A92747782B56',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.14467',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 70,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.for,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x47642101e8D8578C42765d7AbcFd0bA31868c523',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '2.8935',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 69,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bux,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x07F8217c68ed9b838b0b8B58C19c79bACE746e9A',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.5787',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 68,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.nuls,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x580DC9bB9260A922E3A4355b9119dB990F09410d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0868',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 67,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.belt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6f0037d158eD1AeE395e1c12d21aE8583842F472',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00868',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 66,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.ramp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x423382f989C6C289c8D441000e1045e231bd7d90',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.4861',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 65,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bfi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0A595623b58dFDe6eB468b613C11A7A8E84F09b9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0001157',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 64,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.dexe,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9E6dA246d369a41DC44673ce658966cAf487f7b2',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.009837',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 63,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bel,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2C0f449387b15793B9da27c2d945dBed83ab1B07',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0549',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 62,\r\n    stakingToken: tokens.tpt,\r\n    earningToken: tokens.cake,\r\n    stakingLimit: 25000,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0c3D6892aa3b23811Af3bd1bbeA8b0740E8e4528',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0462',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 61,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.tpt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x75C91844c5383A68b7d3A427A44C32E3ba66Fe45',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '3.616',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 60,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.watch,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xC58954199E268505fa3D3Cb0A00b7207af8C2D1d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.3472',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 59,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.xmark,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xA5137e08C48167E363Be8Ec42A68f4F54330964E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0413',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 58,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bmxx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6F31B87f51654424Ce57E9F8243E27ed13846CDB',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00248',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 57,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.iotx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xCE54BA909d23B9d4BE0Ff0d84e5aE83F0ADD8D9a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '6.365',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 56,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bor,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3e677dC00668d69c2A7724b9AFA7363e8A56994e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.000395',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 55,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bopen,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x5Ac8406498dC1921735d559CeC271bEd23B294A7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0723',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 54,\r\n    stakingToken: tokens.sushi,\r\n    earningToken: tokens.cake,\r\n    stakingLimit: 50,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb69b6e390cba1F68442A886bC89E955048DAe7E3',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0367',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 53,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.dodo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xae3001ddb18A6A57BEC2C19D71680437CA87bA1D',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0578',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 52,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.swingby,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x02aa767e855b8e80506fb47176202aA58A95315a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.13',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 51,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bry,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1c736F4FB20C7742Ee83a4099fE92abA61dFca41',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.1157',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 50,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.zee,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x02861B607a5E87daf3FD6ec19DFB715F1b371379',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.1736',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 49,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.swgb,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x73e4E8d010289267dEe3d1Fc48974B60363963CE',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.899',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 48,\r\n    stakingToken: tokens.comp,\r\n    earningToken: tokens.cake,\r\n    stakingLimit: 1,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xE0565fBb109A3f3f8097D8A9D931277bfd795072',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.055',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 47,\r\n    stakingToken: tokens.comp,\r\n    earningToken: tokens.cake,\r\n    stakingLimit: 1,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xc3693e3cbc3514d5d07EA5b27A721F184F617900',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.55',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 46,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.sfp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2B02d43967765b18E31a9621da640588f3550EFD',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.6',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 45,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.lina,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x212bb602418C399c29D52C55100fD6bBa12bea05',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.983',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 44,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.lina,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x04aE8ca68A116278026fB721c06dCe709eD7013C',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0983',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 43,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.lit,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1714bAAE9DD4738CDEA07756427FA8d4F08D9479',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.231',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 42,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.hget,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xcCD0b93cC6ce3dC6dFaA9DB68f70e5C8455aC5bd',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0138',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 41,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bdo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9cB24e9460351bC51d4066BC6AEd1F3809b02B78',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.075',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 40,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.egld,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2dcf4cDFf4Dd954683Fe0a6123077f8a025b66cF',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.001215',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 39,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.ust,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6EFa207ACdE6e1caB77c1322CbdE9628929ba88F',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.1157',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 38,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.wsote,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xD0b738eC507571176D40f28bd56a0120E375f73a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.23',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 37,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.front,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xf7a31366732F08E8e6B88519dC3E827e04616Fc9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.2546',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 36,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.helmet,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9F23658D5f4CEd69282395089B0f8E4dB85C6e79',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.81',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 35,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.btcst,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xB6fd2724cc9c90DD31DA35DbDf0300009dceF97d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.011574',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 34,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bscx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x108BFE84Ca8BCe0741998cb0F60d313823cEC143',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.17361',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 33,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.ten,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4A26b082B432B060B1b00A84eE4E823F04a6f69a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.05787',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 32,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.balbt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3cc08B7C6A31739CfEd9d8d38b484FDb245C79c8',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.4166',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 31,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.asr,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xd18E1AEb349ef0a6727eCe54597D98D263e05CAB',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 30,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.atm,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x68C7d180bD8F7086D91E65A422c59514e4aFD638',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 29,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.og,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xbE65d7e42E05aD2c4ad28769dc9c5b4b6EAff2C7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 28,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.reef,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1500fa1afbfe4f4277ed0345cdf12b2c9ca7e139',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '115.74',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 27,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.ditto,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x624ef5C2C6080Af188AF96ee5B3160Bb28bb3E02',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01157',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 26,\r\n    stakingToken: tokens.twt,\r\n    earningToken: tokens.cake,\r\n    stakingLimit: 1000,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0554a5D083Abf2f056ae3F6029e1714B9A655174',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.248',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 24,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.juv,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x543467B17cA5De50c8BF7285107A36785Ab57E56',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.02',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 25,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.psg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x65aFEAFaec49F23159e897EFBDCe19D94A86A1B6',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.02',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 21,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.vai,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1AD34D8d4D79ddE88c9B6b8490F8fC67831f2CAe',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.104',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 20,\r\n    stakingToken: tokens.bnb,\r\n    earningToken: tokens.cake,\r\n    stakingLimit: 10,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x555Ea72d7347E82C614C16f005fA91cAf06DCB5a',\r\n    },\r\n    poolCategory: PoolCategory.BINANCE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.5',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 19,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.bnb,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x326D754c64329aD7cb35744770D56D0E1f3B3124',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0041',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 18,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.blink,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x42Afc29b2dEa792974d1e9420696870f1Ca6d18b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '23.14',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 17,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.blink,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '23.14',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 16,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.unfi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xFb1088Dae0f03C5123587d2babb3F307831E6367',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.02893',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 15,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.twt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9c4EBADa591FFeC4124A7785CAbCfb7068fED2fb',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '5',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 14,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.hard,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x90F995b9d46b32c4a1908A8c6D0122e392B3Be97',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.346',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 13,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.broobee,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xdc8c45b7F3747Ca9CaAEB3fa5e0b5FCE9430646b',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    harvest: true,\r\n    tokenPerBlock: '12.5',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 12,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.stax,\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0xFF02241a2A1d2a7088A344309400E9fE74772815',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    harvest: true,\r\n    tokenPerBlock: '0.2',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 11,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.nar,\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0xDc938BA1967b06d666dA79A7B1E31a8697D1565E',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    harvest: true,\r\n    tokenPerBlock: '1',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 10,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.nya,\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0x07a0A5B67136d40F4d7d95Bc8e0583bafD7A81b9',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '10',\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 9,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.ctk,\r\n    contractAddress: {\r\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n      56: '0x21A9A53936E812Da06B7623802DEc9A1f94ED23a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.5',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 8,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.twt,\r\n    contractAddress: {\r\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n      56: '0xe7f9A439Aa7292719aC817798DDd1c4D35934aAF',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '20',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 7,\r\n    stakingToken: tokens.cake,\r\n    earningToken: tokens.inj,\r\n    contractAddress: {\r\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n      56: '0xcec2671C81a0Ecf7F8Ee796EFa6DBDc5Cb062693',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.25',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  }, */\r\n]\r\n\r\nexport default pools\r\n","import BigNumber from 'bignumber.js'\r\nimport { CampaignType, FarmConfig, Nft, PoolConfig, Team } from 'config/constants/types'\r\n\r\nexport type TranslatableText =\r\n  | string\r\n  | {\r\n      id: number\r\n      fallback: string\r\n      data?: {\r\n        [key: string]: string | number\r\n      }\r\n    }\r\n//\r\n// export interface Kingdom extends KingdomConfig {\r\n//   tokenAmount?: BigNumber\r\n//   quoteTokenAmount?: BigNumber\r\n//   lpTotalInQuoteToken?: BigNumber\r\n//   lpTotalSupply?: BigNumber\r\n//   tokenPriceVsQuote?: BigNumber\r\n//   poolWeight?: BigNumber\r\n//   userData?: {\r\n//     allowance: string\r\n//     tokenBalance: string\r\n//     stakedBalance: string\r\n//     earnings: string\r\n//   }\r\n// }\r\n\r\nexport interface Farm extends FarmConfig {\r\n  tokenAmount?: BigNumber\r\n  quoteTokenAmount?: BigNumber\r\n  lpTotalInQuoteToken?: BigNumber\r\n  lpTotalSupply?: BigNumber\r\n  tokenPriceVsQuote?: BigNumber\r\n  poolWeight?: BigNumber\r\n  userData?: {\r\n    allowance: string\r\n    tokenBalance: string\r\n    stakedBalance: string\r\n    earnings: string\r\n    bnbDividends?: any\r\n  }\r\n}\r\n\r\nexport interface Pool extends PoolConfig {\r\n  totalStaked?: BigNumber\r\n  startBlock?: number\r\n  endBlock?: number\r\n  userData?: {\r\n    allowance: BigNumber\r\n    stakingTokenBalance: BigNumber\r\n    stakedBalance: BigNumber\r\n    pendingReward: BigNumber\r\n  }\r\n}\r\n\r\nexport interface Profile {\r\n  userId: number\r\n  points: number\r\n  teamId: number\r\n  nftAddress: string\r\n  tokenId: number\r\n  isActive: boolean\r\n  username: string\r\n  nft?: Nft\r\n  team: Team\r\n  hasRegistered: boolean\r\n}\r\n\r\n// Slices states\r\n\r\nexport interface FarmsState {\r\n  data: Farm[]\r\n  loadArchivedFarmsData: boolean\r\n  userDataLoaded: boolean\r\n}\r\n\r\nexport interface PoolsState {\r\n  data: Pool[]\r\n}\r\n\r\nexport interface ProfileState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  hasRegistered: boolean\r\n  data: Profile\r\n}\r\n\r\nexport type TeamResponse = {\r\n  0: string\r\n  1: string\r\n  2: string\r\n  3: string\r\n  4: boolean\r\n}\r\n\r\nexport type TeamsById = {\r\n  [key: string]: Team\r\n}\r\n\r\nexport interface TeamsState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  data: TeamsById\r\n}\r\n\r\nexport interface Achievement {\r\n  id: string\r\n  type: CampaignType\r\n  address: string\r\n  title: TranslatableText\r\n  description?: TranslatableText\r\n  badge: string\r\n  points: number\r\n}\r\n\r\nexport interface AchievementState {\r\n  data: Achievement[]\r\n}\r\n\r\n// API Price State\r\nexport interface PriceApiList {\r\n  /* eslint-disable camelcase */\r\n  [key: string]: {\r\n    name: string\r\n    symbol: string\r\n    price: string\r\n    price_BNB: string\r\n  }\r\n}\r\n\r\nexport interface PriceApiListThunk {\r\n  /* eslint-disable camelcase */\r\n  [key: string]: number\r\n}\r\n\r\nexport interface PriceApiResponse {\r\n  /* eslint-disable camelcase */\r\n  updated_at: string\r\n  data: PriceApiList\r\n}\r\n\r\nexport interface PriceApiThunk {\r\n  /* eslint-disable camelcase */\r\n  updated_at: string\r\n  data: PriceApiListThunk\r\n}\r\n\r\nexport interface PriceState {\r\n  isLoading: boolean\r\n  lastUpdated: string\r\n  data: PriceApiListThunk\r\n}\r\n\r\n// Block\r\n\r\nexport interface BlockState {\r\n  currentBlock: number\r\n  initialBlock: number\r\n}\r\n\r\n// Collectibles\r\n\r\nexport interface CollectiblesState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  data: {\r\n    [key: string]: number[]\r\n  }\r\n}\r\n\r\n// Predictions\r\n\r\nexport enum BetPosition {\r\n  BULL = 'Bull',\r\n  BEAR = 'Bear',\r\n  HOUSE = 'House',\r\n}\r\n\r\nexport enum PredictionStatus {\r\n  INITIAL = 'initial',\r\n  LIVE = 'live',\r\n  PAUSED = 'paused',\r\n  ERROR = 'error',\r\n}\r\n\r\nexport interface Round {\r\n  id: string\r\n  epoch: number\r\n  failed?: boolean\r\n  startBlock: number\r\n  startAt: number\r\n  lockAt: number\r\n  lockBlock: number\r\n  lockPrice: number\r\n  endBlock: number\r\n  closePrice: number\r\n  totalBets: number\r\n  totalAmount: number\r\n  bullBets: number\r\n  bearBets: number\r\n  bearAmount: number\r\n  bullAmount: number\r\n  position: BetPosition\r\n  bets?: Bet[]\r\n}\r\n\r\nexport interface Market {\r\n  id: string\r\n  paused: boolean\r\n  epoch: number\r\n}\r\n\r\nexport interface Bet {\r\n  id: string\r\n  hash: string\r\n  amount: number\r\n  position: BetPosition\r\n  claimed: boolean\r\n  user: PredictionUser\r\n  round: Round\r\n}\r\n\r\nexport interface PredictionUser {\r\n  id: string\r\n  address: string\r\n  block: number\r\n  totalBets: number\r\n  totalBNB: number\r\n}\r\n\r\nexport interface RoundData {\r\n  [key: string]: Round\r\n}\r\n\r\nexport interface HistoryData {\r\n  [key: string]: Bet[]\r\n}\r\n\r\nexport interface BetData {\r\n  [key: string]: {\r\n    [key: string]: Partial<Bet>\r\n  }\r\n}\r\n\r\nexport enum HistoryFilter {\r\n  ALL = 'all',\r\n  COLLECTED = 'collected',\r\n  UNCOLLECTED = 'uncollected',\r\n}\r\n\r\nexport interface PredictionsState {\r\n  status: PredictionStatus\r\n  isLoading: boolean\r\n  isHistoryPaneOpen: boolean\r\n  isChartPaneOpen: boolean\r\n  isFetchingHistory: boolean\r\n  historyFilter: HistoryFilter\r\n  currentEpoch: number\r\n  currentRoundStartBlockNumber: number\r\n  intervalBlocks: number\r\n  bufferBlocks: number\r\n  minBetAmount: string\r\n  rounds: RoundData\r\n  history: HistoryData\r\n  bets: BetData\r\n}\r\n\r\n// Global state\r\n\r\nexport interface State {\r\n  achievements: AchievementState\r\n  block: BlockState\r\n  farms: FarmsState\r\n  prices: PriceState\r\n  pools: PoolsState\r\n  predictions: PredictionsState\r\n  profile: ProfileState\r\n  teams: TeamsState\r\n  collectibles: CollectiblesState\r\n}\r\n","import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_PREDICTIONS } from 'config/constants/endpoints'\r\nimport { Bet, BetPosition, Market, PredictionStatus, Round, RoundData } from 'state/types'\r\nimport makeBatchRequest from 'utils/makeBatchRequest'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\nimport {\r\n  BetResponse,\r\n  getRoundBaseFields,\r\n  getBetBaseFields,\r\n  getUserBaseFields,\r\n  RoundResponse,\r\n  MarketResponse,\r\n} from './queries'\r\n\r\nexport const numberOrNull = (value: string) => {\r\n  if (value === null) {\r\n    return null\r\n  }\r\n\r\n  const valueNum = Number(value)\r\n  return Number.isNaN(valueNum) ? null : valueNum\r\n}\r\n\r\nexport const makeFutureRoundResponse = (epoch: number, startBlock: number): RoundResponse => {\r\n  return {\r\n    id: epoch.toString(),\r\n    epoch: epoch.toString(),\r\n    startBlock: startBlock.toString(),\r\n    failed: null,\r\n    startAt: null,\r\n    lockAt: null,\r\n    lockBlock: null,\r\n    lockPrice: null,\r\n    endBlock: null,\r\n    closePrice: null,\r\n    totalBets: '0',\r\n    totalAmount: '0',\r\n    bearBets: '0',\r\n    bullBets: '0',\r\n    bearAmount: '0',\r\n    bullAmount: '0',\r\n    position: null,\r\n    bets: [],\r\n  }\r\n}\r\n\r\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\r\n  const bet = {\r\n    id: betResponse.id,\r\n    hash: betResponse.hash,\r\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\r\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\r\n    claimed: betResponse.claimed,\r\n    user: {\r\n      id: betResponse.user.id,\r\n      address: betResponse.user.address,\r\n      block: numberOrNull(betResponse.user.block),\r\n      totalBets: numberOrNull(betResponse.user.totalBets),\r\n      totalBNB: numberOrNull(betResponse.user.totalBNB),\r\n    },\r\n  } as Bet\r\n\r\n  if (betResponse.round) {\r\n    bet.round = transformRoundResponse(betResponse.round)\r\n  }\r\n\r\n  return bet\r\n}\r\n\r\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\r\n  const {\r\n    id,\r\n    epoch,\r\n    failed,\r\n    startBlock,\r\n    startAt,\r\n    lockAt,\r\n    lockBlock,\r\n    lockPrice,\r\n    endBlock,\r\n    closePrice,\r\n    totalBets,\r\n    totalAmount,\r\n    bullBets,\r\n    bearBets,\r\n    bearAmount,\r\n    bullAmount,\r\n    position,\r\n    bets = [],\r\n  } = roundResponse\r\n\r\n  const getRoundPosition = (positionResponse: string) => {\r\n    if (positionResponse === 'Bull') {\r\n      return BetPosition.BULL\r\n    }\r\n\r\n    if (positionResponse === 'Bear') {\r\n      return BetPosition.BEAR\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return {\r\n    id,\r\n    failed,\r\n    epoch: numberOrNull(epoch),\r\n    startBlock: numberOrNull(startBlock),\r\n    startAt: numberOrNull(startAt),\r\n    lockAt: numberOrNull(lockAt),\r\n    lockBlock: numberOrNull(lockBlock),\r\n    lockPrice: lockPrice ? parseFloat(lockPrice) : null,\r\n    endBlock: numberOrNull(endBlock),\r\n    closePrice: closePrice ? parseFloat(closePrice) : null,\r\n    totalBets: numberOrNull(totalBets),\r\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\r\n    bullBets: numberOrNull(bullBets),\r\n    bearBets: numberOrNull(bearBets),\r\n    bearAmount: numberOrNull(bearAmount),\r\n    bullAmount: numberOrNull(bullAmount),\r\n    position: getRoundPosition(position),\r\n    bets: bets.map(transformBetResponse),\r\n  }\r\n}\r\n\r\nexport const transformMarketResponse = (marketResponse: MarketResponse): Market => {\r\n  return {\r\n    id: marketResponse.id,\r\n    paused: marketResponse.paused,\r\n    epoch: Number(marketResponse.epoch.epoch),\r\n  }\r\n}\r\n\r\nexport const makeRoundData = (rounds: Round[]): RoundData => {\r\n  return rounds.reduce((accum, round) => {\r\n    return {\r\n      ...accum,\r\n      [round.id]: round,\r\n    }\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Gets static data from the contract\r\n */\r\nexport const getStaticPredictionsData = async () => {\r\n  const { methods } = getPredictionsContract()\r\n  const [currentEpoch, intervalBlocks, minBetAmount, isPaused, bufferBlocks] = await makeBatchRequest([\r\n    methods.currentEpoch().call,\r\n    methods.intervalBlocks().call,\r\n    methods.minBetAmount().call,\r\n    methods.paused().call,\r\n    methods.bufferBlocks().call,\r\n  ])\r\n\r\n  return {\r\n    status: isPaused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\r\n    currentEpoch: Number(currentEpoch),\r\n    intervalBlocks: Number(intervalBlocks),\r\n    bufferBlocks: Number(bufferBlocks),\r\n    minBetAmount,\r\n  }\r\n}\r\n\r\nexport const getMarketData = async (): Promise<{\r\n  rounds: Round[]\r\n  market: Market\r\n}> => {\r\n  const response = (await request(\r\n    GRAPH_API_PREDICTIONS,\r\n    gql`\r\n      query getMarketData {\r\n        rounds(first: 5, orderBy: epoch, orderDirection: desc) {\r\n          ${getRoundBaseFields()}\r\n        }\r\n        market(id: 1) {\r\n          id\r\n          paused\r\n          epoch {\r\n            epoch\r\n          }\r\n        }\r\n      }\r\n    `,\r\n  )) as { rounds: RoundResponse[]; market: MarketResponse }\r\n\r\n  return {\r\n    rounds: response.rounds.map(transformRoundResponse),\r\n    market: transformMarketResponse(response.market),\r\n  }\r\n}\r\n\r\nexport const getRound = async (id: string) => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTIONS,\r\n    gql`\r\n      query getRound($id: ID!) {\r\n        round(id: $id) {\r\n          ${getRoundBaseFields()}\r\n          bets {\r\n           ${getBetBaseFields()}\r\n            user {\r\n             ${getUserBaseFields()}\r\n            }\r\n          }\r\n        }\r\n      }\r\n  `,\r\n    { id },\r\n  )\r\n  return response.round\r\n}\r\n\r\ntype BetHistoryWhereClause = Record<string, string | number | boolean>\r\n\r\nexport const getBetHistory = async (\r\n  where: BetHistoryWhereClause = {},\r\n  first = 1000,\r\n  skip = 0,\r\n): Promise<BetResponse[]> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTIONS,\r\n    gql`\r\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\r\n        bets(first: $first, skip: $skip, where: $where) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where },\r\n  )\r\n  return response.bets\r\n}\r\n\r\nexport const getBet = async (betId: string): Promise<BetResponse> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTIONS,\r\n    gql`\r\n      query getBet($id: ID!) {\r\n        bet(id: $id) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n  `,\r\n    {\r\n      id: betId.toLowerCase(),\r\n    },\r\n  )\r\n  return response.bet\r\n}\r\n","export interface UserResponse {\r\n  id: string\r\n  address: string\r\n  block: string\r\n  totalBets: string\r\n  totalBNB: string\r\n  bets?: BetResponse[]\r\n}\r\n\r\nexport interface BetResponse {\r\n  id: string\r\n  hash: string\r\n  amount: string\r\n  position: string\r\n  claimed: boolean\r\n  user?: UserResponse\r\n  round?: RoundResponse\r\n}\r\n\r\nexport interface HistoricalBetResponse {\r\n  id: string\r\n  hash: string\r\n  amount: string\r\n  position: string\r\n  claimed: boolean\r\n  user?: UserResponse\r\n  round: {\r\n    id: string\r\n    epoch: string\r\n  }\r\n}\r\n\r\nexport interface RoundResponse {\r\n  id: string\r\n  epoch: string\r\n  failed: boolean\r\n  startBlock: string\r\n  startAt: string\r\n  lockAt: string\r\n  lockBlock: string\r\n  lockPrice: string\r\n  endBlock: string\r\n  closePrice: string\r\n  totalBets: string\r\n  totalAmount: string\r\n  bearBets: string\r\n  bullBets: string\r\n  bearAmount: string\r\n  bullAmount: string\r\n  position: string\r\n  bets: BetResponse[]\r\n}\r\n\r\nexport interface MarketResponse {\r\n  id: string\r\n  paused: boolean\r\n  epoch: {\r\n    epoch: string\r\n  }\r\n}\r\n\r\n/**\r\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\r\n */\r\nexport const getRoundBaseFields = () => `\r\n  id\r\n  epoch\r\n  failed\r\n  startAt\r\n  startBlock\r\n  lockAt\r\n  lockBlock\r\n  lockPrice\r\n  endAt\r\n  endBlock\r\n  closePrice\r\n  totalBets\r\n  totalAmount\r\n  bullBets\r\n  bullAmount\r\n  bearBets\r\n  bearAmount\r\n  position\r\n`\r\n\r\nexport const getBetBaseFields = () => `\r\n  id\r\n  hash  \r\n  amount\r\n  position\r\n  claimed\r\n`\r\n\r\nexport const getUserBaseFields = () => `\r\n  id\r\n  address\r\n  block\r\n  totalBets\r\n  totalBNB\r\n`\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { maxBy } from 'lodash'\r\nimport { Bet, HistoryFilter, Market, PredictionsState, PredictionStatus, Round } from 'state/types'\r\nimport {\r\n  makeFutureRoundResponse,\r\n  transformRoundResponse,\r\n  getBetHistory,\r\n  transformBetResponse,\r\n  getBet,\r\n  makeRoundData,\r\n} from './helpers'\r\n\r\nconst initialState: PredictionsState = {\r\n  status: PredictionStatus.INITIAL,\r\n  isLoading: false,\r\n  isHistoryPaneOpen: false,\r\n  isChartPaneOpen: false,\r\n  isFetchingHistory: false,\r\n  historyFilter: HistoryFilter.ALL,\r\n  currentEpoch: 0,\r\n  currentRoundStartBlockNumber: 0,\r\n  intervalBlocks: 100,\r\n  bufferBlocks: 2,\r\n  minBetAmount: '1000000000000000',\r\n  rounds: {},\r\n  history: {},\r\n  bets: {},\r\n}\r\n\r\n// Thunks\r\nexport const fetchBet = createAsyncThunk<{ account: string; bet: Bet }, { account: string; id: string }>(\r\n  'predictions/fetchBet',\r\n  async ({ account, id }) => {\r\n    const response = await getBet(id)\r\n    const bet = transformBetResponse(response)\r\n    return { account, bet }\r\n  },\r\n)\r\n\r\nexport const fetchRoundBet = createAsyncThunk<\r\n  { account: string; roundId: string; bet: Bet },\r\n  { account: string; roundId: string }\r\n>('predictions/fetchRoundBet', async ({ account, roundId }) => {\r\n  const betResponses = await getBetHistory({\r\n    user: account.toLowerCase(),\r\n    round: roundId,\r\n  })\r\n\r\n  // This should always return 0 or 1 bet because a user can only place\r\n  // one bet per round\r\n  if (betResponses && betResponses.length === 1) {\r\n    const [betResponse] = betResponses\r\n    return { account, roundId, bet: transformBetResponse(betResponse) }\r\n  }\r\n\r\n  return { account, roundId, bet: null }\r\n})\r\n\r\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\r\n  'predictions/fetchHistory',\r\n  async ({ account, claimed }) => {\r\n    const response = await getBetHistory({\r\n      user: account.toLowerCase(),\r\n      claimed,\r\n    })\r\n    const bets = response.map(transformBetResponse)\r\n\r\n    return { account, bets }\r\n  },\r\n)\r\n\r\nexport const predictionsSlice = createSlice({\r\n  name: 'predictions',\r\n  initialState,\r\n  reducers: {\r\n    setPredictionStatus: (state, action: PayloadAction<PredictionStatus>) => {\r\n      state.status = action.payload\r\n    },\r\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\r\n      state.isHistoryPaneOpen = action.payload\r\n      state.historyFilter = HistoryFilter.ALL\r\n    },\r\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\r\n      state.isChartPaneOpen = action.payload\r\n    },\r\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\r\n      state.historyFilter = action.payload\r\n    },\r\n    initialize: (state, action: PayloadAction<PredictionsState>) => {\r\n      return action.payload\r\n    },\r\n    updateMarketData: (state, action: PayloadAction<{ rounds: Round[]; market: Market }>) => {\r\n      const { rounds, market } = action.payload\r\n      const newRoundData = makeRoundData(rounds)\r\n      const incomingCurrentRound = maxBy(rounds, 'epoch')\r\n\r\n      if (state.currentEpoch !== incomingCurrentRound.epoch) {\r\n        // Add new round\r\n        const newestRound = maxBy(rounds, 'epoch') as Round\r\n        const futureRound = transformRoundResponse(\r\n          makeFutureRoundResponse(newestRound.epoch + 2, newestRound.startBlock + state.intervalBlocks),\r\n        )\r\n\r\n        newRoundData[futureRound.id] = futureRound\r\n      }\r\n\r\n      state.currentEpoch = incomingCurrentRound.epoch\r\n      state.currentRoundStartBlockNumber = incomingCurrentRound.startBlock\r\n      state.status = market.paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE\r\n      state.rounds = { ...state.rounds, ...newRoundData }\r\n    },\r\n    setCurrentEpoch: (state, action: PayloadAction<number>) => {\r\n      state.currentEpoch = action.payload\r\n    },\r\n    markBetAsCollected: (state, action: PayloadAction<{ account: string; betId: string }>) => {\r\n      const { account, betId } = action.payload\r\n      const history = state.history[account]\r\n\r\n      if (history) {\r\n        const betIndex = history.findIndex((bet) => bet.id === betId)\r\n\r\n        if (betIndex >= 0) {\r\n          history[betIndex].claimed = true\r\n        }\r\n      }\r\n    },\r\n    markPositionAsEntered: (\r\n      state,\r\n      action: PayloadAction<{ account: string; roundId: string; partialBet: Partial<Bet> }>,\r\n    ) => {\r\n      const { account, roundId, partialBet } = action.payload\r\n\r\n      state.bets = {\r\n        ...state.bets,\r\n        [account]: {\r\n          ...state.bets[account],\r\n          [roundId]: partialBet,\r\n        },\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Get round bet\r\n    builder.addCase(fetchRoundBet.fulfilled, (state, action) => {\r\n      const { account, roundId, bet } = action.payload\r\n\r\n      if (bet) {\r\n        state.bets = {\r\n          ...state.bets,\r\n          [account]: {\r\n            ...state.bets[account],\r\n            [roundId]: bet,\r\n          },\r\n        }\r\n      }\r\n    })\r\n\r\n    // Update Bet\r\n    builder.addCase(fetchBet.fulfilled, (state, action) => {\r\n      const { account, bet } = action.payload\r\n      state.history[account] = [...state.history[account].filter((currentBet) => currentBet.id !== bet.id), bet]\r\n    })\r\n\r\n    // Show History\r\n    builder.addCase(fetchHistory.pending, (state) => {\r\n      state.isFetchingHistory = true\r\n    })\r\n    builder.addCase(fetchHistory.rejected, (state) => {\r\n      state.isFetchingHistory = false\r\n      state.isHistoryPaneOpen = true\r\n    })\r\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\r\n      const { account, bets } = action.payload\r\n\r\n      state.isFetchingHistory = false\r\n      state.isHistoryPaneOpen = true\r\n      state.history[account] = bets\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const {\r\n  initialize,\r\n  setChartPaneState,\r\n  setCurrentEpoch,\r\n  setHistoryFilter,\r\n  setHistoryPaneState,\r\n  updateMarketData,\r\n  markBetAsCollected,\r\n  setPredictionStatus,\r\n  markPositionAsEntered,\r\n} = predictionsSlice.actions\r\n\r\nexport default predictionsSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { useDispatch } from 'react-redux'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\nimport pricesReducer from './prices'\r\nimport predictionsReducer from './predictions'\r\nimport profileReducer from './profile'\r\nimport teamsReducer from './teams'\r\nimport achievementsReducer from './achievements'\r\nimport blockReducer from './block'\r\nimport collectiblesReducer from './collectibles'\r\n\r\nconst store = configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    achievements: achievementsReducer,\r\n    block: blockReducer,\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n    prices: pricesReducer,\r\n    predictions: predictionsReducer,\r\n    profile: profileReducer,\r\n    teams: teamsReducer,\r\n    collectibles: collectiblesReducer,\r\n  },\r\n})\r\n\r\n/**\r\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\r\n */\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport default store\r\n","import Web3 from 'web3'\r\nimport { AbiItem } from 'web3-utils'\r\nimport web3NoAccount from 'utils/web3'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\n\r\n// Addresses\r\nimport {\r\n  getAddress,\r\n  getPancakeProfileAddress,\r\n  getPancakeRabbitsAddress,\r\n  getBunnyFactoryAddress,\r\n  getBunnySpecialAddress,\r\n  getCakeAddress,\r\n  getLotteryAddress,\r\n  getLotteryTicketAddress,\r\n  getMasterChefAddress,\r\n  getKingdomsAddress,\r\n  getBnbDividendsAddress,\r\n  // getPCSv2MasterChefAddress,\r\n  getPointCenterIfoAddress,\r\n  getClaimRefundAddress,\r\n  getTradingCompetitionAddress,\r\n  getEasterNftAddress,\r\n  getCakeVaultAddress,\r\n  getPredictionsAddress,\r\n} from 'utils/addressHelpers'\r\n\r\n// ABI\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport pancakeRabbitsAbi from 'config/abi/pancakeRabbits.json'\r\nimport bunnyFactoryAbi from 'config/abi/bunnyFactory.json'\r\nimport bunnySpecialAbi from 'config/abi/bunnySpecial.json'\r\nimport bep20Abi from 'config/abi/erc20.json'\r\nimport erc721Abi from 'config/abi/erc721.json'\r\nimport lpTokenAbi from 'config/abi/lpToken.json'\r\nimport cakeAbi from 'config/abi/cake.json'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport kingdomsAbi from 'config/abi/kingdoms.json'\r\nimport bnbDividendsAbi from 'config/abi/bnbDividends.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\nimport claimRefundAbi from 'config/abi/claimRefund.json'\r\nimport tradingCompetitionAbi from 'config/abi/tradingCompetition.json'\r\nimport easterNftAbi from 'config/abi/easterNft.json'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport predictionsAbi from 'config/abi/predictions.json'\r\nimport pcsV2MasterchefAbi from 'config/abi/PCS-v2-masterchef.json'\r\n\r\nconst getContract = (abi: any, address: string, web3?: Web3) => {\r\n  const _web3 = web3 ?? web3NoAccount\r\n  return new _web3.eth.Contract((abi as unknown) as AbiItem, address)\r\n}\r\n\r\nexport const getBep20Contract = (address: string, web3?: Web3) => {\r\n  return getContract(bep20Abi, address, web3)\r\n}\r\nexport const getErc721Contract = (address: string, web3?: Web3) => {\r\n  return getContract(erc721Abi, address, web3)\r\n}\r\nexport const getLpContract = (address: string, web3?: Web3) => {\r\n  return getContract(lpTokenAbi, address, web3)\r\n}\r\nexport const getIfoV1Contract = (address: string, web3?: Web3) => {\r\n  return getContract(ifoV1Abi, address, web3)\r\n}\r\nexport const getIfoV2Contract = (address: string, web3?: Web3) => {\r\n  return getContract(ifoV2Abi, address, web3)\r\n}\r\nexport const getSouschefContract = (id: number, web3?: Web3) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  return getContract(abi, getAddress(config.contractAddress), web3)\r\n}\r\nexport const getPointCenterIfoContract = (web3?: Web3) => {\r\n  return getContract(pointCenterIfo, getPointCenterIfoAddress(), web3)\r\n}\r\nexport const getCakeContract = (web3?: Web3) => {\r\n  return getContract(cakeAbi, getCakeAddress(), web3)\r\n}\r\nexport const getProfileContract = (web3?: Web3) => {\r\n  return getContract(profileABI, getPancakeProfileAddress(), web3)\r\n}\r\nexport const getPancakeRabbitContract = (web3?: Web3) => {\r\n  return getContract(pancakeRabbitsAbi, getPancakeRabbitsAddress(), web3)\r\n}\r\nexport const getBunnyFactoryContract = (web3?: Web3) => {\r\n  return getContract(bunnyFactoryAbi, getBunnyFactoryAddress(), web3)\r\n}\r\nexport const getBunnySpecialContract = (web3?: Web3) => {\r\n  return getContract(bunnySpecialAbi, getBunnySpecialAddress(), web3)\r\n}\r\nexport const getLotteryContract = (web3?: Web3) => {\r\n  return getContract(lotteryAbi, getLotteryAddress(), web3)\r\n}\r\nexport const getLotteryTicketContract = (web3?: Web3) => {\r\n  return getContract(lotteryTicketAbi, getLotteryTicketAddress(), web3)\r\n}\r\nexport const getMasterchefContract = (web3?: Web3) => {\r\n  return getContract(masterChef, getMasterChefAddress(), web3)\r\n}\r\nexport const getKingdomsContract = (web3?: Web3) => {\r\n  return getContract(kingdomsAbi, getKingdomsAddress(), web3)\r\n}\r\nexport const getBnbDvividendsContract = (web3?: Web3) => {\r\n  return getContract(bnbDividendsAbi, getBnbDividendsAddress(), web3)\r\n}\r\n// export const getPCSv2MasterChefContract = (web3?: Web3) => {\r\n//   return getContract(pcsV2MasterchefAbi, getPCSv2MasterChefAddress(), web3)\r\n// }\r\nexport const getClaimRefundContract = (web3?: Web3) => {\r\n  return getContract(claimRefundAbi, getClaimRefundAddress(), web3)\r\n}\r\nexport const getTradingCompetitionContract = (web3?: Web3) => {\r\n  return getContract(tradingCompetitionAbi, getTradingCompetitionAddress(), web3)\r\n}\r\nexport const getEasterNftContract = (web3?: Web3) => {\r\n  return getContract(easterNftAbi, getEasterNftAddress(), web3)\r\n}\r\nexport const getCakeVaultContract = (web3?: Web3) => {\r\n  return getContract(cakeVaultAbi, getCakeVaultAddress(), web3)\r\n}\r\nexport const getPredictionsContract = (web3?: Web3) => {\r\n  return getContract(predictionsAbi, getPredictionsAddress(), web3)\r\n}\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\nconst web3NoAccount = new Web3(httpProvider)\r\n\r\nconst getWeb3NoAccount = () => {\r\n  return web3NoAccount\r\n}\r\n\r\nexport { getWeb3NoAccount }\r\nexport default web3NoAccount\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport teamsList from 'config/constants/teams'\r\nimport { Team } from 'config/constants/types'\r\nimport { TeamsById, TeamsState } from '../types'\r\nimport { getTeam, getTeams } from './helpers'\r\n\r\nconst teamsById: TeamsById = teamsList.reduce((accum, team) => {\r\n  return {\r\n    ...accum,\r\n    [team.id]: team,\r\n  }\r\n}, {})\r\n\r\nconst initialState: TeamsState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  data: teamsById,\r\n}\r\n\r\nexport const teamsSlice = createSlice({\r\n  name: 'teams',\r\n  initialState,\r\n  reducers: {\r\n    fetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    fetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    teamFetchSucceeded: (state, action: PayloadAction<Team>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data[action.payload.id] = action.payload\r\n    },\r\n    teamsFetchSucceeded: (state, action: PayloadAction<TeamsById>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } = teamsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchTeam = (teamId: number) => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const team = await getTeam(teamId)\r\n    dispatch(teamFetchSucceeded(team))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport const fetchTeams = () => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const teams = await getTeams()\r\n    dispatch(teamsFetchSucceeded(teams))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport default teamsSlice.reducer\r\n","import { Profile } from 'state/types'\r\n\r\nexport type ProfileResponse = {\r\n  0: string\r\n  1: string\r\n  2: string\r\n  3: string\r\n  4: string\r\n  5: boolean\r\n}\r\n\r\nexport const transformProfileResponse = (profileResponse: ProfileResponse): Partial<Profile> => {\r\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: nftAddress, 4: tokenId, 5: isActive } = profileResponse\r\n\r\n  return {\r\n    userId: Number(userId),\r\n    points: Number(numberPoints),\r\n    teamId: Number(teamId),\r\n    tokenId: Number(tokenId),\r\n    nftAddress,\r\n    isActive,\r\n  }\r\n}\r\n","import Cookies from 'js-cookie'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport { getNftByTokenId } from 'utils/collectibles'\r\nimport { Profile } from 'state/types'\r\nimport { getTeam } from 'state/teams/helpers'\r\nimport { transformProfileResponse } from './helpers'\r\n\r\nconst profileContract = getProfileContract()\r\nconst profileApi = process.env.REACT_APP_API_PROFILE\r\n\r\nexport interface GetProfileResponse {\r\n  hasRegistered: boolean\r\n  profile?: Profile\r\n}\r\n\r\nconst getUsername = async (address: string): Promise<string> => {\r\n  try {\r\n    const response = await fetch(`${profileApi}/api/users/${address}`)\r\n\r\n    if (!response.ok) {\r\n      return ''\r\n    }\r\n\r\n    const { username = '' } = await response.json()\r\n\r\n    return username\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\r\n  try {\r\n    const hasRegistered = (await profileContract.methods.hasRegistered(address).call()) as boolean\r\n\r\n    if (!hasRegistered) {\r\n      return { hasRegistered, profile: null }\r\n    }\r\n\r\n    const profileResponse = await profileContract.methods.getUserProfile(address).call()\r\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\r\n    const team = await getTeam(teamId)\r\n    const username = await getUsername(address)\r\n\r\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\r\n    // so only fetch the nft data if active\r\n    let nft: Nft\r\n    if (isActive) {\r\n      nft = await getNftByTokenId(nftAddress, tokenId)\r\n\r\n      // Save the preview image in a cookie so it can be used on the exchange\r\n      Cookies.set(\r\n        `profile_${address}`,\r\n        {\r\n          username,\r\n          avatar: `https://pancakeswap.finance/images/nfts/${nft?.images.sm}`,\r\n        },\r\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\r\n      )\r\n    }\r\n\r\n    const profile = {\r\n      userId,\r\n      points,\r\n      teamId,\r\n      tokenId,\r\n      username,\r\n      nftAddress,\r\n      isActive,\r\n      nft,\r\n      team,\r\n    } as Profile\r\n\r\n    return { hasRegistered, profile }\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default getProfile\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ProfileState } from 'state/types'\r\nimport type { AppDispatch } from 'state'\r\nimport getProfile, { GetProfileResponse } from './getProfile'\r\n\r\nconst initialState: ProfileState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  hasRegistered: false,\r\n  data: null,\r\n}\r\n\r\nexport const profileSlice = createSlice({\r\n  name: 'profile',\r\n  initialState,\r\n  reducers: {\r\n    profileFetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    profileFetchSucceeded: (_state, action: PayloadAction<GetProfileResponse>) => {\r\n      const { profile, hasRegistered } = action.payload\r\n\r\n      return {\r\n        isInitialized: true,\r\n        isLoading: false,\r\n        hasRegistered,\r\n        data: profile,\r\n      }\r\n    },\r\n    profileFetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    profileClear: () => ({\r\n      ...initialState,\r\n      isLoading: false,\r\n    }),\r\n    addPoints: (state, action: PayloadAction<number>) => {\r\n      state.data.points += action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const {\r\n  profileFetchStart,\r\n  profileFetchSucceeded,\r\n  profileFetchFailed,\r\n  profileClear,\r\n  addPoints,\r\n} = profileSlice.actions\r\n\r\n// Thunks\r\n// TODO: this should be an AsyncThunk\r\nexport const fetchProfile = (address: string) => async (dispatch: AppDispatch) => {\r\n  try {\r\n    dispatch(profileFetchStart())\r\n    const response = await getProfile(address)\r\n    dispatch(profileFetchSucceeded(response))\r\n  } catch (error) {\r\n    dispatch(profileFetchFailed())\r\n  }\r\n}\r\n\r\nexport default profileSlice.reducer\r\n","import { Nft, NftSource, NftType } from './types'\r\n\r\nexport const IPFS_GATEWAY = 'https://gateway.pinata.cloud'\r\n\r\nexport const nftSources: NftSource = {\r\n  [NftType.PANCAKE]: {\r\n    address: {\r\n      56: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\r\n      97: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\r\n    },\r\n    identifierKey: 'image',\r\n  },\r\n  [NftType.MIXIE]: {\r\n    address: {\r\n      56: '0xa251b5EAa9E67F2Bc8b33F33e20E91552Bf85566',\r\n      97: '',\r\n    },\r\n    identifierKey: 'image',\r\n  },\r\n}\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Mixie v1',\r\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\r\n    images: {\r\n      lg: 'mixie-1-lg.png',\r\n      md: 'mixie-1-md.png',\r\n      sm: 'mixie-1-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/001-Chef-Mixie.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: '001-Chef-Mixie',\r\n    type: NftType.MIXIE,\r\n    variationId: 1,\r\n  },\r\n  {\r\n    name: 'Mixie v2',\r\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\r\n    images: {\r\n      lg: 'mixie-2-lg.png',\r\n      md: 'mixie-2-md.png',\r\n      sm: 'mixie-2-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/002-Chef-Mixie.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: '002-Chef-Mixie',\r\n    type: NftType.MIXIE,\r\n    variationId: 2,\r\n  },\r\n  {\r\n    name: 'Mixie v3',\r\n    description: 'Stories were told, and songs were sung, about Chef Mixie’s pancakes and her big Syrup gun.',\r\n    images: {\r\n      lg: 'mixie-3-lg.png',\r\n      md: 'mixie-3-md.png',\r\n      sm: 'mixie-3-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQiRpr7ZMkzV7qbqVaUZ1LiuHTTdpWmapUhaY6ZGmVLQ4/003-Chef-Mixie.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: '003-Chef-Mixie',\r\n    type: NftType.MIXIE,\r\n    variationId: 3,\r\n  },\r\n  {\r\n    name: 'Easter ‘21 Champions',\r\n    description: 'Eggscellent! Celebrating Syrup Storm winning the Easter Battle!',\r\n    images: {\r\n      lg: 'easter-champion-storm-lg.png',\r\n      md: 'easter-champion-storm-md.png',\r\n      sm: 'easter-champion-storm-sm.png',\r\n      ipfs:\r\n        'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.png',\r\n    },\r\n    video: {\r\n      webm:\r\n        'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.webm',\r\n      mp4: 'https://gateway.pinata.cloud/ipfs/QmWFQdggxnAkgFNBWixT6v7nrgEnYfYDxG5A9u42aHhU6U/easter-champion-storm.mp4',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'easter-champion-storm',\r\n    type: NftType.PANCAKE,\r\n    variationId: 15,\r\n  },\r\n  {\r\n    name: \"Cakeston Easter '21\",\r\n    description: 'Melting Easter eggs and melting hearts!',\r\n    images: {\r\n      lg: 'cakeston-easter-21-lg.png',\r\n      md: 'cakeston-easter-21-md.png',\r\n      sm: 'cakeston-easter-21-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-caker.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'easter-caker',\r\n    type: NftType.PANCAKE,\r\n    variationId: 15,\r\n  },\r\n  {\r\n    name: \"Flipsie Easter '21\",\r\n    description: 'Watch out for Flipsie’s spatula smash!',\r\n    images: {\r\n      lg: 'flipsie-easter-21-lg.png',\r\n      md: 'flipsie-easter-21-md.png',\r\n      sm: 'flipsie-easter-21-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-flipper.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'easter-flipper',\r\n    type: NftType.PANCAKE,\r\n    variationId: 14,\r\n  },\r\n  {\r\n    name: \"Stormy Easter '21\",\r\n    description: 'Do you like chocolate with your syrup? Go long!',\r\n    images: {\r\n      lg: 'stormy-easter-21-lg.png',\r\n      md: 'stormy-easter-21-md.png',\r\n      sm: 'stormy-easter-21-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-storm.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'easter-storm',\r\n    type: NftType.PANCAKE,\r\n    variationId: 12,\r\n  },\r\n  {\r\n    name: 'Bullish',\r\n    description: 'Happy Niu Year! This bunny’s excited for the year of the bull (market!)',\r\n    images: {\r\n      lg: 'bullish-lg.png',\r\n      md: 'bullish-md.png',\r\n      sm: 'bullish-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.png',\r\n    },\r\n    video: {\r\n      webm: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.webm',\r\n      mp4: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.mp4',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'bullish',\r\n    type: NftType.PANCAKE,\r\n    variationId: 11,\r\n  },\r\n  {\r\n    name: 'Hiccup',\r\n    description: \"Oopsie daisy! Hiccup's had a bit of an accident. Poor little fella.\",\r\n    images: {\r\n      lg: 'hiccup-lg.png',\r\n      md: 'hiccup-md.png',\r\n      sm: 'hiccup-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQ6EE6gkVzAQUdQLLM7CyrnME6LZHCoy92ZERW8HXmyjw/hiccup.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'hiccup',\r\n    type: NftType.PANCAKE,\r\n    variationId: 10,\r\n  },\r\n  {\r\n    name: 'Sleepy',\r\n    description: 'Aww, looks like eating pancakes all day is tough work. Sweet dreams!',\r\n    images: {\r\n      lg: 'sleepy-lg.png',\r\n      md: 'sleepy-md.png',\r\n      sm: 'sleepy-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/sleepy.png',\r\n      blur: 'sleepy-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'sleepy',\r\n    type: NftType.PANCAKE,\r\n    variationId: 5,\r\n  },\r\n  {\r\n    name: 'Sunny',\r\n    description: 'Sunny is always cheerful when there are pancakes around. Smile!',\r\n    images: {\r\n      lg: 'sunny-lg.png',\r\n      md: 'sunny-md.png',\r\n      sm: 'sunny-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/sunny.png',\r\n      blur: 'sunny-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'sunny',\r\n    type: NftType.PANCAKE,\r\n    variationId: 9,\r\n  },\r\n  {\r\n    name: 'Churro',\r\n    description: \"Don't let that dopey smile deceive you... Churro's a master CAKE chef!\",\r\n    images: {\r\n      lg: 'churro-lg.png',\r\n      md: 'churro-md.png',\r\n      sm: 'churro-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/churro.png',\r\n      blur: 'churro-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'churro',\r\n    type: NftType.PANCAKE,\r\n    variationId: 8,\r\n  },\r\n  {\r\n    name: 'Dollop',\r\n    description: \"Nommm... Oh hi, I'm just meditating on the meaning of CAKE.\",\r\n    images: {\r\n      lg: 'dollop-lg.png',\r\n      md: 'dollop-md.png',\r\n      sm: 'dollop-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/dollop.png',\r\n      blur: 'dollop-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'dollop',\r\n    type: NftType.PANCAKE,\r\n    variationId: 6,\r\n  },\r\n  {\r\n    name: 'Twinkle',\r\n    description: \"Three guesses what's put that twinkle in those eyes! (Hint: it's CAKE)\",\r\n    images: {\r\n      lg: 'twinkle-lg.png',\r\n      md: 'twinkle-md.png',\r\n      sm: 'twinkle-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/twinkle.png',\r\n      blur: 'twinkle-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'twinkle',\r\n    type: NftType.PANCAKE,\r\n    variationId: 7,\r\n  },\r\n  {\r\n    name: 'Swapsies',\r\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\r\n    images: {\r\n      lg: 'swapsies-lg.png',\r\n      md: 'swapsies-md.png',\r\n      sm: 'swapsies-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\r\n      blur: 'swapsies-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'swapsies',\r\n    type: NftType.PANCAKE,\r\n    variationId: 0,\r\n  },\r\n  {\r\n    name: 'Drizzle',\r\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\r\n    images: {\r\n      lg: 'drizzle-lg.png',\r\n      md: 'drizzle-md.png',\r\n      sm: 'drizzle-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\r\n      blur: 'drizzle-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'drizzle',\r\n    type: NftType.PANCAKE,\r\n    variationId: 1,\r\n  },\r\n  {\r\n    name: 'Blueberries',\r\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\r\n    images: {\r\n      lg: 'blueberries-lg.png',\r\n      md: 'blueberries-md.png',\r\n      sm: 'blueberries-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\r\n      blur: 'blueberries-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'blueberries',\r\n    type: NftType.PANCAKE,\r\n    variationId: 2,\r\n  },\r\n  {\r\n    name: 'Circular',\r\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\r\n    images: {\r\n      lg: 'circular-lg.png',\r\n      md: 'circular-md.png',\r\n      sm: 'circular-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\r\n      blur: 'circular-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'circular',\r\n    type: NftType.PANCAKE,\r\n    variationId: 3,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    images: {\r\n      lg: 'sparkle-lg.png',\r\n      md: 'sparkle-md.png',\r\n      sm: 'sparkle-sm.png',\r\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\r\n      blur: 'sparkle-blur.png',\r\n    },\r\n    sortOrder: 999,\r\n    identifier: 'sparkle',\r\n    type: NftType.PANCAKE,\r\n    variationId: 4,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { orderBy } from 'lodash'\r\nimport { Team } from 'config/constants/types'\r\nimport Nfts from 'config/constants/nfts'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, setBlock } from './actions'\r\nimport { State, Farm, Pool, ProfileState, TeamsState, AchievementState, PriceState, FarmsState } from './types'\r\nimport { fetchProfile } from './profile'\r\nimport { fetchTeam, fetchTeams } from './teams'\r\nimport { fetchAchievements } from './achievements'\r\nimport { fetchPrices } from './prices'\r\nimport { fetchWalletNfts } from './collectibles'\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3NoAccount()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      dispatch(setBlock(blockNumber))\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [dispatch])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): FarmsState => {\r\n  const farms = useSelector((state: State) => state.farms)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useKingdomFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid && f.isKingdom))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\r\n  }\r\n}\r\n\r\nexport const useLpTokenPrice = (symbol: string) => {\r\n  /* const farm = useFarmFromSymbol(symbol)\r\n  // const tokenPriceInUsd = useGetApiPrice(getAddress(farm.token.address))\r\n  const tokenPriceInUsd = farm.token.busdPrice\r\n  // console.log('farm.lpTotalSupplyy',farm.lpTotalSupply)\r\n  // console.log('farm.lpTotalInQuoteToken',farm.lpTotalInQuoteToken)\r\n  let lpTotal = farm.lpTotalInQuoteToken\r\n  if (farm.farmType === 'Bakery') lpTotal = farm.lpTotalInQuoteTokenPCS\r\n\r\n  return farm.lpTotalSupply && lpTotal\r\n    ? new BigNumber(getBalanceNumber(farm.lpTotalSupply)).div(lpTotal).times(tokenPriceInUsd).times(2)\r\n    : BIG_ZERO\r\n    */\r\n  const farm = useFarmFromSymbol(symbol)\r\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\r\n  let lpTokenPrice = BIG_ZERO\r\n\r\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\r\n    // Total value of base token in LP\r\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\r\n    // Double it to get overall value in LP\r\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\r\n    // Divide total value of all tokens, by the number of LP tokens\r\n    const totalLpTokens = getBalanceAmount(farm.lpTotalSupply)\r\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\r\n  }\r\n\r\n  return lpTokenPrice\r\n}\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\nexport const useFarmFromTokenSymbol = (tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\r\n  const farms = useSelector((state: State) => state.farms.data.filter((farm) => farm.token.symbol === tokenSymbol))\r\n  const filteredFarm = filterFarmsByQuoteToken(farms, preferredQuoteTokens)\r\n  return filteredFarm\r\n}\r\n\r\n// Return the base token price for a farm, from a given pid\r\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\r\n  const farm = useFarmFromPid(pid)\r\n  return farm && new BigNumber(farm.token.busdPrice)\r\n}\r\n\r\nexport const useBusdPriceFromLpSymbol = (symbol: string): BigNumber => {\r\n  const farm = useFarmFromSymbol(symbol)\r\n  return farm && new BigNumber(farm.token.busdPrice)\r\n}\r\n\r\nexport const useBusdPriceFromToken = (tokenSymbol: string): BigNumber => {\r\n  const tokenFarm = useFarmFromTokenSymbol(tokenSymbol)\r\n  const tokenPrice = useBusdPriceFromPid(tokenFarm?.pid)\r\n  return tokenPrice\r\n}\r\n\r\n// Profile\r\n\r\nexport const useFetchProfile = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProfile(account))\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState = useSelector((state: State) => state.profile)\r\n  return { profile: data, hasProfile: isInitialized && hasRegistered, isInitialized, isLoading }\r\n}\r\n\r\n// Teams\r\n\r\nexport const useTeam = (id: number) => {\r\n  const team: Team = useSelector((state: State) => state.teams.data[id])\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTeam(id))\r\n  }, [id, dispatch])\r\n\r\n  return team\r\n}\r\n\r\nexport const useTeams = () => {\r\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTeams())\r\n  }, [dispatch])\r\n\r\n  return { teams: data, isInitialized, isLoading }\r\n}\r\n\r\n// Achievements\r\n\r\nexport const useFetchAchievements = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchAchievements(account))\r\n    }\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport const useAchievements = () => {\r\n  const achievements: AchievementState['data'] = useSelector((state: State) => state.achievements.data)\r\n  return achievements\r\n}\r\n\r\n// Prices\r\nexport const useFetchPriceList = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPrices())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\nexport const useGetApiPrices = () => {\r\n  const prices: PriceState['data'] = useSelector((state: State) => state.prices.data)\r\n  return prices\r\n}\r\n\r\nexport const useGetApiPrice = (address: string) => {\r\n  const prices = useGetApiPrices()\r\n\r\n  if (!prices) {\r\n    return null\r\n  }\r\n\r\n  return prices[address.toLowerCase()]\r\n}\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const bnbBusdFarm = useFarmFromPid(2)\r\n  return bnbBusdFarm.tokenPriceVsQuote ? new BigNumber(1).div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const cakeBnbFarm = useFarmFromPid(10)\r\n  // const bnbBusdPrice = usePriceBnbBusd()\r\n  //\r\n  // const cakeBusdPrice = cakeBnbFarm.tokenPriceVsQuote ? bnbBusdPrice.times(cakeBnbFarm.tokenPriceVsQuote) : BIG_ZERO\r\n\r\n  const cakeBusdPrice = cakeBnbFarm.tokenPriceVsQuote ? new BigNumber(cakeBnbFarm.tokenPriceVsQuote) : BIG_ZERO\r\n\r\n  return cakeBusdPrice\r\n}\r\n\r\n// Block\r\nexport const useBlock = () => {\r\n  return useSelector((state: State) => state.block)\r\n}\r\n\r\nexport const useInitialBlock = () => {\r\n  return useSelector((state: State) => state.block.initialBlock)\r\n}\r\n\r\n// Predictions\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetRounds = () => {\r\n  return useSelector((state: State) => state.predictions.rounds)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.intervalBlocks)\r\n}\r\n\r\nexport const useGetBufferBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.bufferBlocks)\r\n}\r\n\r\nexport const useGetTotalIntervalBlocks = () => {\r\n  const intervalBlocks = useGetIntervalBlocks()\r\n  const bufferBlocks = useGetBufferBlocks()\r\n  return intervalBlocks + bufferBlocks\r\n}\r\n\r\nexport const useGetRound = (id: string) => {\r\n  const rounds = useGetRounds()\r\n  return rounds[id]\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  return rounds.find((round) => round.epoch === currentEpoch)\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetCurrentRoundBlockNumber = () => {\r\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => new BigNumber(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetHistoryByAccount = (account: string) => {\r\n  const bets = useGetHistory()\r\n  return bets ? bets[account] : []\r\n}\r\n\r\nexport const useGetBetByRoundId = (account: string, roundId: string) => {\r\n  const bets = useSelector((state: State) => state.predictions.bets)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][roundId]) {\r\n    return null\r\n  }\r\n\r\n  return bets[account][roundId]\r\n}\r\n\r\n// Collectibles\r\nexport const useGetCollectibles = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\r\n  const identifiers = Object.keys(data)\r\n\r\n  useEffect(() => {\r\n    // Fetch nfts only if we have not done so already\r\n    if (!isInitialized) {\r\n      dispatch(fetchWalletNfts(account))\r\n    }\r\n  }, [isInitialized, account, dispatch])\r\n\r\n  return {\r\n    isInitialized,\r\n    isLoading,\r\n    tokenIds: data,\r\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\r\n  }\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const prices = useGetApiPrices()\r\n  let value = new BigNumber(0);\r\n\r\n  if (prices)\r\n    value = farms.data.reduce((accu, farm) => {\r\n      const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n      let newAccu = accu\r\n      if (!totalLiquidity.isNaN() && !totalLiquidity.isZero())\r\n        newAccu = accu.plus(totalLiquidity)\r\n      return newAccu\r\n    }, value)\r\n\r\n  return value;\r\n}\r\n\r\nexport const useTotalValueKingdoms = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const prices = useGetApiPrices()\r\n  let value = new BigNumber(0);\r\n\r\n  const kingdoms = farms.data.filter(farm => farm.isKingdom)\r\n\r\n  if (prices)\r\n    value = kingdoms.reduce((accu, farm) => {\r\n      const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n      let newAccu = accu\r\n      if (!totalLiquidity.isNaN() && !totalLiquidity.isZero())\r\n        newAccu = accu.plus(totalLiquidity)\r\n      return newAccu\r\n    }, value)\r\n\r\n  return value;\r\n}\r\n","import BigNumber from 'bignumber.js/bignumber'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\n// CAKE_PER_BLOCK details\r\n// 40 CAKE is minted per block\r\n// 18 CAKE per block is sent to Burn pool (A farm just for burning cake)\r\n// 10 CAKE per block goes to CAKE syrup pool\r\n// 12 CAKE per block goes to Yield farms and lottery\r\n// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.\r\n// CAKE/Block in components/CakeStats.tsx = 22 (40 - Amount sent to burn pool)\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const PCSCAKE_PER_BLOCK = new BigNumber(40)\r\nexport const PCSBLOCKS_PER_YEAR = new BigNumber((60 / BSC_BLOCK_TIME) * 60 * 24 * 365) // 10512000\r\nexport const PCSCAKE_PER_YEAR = PCSCAKE_PER_BLOCK.times(PCSBLOCKS_PER_YEAR)\r\nexport const BAKE_PER_BLOCK = new BigNumber(22)\r\nexport const BAKE_PER_YEAR = BAKE_PER_BLOCK.times(BLOCKS_PER_YEAR)\r\nexport const BELT_PER_BLOCK = new BigNumber(1.178)\r\nexport const BELT_PER_YEAR = BELT_PER_BLOCK.times(BLOCKS_PER_YEAR)\r\n\r\n// export const PCS_BLOCKS_PER_YEAR = new BigNumber((60 / BSC_BLOCK_TIME) * 60 * 24 * 365) // 10512000\r\nexport const BASE_URL = 'https://cubdefi.com'\r\nexport const BASE_EXCHANGE_URL = 'https://exchange.cubdefi.com'\r\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_EXCHANGE_URL}/#/add`\r\nexport const BASE_LIQUIDITY_POOL_URL = `${BASE_EXCHANGE_URL}/#/pool`\r\nexport const PCS_EXCHANGE_URL = 'https://exchange.pancakeswap.finance'\r\nexport const PCS_ADD_LIQUIDITY_URL = `${PCS_EXCHANGE_URL}/#/add`\r\nexport const PCS_LIQUIDITY_POOL_URL = `${PCS_EXCHANGE_URL}/#/pool`\r\nexport const BAKERY_EXCHANGE_URL = 'https://www.bakeryswap.org'\r\nexport const BAKERY_ADD_LIQUIDITY_URL = `${BAKERY_EXCHANGE_URL}/#/add`\r\nexport const BAKERY_LIQUIDITY_POOL_URL = `${BAKERY_EXCHANGE_URL}/#/pool`\r\nexport const BELT_EXCHANGE = 'https://belt.fi/bsc'\r\nexport const BASE_BSC_SCAN_URL = 'https://bscscan.com'\r\nexport const LOTTERY_MAX_NUMBER_OF_TICKETS = 50\r\nexport const LOTTERY_TICKET_PRICE = 1\r\nexport const DEFAULT_TOKEN_DECIMAL = BIG_TEN.pow(18)\r\n","import { useEffect } from 'react'\r\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\n\r\nconst _binanceChainListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'BinanceChain', {\r\n      get() {\r\n        return this.bsc\r\n      },\r\n      set(bsc) {\r\n        this.bsc = bsc\r\n\r\n        resolve()\r\n      },\r\n    }),\r\n  )\r\n\r\nconst useEagerConnect = () => {\r\n  const { login } = useAuth()\r\n\r\n  useEffect(() => {\r\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\r\n\r\n    if (connectorId) {\r\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\r\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\r\n\r\n      // Currently BSC extension doesn't always inject in time.\r\n      // We must check to see if it exists, and if not, wait for it before proceeding.\r\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\r\n        _binanceChainListener().then(() => login(connectorId))\r\n\r\n        return\r\n      }\r\n\r\n      login(connectorId)\r\n    }\r\n  }, [login])\r\n}\r\n\r\nexport default useEagerConnect\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit/dist/theme'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const BN = { code: 'bn', language: 'বাংলা' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PL = { code: 'pl', language: 'Polski' }\r\nexport const PTPT = { code: 'pt-PT', language: 'Português (Portugal)' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português (Brazil)' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  AR,\r\n  BN,\r\n  ZHCN,\r\n  ZHTW,\r\n  NL,\r\n  FIL,\r\n  FI,\r\n  DE,\r\n  FR,\r\n  EL,\r\n  HI,\r\n  HU,\r\n  ID,\r\n  IT,\r\n  JA,\r\n  KO,\r\n  PL,\r\n  PTPT,\r\n  PTBR,\r\n  RO,\r\n  RU,\r\n  ESES,\r\n  SVSE,\r\n  TA,\r\n  TR,\r\n  UK,\r\n  VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 400)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(null)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations([])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          setTranslations([])\r\n          console.error('Error while loading translations', e)\r\n        })\r\n    }\r\n  }, [selectedLanguage])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeContext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeContext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://exchange.cubdefi.com/',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://exchange.cubdefi.com/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Dens',\r\n    icon: 'PoolIcon',\r\n    href: '/dens',\r\n  },\r\n  {\r\n    label: 'Kingdoms',\r\n    icon: 'PawIcon',\r\n    href: '/kingdoms',\r\n    status: {\r\n      text: 'AUTO',\r\n      color: 'warning',\r\n    },\r\n  },\r\n  {\r\n    label: 'LeoBridge',\r\n    icon: 'NftIcon',\r\n    href: \"https://bridge.cubdefi.com\",\r\n  },\r\n  {\r\n    label: 'Info',\r\n    icon: 'InfoIcon',\r\n    items: [\r\n      {\r\n        label: 'GitHub',\r\n        href: 'https://github.com/CubFinance',\r\n      },\r\n      {\r\n        label: 'PancakeSwap',\r\n        href: 'https://pancakeswap.info/token/0x50d809c74e0b8e49e7b4c65bb3109abe3ff4c1c1',\r\n      },\r\n      {\r\n        label: 'CoinMarketCap',\r\n        href: 'https://coinmarketcap.com/currencies/cub-finance/',\r\n      },\r\n      {\r\n        label: 'CoinGecko',\r\n        href: 'https://www.coingecko.com/en/coins/cub-finance',\r\n      },\r\n      {\r\n        label: 'AstroTools',\r\n        href: 'https://app.astrotools.io/pancake-pair-explorer/0x50d809c74e0b8e49e7b4c65bb3109abe3ff4c1c1',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Docs',\r\n    icon: 'TicketIcon',\r\n    href: 'https://docs.cubdefi.com/',\r\n  },\r\n  {\r\n    label: 'Roadmap',\r\n    icon: 'MoreIcon',\r\n    href: 'https://docs.cubdefi.com/roadmap',\r\n  },\r\n  {\r\n    label: \"Tokenized Blogging\",\r\n    icon: \"TokenizeIcon\",\r\n    href: \"https://leofinance.io/\",\r\n  },\r\n  {\r\n    label: \"Blog\",\r\n    icon: \"BlogIcon\",\r\n    href: \"https://leofinance.io/@leofinance\",\r\n  },\r\n  {\r\n    label: 'CertiK Audit',\r\n    icon: 'AuditIcon',\r\n    href: 'https://www.certik.org/projects/cubfinance',\r\n  },\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { usePriceCakeBusd, useProfile } from 'state/hooks'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account } = useWeb3React()\r\n  const { login, logout } = useAuth()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n  const { profile } = useProfile()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={login}\r\n      logout={logout}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      priceLink=\"https://coinmarketcap.com/currencies/cub-finance/\"\r\n      profile={{\r\n        username: profile?.username,\r\n        image: profile?.nft ? `/images/nfts/${profile.nft?.images.sm}` : undefined,\r\n        profileLink: '/profile',\r\n        noProfileLink: '/profile',\r\n        showPip: !profile?.username,\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React, { Suspense, SuspenseProps } from 'react'\r\n\r\ninterface State {\r\n  hasError: boolean\r\n}\r\n\r\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\r\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\r\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\r\n\r\n    // Save a flag on the window object indicating that we have already had a chunk error.\r\n    // This prevents infinite reloads\r\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\r\n\r\n    // If was a chunk load error, refresh the page\r\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\r\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\r\n      window.history.replaceState(nextState, '')\r\n      window.location.reload()\r\n      return\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state\r\n    const { fallback } = this.props\r\n\r\n    if (hasError) {\r\n      return fallback\r\n    }\r\n\r\n    return <Suspense {...this.props} />\r\n  }\r\n}\r\n\r\nexport default SuspenseWithChunkError\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import { createBrowserHistory } from 'history'\r\n\r\n// Manually create the history object so we can access outside the Router e.g. in modals\r\nconst history = createBrowserHistory()\r\n\r\nexport default history\r\n","import React, { useEffect, lazy } from 'react'\r\n// import { Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { Router, Route, Switch } from 'react-router-dom'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport useEagerConnect from 'hooks/useEagerConnect'\r\nimport { useFetchPriceList, useFetchProfile, useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport SuspenseWithChunkError from './components/SuspenseWithChunkError'\r\n// import ToastListener from './components/ToastListener'\r\nimport PageLoader from './components/PageLoader'\r\n// import EasterEgg from './components/EasterEgg'\r\n// import Pools from './views/Pools'\r\nimport history from './routerHistory'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst Kingdoms = lazy(() => import('./views/Kingdoms'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n/* const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\nconst Collectibles = lazy(() => import('./views/Collectibles'))\r\nconst Teams = lazy(() => import('./views/Teams'))\r\nconst Team = lazy(() => import('./views/Teams/Team'))\r\nconst Profile = lazy(() => import('./views/Profile'))\r\nconst TradingCompetition = lazy(() => import('./views/TradingCompetition'))\r\nconst Predictions = lazy(() => import('./views/Predictions')) */\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  // Monkey patch warn() because of web3 flood\r\n  // To be removed when web3 1.3.5 is released\r\n  useEffect(() => {\r\n    console.warn = () => null\r\n  }, [])\r\n\r\n  useEagerConnect()\r\n  useFetchPublicData()\r\n  useFetchProfile()\r\n  useFetchPriceList()\r\n\r\n  return (\r\n    <Router history={history}>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <SuspenseWithChunkError fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/dens\">\r\n              <Farms tokenMode />\r\n            </Route>\r\n            <Route path=\"/kingdoms\">\r\n              <Kingdoms />\r\n            </Route>\r\n            {/* <Route path=\"/lottery\">\r\n              <Lottery />\r\n            </Route>\r\n            <Route path=\"/ifo\">\r\n              <Ifos />\r\n            </Route>\r\n            <Route path=\"/collectibles\">\r\n              <Collectibles />\r\n            </Route>\r\n            <Route exact path=\"/teams\">\r\n              <Teams />\r\n            </Route>\r\n            <Route path=\"/teams/:id\">\r\n              <Team />\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n              <Profile />\r\n            </Route>\r\n            <Route path=\"/competition\">\r\n              <TradingCompetition />\r\n            </Route>\r\n            <Route path=\"/prediction\">\r\n              <Predictions />\r\n            </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\">\r\n              <Redirect to=\"/pools\" />\r\n            </Route>\r\n            <Route path=\"/syrup\">\r\n              <Redirect to=\"/pools\" />\r\n            </Route>\r\n            <Route path=\"/nft\">\r\n              <Redirect to=\"/collectibles\" />\r\n            </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </SuspenseWithChunkError>\r\n      </Menu>\r\n      {/* <EasterEgg iterations={2} />\r\n      <ToastListener /> */}\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\nimport { Web3ReactProvider } from '@web3-react/core'\r\nimport { HelmetProvider } from 'react-helmet-async'\r\nimport { Provider } from 'react-redux'\r\nimport { getLibrary } from 'utils/web3React'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport { ToastsProvider } from 'contexts/ToastsContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <Provider store={store}>\r\n        <ToastsProvider>\r\n          <HelmetProvider>\r\n            <ThemeContextProvider>\r\n              <LanguageContextProvider>\r\n                <RefreshContextProvider>\r\n                  <ModalProvider>{children}</ModalProvider>\r\n                </RefreshContextProvider>\r\n              </LanguageContextProvider>\r\n            </ThemeContextProvider>\r\n          </HelmetProvider>\r\n        </ToastsProvider>\r\n      </Provider>\r\n    </Web3ReactProvider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStaking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\n\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.stakingToken.address),\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\r\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3NoAccount()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'allowance',\r\n    params: [account, getAddress(p.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingCub('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","// import contracts from './contracts'\r\nimport tokens from './tokens'\r\nimport { FarmConfig } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  // {\r\n  //   pid: 0,\r\n  //   lpSymbol: 'BNB-BUSD LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x1B96B92314C44b159149f7E0303511fB2Fc4774f',\r\n  //   },\r\n  //   token: tokens.wbnb,\r\n  //   quoteToken: tokens.busd,\r\n  // },\r\n  {\r\n    pid: 10,\r\n    lpSymbol: 'CUB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0EF564D4F8D6C0ffE13348A32e21EFd55e508e84',\r\n    },\r\n    token: tokens.cub,\r\n    quoteToken: tokens.busd,\r\n  },\r\n  {\r\n    pid: 11,\r\n    lpSymbol: 'CUB-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc08C74dC9EF46C6dB122b30c48a659831017DD2E',\r\n    },\r\n    token: tokens.cub,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n  {\r\n    pid: 9,\r\n    lpSymbol: 'bLEO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x243E060DEcA0499fCaE6ABe548C0115faaBa0ed4',\r\n    },\r\n    token: tokens.bleo,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n  {\r\n    pid: 6,\r\n    lpSymbol: 'USDT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc15fa3E22c912A276550F3E5FE3b0Deb87B55aCd',\r\n    },\r\n    token: tokens.usdt,\r\n    quoteToken: tokens.busd,\r\n  },\r\n  {\r\n    pid: 8,\r\n    lpSymbol: 'BTCB-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7561EEe90e24F3b348E1087A005F78B4c8453524',\r\n    },\r\n    token: tokens.btcb,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n  // This farm is here for BAKE price for kingdom vault pid 5\r\n  {\r\n    pid: 4,\r\n    lpSymbol: 'BAKE-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x3Da30727ed0626b78C212e81B37B97A8eF8A25bB',\r\n    },\r\n    token: tokens.bake,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n  // This farm is here for BELT price for kingdom vault pid 6-8\r\n  {\r\n    pid: 5,\r\n    lpSymbol: 'BELT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF3Bc6FC080ffCC30d93dF48BFA2aA14b869554bb',\r\n    },\r\n    token: tokens.belt,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n  {\r\n    pid: 7,\r\n    lpSymbol: 'ETH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x70D8929d04b60Af4fb9B58713eBcf18765aDE422',\r\n    },\r\n    token: tokens.eth,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n  {\r\n    pid: 3,\r\n    lpSymbol: 'DAI-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3aB77e40340AB084c3e23Be8e5A6f7afed9D41DC',\r\n    },\r\n    token: tokens.dai,\r\n    quoteToken: tokens.busd,\r\n  },\r\n  {\r\n    pid: 23,\r\n    lpSymbol: 'DEC-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4c79edab89848f34084283bb1fe8eac2dca649c3',\r\n    },\r\n    token: tokens.dec,\r\n    quoteToken: tokens.busd,\r\n  },\r\n  // {\r\n  //   pid: 4,\r\n  //   lpSymbol: 'USDC-BUSD LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x680Dd100E4b394Bda26A59dD5c119A391e747d18',\r\n  //   },\r\n  //   token: tokens.usdc,\r\n  //   quoteToken: tokens.busd,\r\n  // },\r\n  // {\r\n  //   pid: 5,\r\n  //   lpSymbol: 'DOT-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xbCD62661A6b1DEd703585d3aF7d7649Ef4dcDB5c',\r\n  //   },\r\n  //   token: tokens.dot,\r\n  //   quoteToken: tokens.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 2,\r\n  //   lpSymbol: 'CAKE-BUSD LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0Ed8E0A2D99643e1e65CCA22Ed4424090B8B7458',\r\n  //   },\r\n  //   token: tokens.cake,\r\n  //   quoteToken: tokens.busd,\r\n  // },\r\n  // {\r\n  //   pid: 1,\r\n  //   lpSymbol: 'CAKE-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n  //   },\r\n  //   token: tokens.cake,\r\n  //   quoteToken: tokens.wbnb,\r\n  // },\r\n\r\n  // {\r\n  //   pid: 13,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'bLEO',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x243E060DEcA0499fCaE6ABe548C0115faaBa0ed4', // bLEO-WBNB LP\r\n  //   },\r\n  //   tokenSymbol: 'bLEO',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x6421531AF54C7B14Ea805719035EBf1e3661c44A',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n\r\n  // {\r\n  //   pid: 14,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'BUSD',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\r\n  //   },\r\n  //   token: tokens.busd,\r\n  //   quoteToken: tokens.busd,\r\n  // },\r\n  // {\r\n  //   pid: 15,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'WBNB',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\r\n  //   },\r\n  //   token: tokens.wbnb,\r\n  //   quoteToken: tokens.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 16,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'USDT',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd', // USDT-BUSD LP\r\n  //   },\r\n  //   token: tokens.usdt,\r\n  //   quoteToken: tokens.busd,\r\n  // },\r\n  {\r\n    pid: 12,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'CUB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0EF564D4F8D6C0ffE13348A32e21EFd55e508e84', // CUB-BUSD LP\r\n    },\r\n    token: tokens.cub,\r\n    quoteToken: tokens.busd,\r\n  },\r\n  {\r\n    pid: 17,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BTCB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb8875e207ee8096a929d543c9981c9586992eacb', // BTCB-BUSD LP\r\n    },\r\n    token: tokens.btcb,\r\n    quoteToken: tokens.busd,\r\n  },\r\n  {\r\n    pid: 18,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'ETH',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd9a0d1f5e02de2403f68bb71a15f8847a854b494', // ETH-BUSD LP\r\n    },\r\n    token: tokens.eth,\r\n    quoteToken: tokens.busd,\r\n  },\r\n  {\r\n    pid: 21,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'DOT',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x54c1ec2f543966953f2f7564692606ea7d5a184e', // DOT-BUSD LP\r\n    },\r\n    token: tokens.dot,\r\n    quoteToken: tokens.busd,\r\n  },\r\n  // {\r\n  //   pid: 19,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'DAI',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc', // DAI-BUSD LP\r\n  //   },\r\n  //   token: tokens.dai,\r\n  //   quoteToken: tokens.busd,\r\n  // },\r\n  // {\r\n  //   pid: 20,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'USDC',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x680dd100e4b394bda26a59dd5c119a391e747d18', // USDC-BUSD LP\r\n  //   },\r\n  //   token: tokens.usdc,\r\n  //   quoteToken: tokens.busd,\r\n  // },\r\n\r\n  // {\r\n  //   pid: 22,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'CAKE',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\r\n  //   },\r\n  //   token: tokens.cake,\r\n  //   quoteToken: tokens.busd,\r\n  // },\r\n\r\n  // KINGDOMS\r\n  {\r\n    pid: 4,\r\n    altPid: 12,\r\n    compounding: 720,\r\n    isKingdom: true,\r\n    isKingdomToken: true,\r\n    farmType: 'Cub DeFi',\r\n    lpSymbol: 'CUB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0EF564D4F8D6C0ffE13348A32e21EFd55e508e84', // CUB-BUSD LP\r\n    },\r\n    token: tokens.cub,\r\n    quoteToken: tokens.busd,\r\n    kingdomContract: '0xc2adf5fc4d4e6c2cc97f8190acbdf808c689117c',\r\n  },\r\n  {\r\n    pid: 0,\r\n    altPid: 0,\r\n    compounding: 4200,\r\n    isKingdom: true,\r\n    isKingdomToken: true,\r\n    farmType: 'Pancake v2',\r\n    lpSymbol: 'CAKE',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\r\n    },\r\n    token: tokens.cake,\r\n    quoteToken: tokens.busd,\r\n    kingdomContract: '0x77440f4dc7b4ef591e78d460374bd12d3d6bdad8',\r\n  },\r\n  {\r\n    pid: 1,\r\n    altPid: 252,\r\n    compounding: 365,\r\n    isKingdom: true,\r\n    farmType: 'Pancake v2',\r\n    lpSymbol: 'BNB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x58f876857a02d6762e0101bb5c46a8c1ed44dc16',\r\n    },\r\n    token: tokens.wbnb,\r\n    quoteToken: tokens.busd,\r\n    kingdomContract: '0x701d4f8168b00abbd948d36e11added4e1cac742',\r\n  },\r\n  {\r\n    pid: 2,\r\n    altPid: 261,\r\n    compounding: 365,\r\n    isKingdom: true,\r\n    farmType: 'Pancake v2',\r\n    lpSymbol: 'ETH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x74e4716e431f45807dcf19f284c7aa99f18a4fbc',\r\n    },\r\n    token: tokens.eth,\r\n    quoteToken: tokens.wbnb,\r\n    kingdomContract: '0x3582933accc5732484138a2dd61fcdd02d0a021c',\r\n  },\r\n  {\r\n    pid: 3,\r\n    altPid: 255,\r\n    compounding: 365,\r\n    isKingdom: true,\r\n    farmType: 'Pancake v2',\r\n    lpSymbol: 'DOT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xDd5bAd8f8b360d76d12FdA230F8BAF42fe0022CF',\r\n    },\r\n    token: tokens.dot,\r\n    quoteToken: tokens.wbnb,\r\n    kingdomContract: '0x03e48360dc132a1838492b6870c98d2bd895ea9a',\r\n  },\r\n  {\r\n    pid: 5,\r\n    compounding: 365,\r\n    isKingdom: true,\r\n    farmType: 'Bakery',\r\n    lpSymbol: 'BTC-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x58521373474810915b02FE968D1BCBe35Fc61E09',\r\n    },\r\n    token: tokens.btcb,\r\n    quoteToken: tokens.wbnb,\r\n    kingdomContract: '0xbdc40a031f6908a8203fb1c75bb2b9c4abf59e2e',\r\n  },\r\n  {\r\n    pid: 6,\r\n    altPid: 7,\r\n    compounding: 365,\r\n    isKingdom: true,\r\n    isKingdomToken: true,\r\n    farmType: 'Belt',\r\n    lpSymbol: 'beltBTC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x51bd63f240fb13870550423d208452ca87c44444',\r\n    },\r\n    token: tokens.beltbtc,\r\n    quoteToken: tokens.btcb,\r\n    kingdomContract: '0x3f1b0319E2EbeD04D5e2ce367393914bBf8f59f5',\r\n  },\r\n  {\r\n    pid: 7,\r\n    altPid: 8,\r\n    compounding: 365,\r\n    isKingdom: true,\r\n    isKingdomToken: true,\r\n    farmType: 'Belt',\r\n    lpSymbol: 'beltETH',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xaa20e8cb61299df2357561c2ac2e1172bc68bc25',\r\n    },\r\n    token: tokens.belteth,\r\n    quoteToken: tokens.eth,\r\n    kingdomContract: '0x3f2C7e9cf2e3a718eedf52403e0FB71b9AfC51b0',\r\n  },\r\n  {\r\n    pid: 8,\r\n    altPid: 3,\r\n    compounding: 365,\r\n    isKingdom: true,\r\n    isKingdomToken: true,\r\n    farmType: 'Belt',\r\n    lpSymbol: 'beltUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9cb73f20164e399958261c289eb5f9846f4d1404',\r\n    },\r\n    token: tokens.beltusd,\r\n    quoteToken: tokens.busd,\r\n    kingdomContract: '0x5860046Ccf3ab8D840F1ac15A547E0c2bBECA6F0',\r\n  },\r\n]\r\n\r\nexport default farms\r\n","export const GRAPH_API_PROFILE = process.env.REACT_APP_GRAPH_API_PROFILE\r\nexport const GRAPH_API_PREDICTIONS = process.env.REACT_APP_GRAPH_API_PREDICTIONS\r\nexport const GRAPH_WS_PREDICTIONS = process.env.REACT_APP_GRAPH_WS_PREDICTIONS\r\n"],"sourceRoot":""}