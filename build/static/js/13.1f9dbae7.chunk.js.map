{"version":3,"sources":["views/Airdrops/StakedBalance.tsx","views/Airdrops/Airdrops.tsx","hooks/useTokenBalance.ts"],"names":["Block","styled","div","StakedBalance","cub","value","TranslateString","useI18n","useWeb3React","account","CardValue","toNumber","lineHeight","gt","CardBusdValue","color","style","Title","props","theme","colors","primary","Airdrops","dispatch","useAppDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","useTotalCubStaked","BIG_ZERO","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","getCakeAddress","circSupply","minus","BigNumber","cubSupply","getBalanceNumber","pendingAirdrop","times","PageHeader","className","as","size","mb","Page","justifyContent","bold","fontSize","toLocaleString","maximumFractionDigits","slowRefresh","useState","setTotalSupply","a","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useTokenBalance"],"mappings":"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","file":"static/js/13.1f9dbae7.chunk.js","sourcesContent":["import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport CardValue from 'views/Home/components/CardValue'\nimport CardBusdValue from 'views/Home/components/CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst StakedBalance = ({ cub, value }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={cub.toNumber()} lineHeight=\"1.5\" />\n      {value.gt(0) && <CardBusdValue value={value.toNumber()} />}\n    </Block>\n  )\n}\n\nexport default StakedBalance\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Text, Flex } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport { useTotalCubStaked } from 'state/hooks'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from 'views/Home/components/CardValue'\nimport StakedBalance from './StakedBalance'\n\nconst Title = styled.div`\n  font-size: 2rem;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Airdrops: React.FC = () => {\n  // const { path } = useRouteMatch()\n  // const { pathname } = useLocation()\n  const { account } = useWeb3React()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const { cub = BIG_ZERO, value = BIG_ZERO } = useTotalCubStaked()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cubSupply = getBalanceNumber(circSupply) || 0;\n  const pendingAirdrop = cubSupply ? new BigNumber(1000000).div(cubSupply).times(cub).toNumber() : 0\n\n  return (\n    <>\n      <PageHeader>\n        <div className='k-header'>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"10px\">\n            POLYCUB Airdrop\n          </Heading>\n        </div>\n      </PageHeader>\n      <Page>\n        <Flex justifyContent=\"space-between\">\n          <Title>CUB Eligible for Airdrop:</Title>\n          <StakedBalance cub={cub} value={value} />\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Title>Pending Airdrop over 60 days:</Title>\n          <Text bold fontSize=\"40px\" style={{ lineHeight: '1' }} color=\"text\">{pendingAirdrop.toLocaleString('en-US', { maximumFractionDigits: 0 })}</Text>\n        </Flex>\n      </Page>\n    </>\n  )\n}\n\nexport default Airdrops\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}