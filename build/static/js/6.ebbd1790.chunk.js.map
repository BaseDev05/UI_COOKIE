{"version":3,"sources":["components/layout/Flex.tsx","hooks/usePersistState.ts","components/PageHeader/PageHeader.tsx","components/Select/Select.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","components/Balance.tsx","views/Farms/components/types.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useApprove.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","components/ApyCalculatorModal/index.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","hooks/useI18n.ts","views/Home/components/CardValue.tsx","utils/callHelpers.ts","hooks/useContract.ts","hooks/useWeb3.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","views/Home/components/CardBusdValue.tsx","utils/apr.ts"],"names":["FlexLayout","styled","div","usePersistState","initialValue","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Outer","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","DropDownHeader","shadows","inset","inputSecondary","input","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","width","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onChange","containerRef","useRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","height","containerSize","setContainerSize","toggling","onOptionClicked","option","current","offsetWidth","offsetHeight","ref","onClick","label","color","map","Wrapper","primary","ExpandableSectionButton","expanded","TranslateString","useI18n","aria-label","role","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","Balance","fontSize","decimals","isDisabled","unit","previousValue","start","end","duration","separator","ViewMode","StyledLinkExternal","LinkExternal","DetailsSection","apr","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","isKingdom","isKingdomToken","cubAPR","lpTokenBalancePCSv2","lpTotalInQuoteTokenPCS","poolWeightPCS","tokenPriceVsQuote","pcsCompounding","cakePrice","useGetApiPrice","extra","getPoolApr","getBalanceNumber","BigNumber","times","DEFAULT_TOKEN_DECIMAL","parseFloat","getFarmApr","dailyAPR","toNumber","farmAPY","totalAPY","totalAPYString","toLocaleString","maximumFractionDigits","justifyContent","toFixed","href","name","DualTag","variant","outline","NoFeeTag","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","src","alt","flexDirection","split","useApprove","lpContract","dispatch","useAppDispatch","account","useWeb3React","masterChefContract","useMasterchef","kingdomContract","useKingdom","onApprove","useCallback","a","approve","tx","fetchFarmUserDataAsync","useStake","pid","onStake","amount","stake","txHash","console","info","useUnstake","onUnstake","unstake","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","StyledInput","Input","xs","StyledErrorMessage","Text","ModalInput","max","symbol","onSelectMax","inputTitle","isBalanceZero","style","position","pl","balance","balanceNumber","Number","undefined","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","isTokenOnly","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","gt","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","stakedBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","pathname","includes","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","CardBusdValue","marginBottom","toString","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","address","token","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","getBep20Contract","handleApprove","textTransform","pr","mt","UnlockButton","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","getRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","linkLabel","linkHref","earningTokenSymbol","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","Divider","borderColor","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","exchangeUrl","PCS_ADD_LIQUIDITY_URL","BASE_ADD_LIQUIDITY_URL","isCommunityFarm","isCommunity","depositFeeBP","display","CardActionsContainer","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","targetRef","tooltipVisible","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","countUp","update","updateValue","marginTop","expandAnimation","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","hasStakeInArchivedFarms","url","useRouteMatch","as","Link","to","show","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","FeeWrapper","Farms","tokenMode","kingdomMode","path","useFarms","farmsLP","userDataLoaded","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","fastRefresh","useRefresh","isArchived","isInactive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","header","heading","subHeading","subHeadingPCS","subHeadingCertik","kingdomFees","textAlign","rel","Page","checked","marginLeft","sort","b","exact","renderContent","responsive","translations","TranslationsContext","fallback","foundTranslation","find","translation","stringId","includesVariable","interpolatedText","isEmpty","forEach","dataKey","templateKey","RegExp","CardValue","lineHeight","prefix","methods","ethers","constants","MaxUint256","send","from","deposit","on","transactionHash","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","gas","withdraw","sousUnstake","emergencyWithdraw","sousEmergencyUnstake","harvest","leaveStaking","soushHarvest","soushHarvestBnb","BIG_ZERO","useCake","getCakeContract","useLottery","getLotteryContract","getMasterchefContract","getKingdomsContract","useSousChef","getSouschefContract","library","refEth","Web3","getWeb3NoAccount","setweb3","farmPid","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useAuth","login","logout","onPresentConnectModal","useWalletModal","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BLOCKS_PER_YEAR","totalStakingTokenInPool","isNaN","cakePriceUsd","poolLiquidityUsd","PCSCAKE_PER_YEAR","yearlyCakeRewardAllocation","CAKE_PER_BLOCK"],"mappings":"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","file":"static/js/6.ebbd1790.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\r\n  }, [value, localStorageKey])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap-libs/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? TranslateString(1066, 'Hide') : TranslateString(658, 'Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface TextProps {\r\n  isDisabled?: boolean\r\n  fontSize?: string\r\n  color?: string\r\n  bold?: boolean\r\n}\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value?: number\r\n  decimals?: number\r\n  unit?: string\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {value && unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nBalance.defaultProps = {\r\n  fontSize: '32px',\r\n  isDisabled: false,\r\n  color: 'text',\r\n  decimals: 3,\r\n}\r\n\r\nexport default Balance\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { getPoolApr, getFarmApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useGetApiPrice } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  isKingdom?: boolean\r\n  isKingdomToken?: boolean\r\n  cubAPR?: number\r\n  lpTokenBalancePCSv2?: number\r\n  lpTotalInQuoteTokenPCS?: number\r\n  poolWeightPCS?: any\r\n  tokenPriceVsQuote?: number\r\n  pcsCompounding?: number\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n  isKingdom,\r\n  isKingdomToken,\r\n  cubAPR,\r\n  lpTokenBalancePCSv2,\r\n  lpTotalInQuoteTokenPCS,\r\n  poolWeightPCS,\r\n  tokenPriceVsQuote,\r\n  pcsCompounding,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const cakePrice = useGetApiPrice('0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82')\r\n\r\n  let apr:number\r\n\r\n  let extra = null\r\n  if (isKingdom) {\r\n    if (isKingdomToken)\r\n      apr = getPoolApr(\r\n        tokenPriceVsQuote,\r\n        tokenPriceVsQuote,\r\n        getBalanceNumber(new BigNumber(lpTokenBalancePCSv2).times(DEFAULT_TOKEN_DECIMAL), 18),\r\n        parseFloat('10'),\r\n      )\r\n    else\r\n      apr = getFarmApr(poolWeightPCS, new BigNumber(cakePrice), new BigNumber(lpTotalInQuoteTokenPCS), isKingdom)\r\n\r\n    const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\r\n\r\n    const farmAPY = ((((apr / 100 / pcsCompounding) + 1) ** pcsCompounding) - 1) * 100\r\n    const totalAPY = cubAPR ? cubAPR + farmAPY : farmAPY\r\n    const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n    extra = (\r\n      <>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Farm APR')}:</Text>\r\n          <Text>{`${new BigNumber(apr).toFixed(2)}% (${new BigNumber(dailyAPR).toFixed(2)}%)`}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Compounds per year')}:</Text>\r\n          <Text>~{pcsCompounding}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            value={farmAPY}\r\n            decimals={2}\r\n            unit=\"%\"\r\n          />\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'CUB APR')}:</Text>\r\n          <Text>{cubAPR ? `${cubAPR.toLocaleString('en-US', { maximumFractionDigits: 2 })}%` : '-'}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Total APY')}:</Text>\r\n          <Text>{totalAPYString}%</Text>\r\n        </Flex>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\r\n        <Text>{totalValueFormatted}</Text>\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n        </StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n      {extra}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst CoreTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = (props) => (\r\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nconst DualTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline {...props}>\r\n    Dual\r\n  </Tag>\r\n)\r\n\r\nconst ManualPoolTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Manual\r\n  </Tag>\r\n)\r\n\r\nconst CompoundingPoolTag = (props) => (\r\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n    Auto\r\n  </Tag>\r\n)\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag, NoFeeTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  depositFee?: number\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  // isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {/* isCommunityFarm ? <CommunityTag /> : <CoreTag /> */}\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery, useKingdom } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, isKingdom ? kingdomContract : masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nconst useStake = (pid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(isKingdom ? kingdomContract : masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, kingdomContract, isKingdom],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nconst useUnstake = (pid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(isKingdom ? kingdomContract : masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, kingdomContract, isKingdom],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23, 78]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceNumber = Number(balance)\r\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\r\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\r\n    }\r\n    return balanceNumber.toLocaleString()\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance(max)}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl, isTokenOnly, isKingdomToken }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, isTokenOnly || isKingdomToken ? 'Stake tokens' : 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', isTokenOnly, isKingdomToken }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, isTokenOnly || isKingdomToken ? 'Unstake tokens' : 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  isKingdom?: boolean\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  isKingdom,\r\n  isTokenOnly,\r\n  isKingdomToken,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const location = useLocation()\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button onClick={onPresentDeposit} disabled={location.pathname.includes('archived')}>\r\n        {TranslateString(999, isTokenOnly || isKingdomToken ? 'Stake Token' : 'Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  isKingdom?: boolean\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, isKingdom }) => {\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalance}\r\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\r\n      </Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 12 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, isKingdomToken, isKingdom, token: { address } } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  // const lpContract = getBep20Contract(lpAddress, web3)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly || isKingdomToken){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress, isKingdomToken])\r\n\r\n  const { onApprove } = useApprove(lpContract, isKingdom)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        isKingdom={isKingdom}\r\n        isTokenOnly={farm.isTokenOnly}\r\n        isKingdomToken={farm.isKingdomToken}\r\n      />\r\n    ) : (\r\n      <Button\r\n        mt=\"8px\"\r\n        width=\"100%\"\r\n        disabled={requestedApproval || location.pathname.includes('archived')}\r\n        onClick={handleApprove}\r\n      >\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          CUB\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} isKingdom={isKingdom} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const aprAsDecimal = farmApr / 100\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CUB',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {earningTokenSymbol} {TranslateString(999, 'per')} $1000\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          `Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={`${TranslateString(999, 'Get')} ${lpLabel}`}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\n\r\n\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n  depositFeeBP?: number\r\n  lpTokenBalancePCSv2?: number\r\n  lpTotalInQuoteTokenPCS?: number\r\n  poolWeightPCS?: string\r\n  pcsCompounding?: number\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted = farm.liquidity && farm.liquidity.toNumber()\r\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CUB'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const exchangeUrl = farm.isKingdom ? PCS_ADD_LIQUIDITY_URL : BASE_ADD_LIQUIDITY_URL\r\n  const addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.token.symbol === 'CUB' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n        depositFee={farm.depositFeeBP}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        {\r\n          farm.depositFeeBP ? (\r\n            <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n          ) : (\r\n            <Skeleton height={24} width={80} />\r\n          )\r\n        }\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          // bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.token.address[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          isKingdom={farm.isKingdom}\r\n          isKingdomToken={farm.isKingdomToken}\r\n          tokenPriceVsQuote={Number(farm.tokenPriceVsQuote)}\r\n          poolWeightPCS={farm.poolWeightPCS}\r\n          pcsCompounding={farm.pcsCompounding}\r\n          cubAPR={farm.apr}\r\n          lpTokenBalancePCSv2={farm.lpTokenBalancePCSv2 ? farm.lpTokenBalancePCSv2 : 0}\r\n          lpTotalInQuoteTokenPCS={farm.lpTotalInQuoteTokenPCS ? farm.lpTotalInQuoteTokenPCS : 0}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Text, Image } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const TranslateString = useI18n()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {TranslateString(999, 'FARMING')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const TranslateString = useI18n()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && TranslateString(658, 'Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const TranslateString = useI18n()\r\n  const tooltipContent = (\r\n    <div>\r\n      {TranslateString(999, 'The multiplier represents the amount of CUB rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {TranslateString(\r\n        999,\r\n        'For example, if a 1x farm was getting 1 CUB per block, a 40x farm would be getting 40 CUB per block.',\r\n      )}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, 'top-end', 'hover', undefined, undefined, [\r\n    20,\r\n    10,\r\n  ])\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity.toNumber() ? (\r\n    `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n  ) : (\r\n    '-'\r\n  )\r\n  const TranslateString = useI18n()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    TranslateString(999, 'The total value of the funds in this farm’s liquidity pool'),\r\n    'top-end',\r\n    'hover',\r\n    undefined,\r\n    undefined,\r\n    [20, 10],\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = 0\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default abalance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const TranslateString = useI18n()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>CUB </Title>\r\n        <Subtle>{TranslateString(1072, 'EARNED')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  isTokenOnly,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n  const tokenAddress = getAddress(token.address)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  // const lpContract = getBep20Contract(lpAddress, web3)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={location.pathname.includes('archived')}\r\n          >\r\n            {TranslateString(999, isTokenOnly ? 'Stake Token' : 'Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={requestedApproval || location.pathname.includes('archived')}\r\n          onClick={handleApprove}\r\n          variant=\"secondary\"\r\n        >\r\n          {TranslateString(999, 'Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LinkExternal, Text, Flex } from '@pancakeswap-libs/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { NoFeeTag, DualTag } from 'components/Tags'\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const TranslateString = useI18n()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://bscscan.com/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.cubdefi.com/#/add/${liquidityUrlPathParts}`}>\r\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {/* farm.isCommunity ? <CommunityTag /> : <CoreTag /> */}\r\n          {farm.depositFeeBP === 0 ? <NoFeeTag /> : null}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n        {farm.depositFeeBP !== 0 && (\r\n          <Flex justifyContent='flex-start'>\r\n            <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:&nbsp;</Text>\r\n            <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n          </Flex>\r\n        )}\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(736, 'APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const TranslateString = useI18n()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={TranslateString(736, 'APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout\r\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\r\n                      >\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={TranslateString(1072, 'Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(736, 'APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const TranslateString = useI18n()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {TranslateString(999, 'To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n  hasStakeInArchivedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms, hasStakeInArchivedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const TranslateString = useI18n()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(1198, 'Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {TranslateString(388, 'Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n        <NotificationDot show={hasStakeInArchivedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/archived`}>\r\n            {TranslateString(999, 'Discontinued')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          value={searchText}\r\n          onChange={onChange}\r\n          placeholder=\"Search farms\"\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\n// import { MigrationV2 } from 'components/Banner'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\n// import { useGetStats } from 'hooks/api'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n// import CardValue from '../Home/components/CardValue'\r\n\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\n/* const StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n` */\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n  kingdomMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = ({ tokenMode, kingdomMode }) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const prices = useGetApiPrices()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    // Makes the main scheduled fetching to request archived farms data\r\n    dispatch(setLoadArchivedFarmsData(isArchived))\r\n\r\n    // Immediately request data for archived farms so users don't have to wait\r\n    // 60 seconds for public data and 10 seconds for user data\r\n    if (isArchived) {\r\n      dispatch(fetchFarmsPublicDataAsync())\r\n      if (account) {\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n      }\r\n    }\r\n  }, [isArchived, dispatch, account])\r\n\r\n  // const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, prices, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (!kingdomMode && viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  let header = TranslateString(674, 'Farms')\r\n  let heading = TranslateString(320, 'Stake LP tokens to earn CUB')\r\n  let subHeading = TranslateString(10000, 'Deposit Fee will be used to buyback CUB and bLEO')\r\n  let subHeadingPCS = null\r\n  let subHeadingCertik = null\r\n  let kingdomFees = null\r\n  // let extra = null\r\n  // const data = useGetStats()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  if (tokenMode) {\r\n    header = TranslateString(674, 'Dens')\r\n    heading = TranslateString(10002, 'Stake tokens to earn CUB')\r\n  } else if (kingdomMode) {\r\n    header = TranslateString(674, 'Kingdoms')\r\n    heading = TranslateString(null, 'Kingdoms: Composable Auto-Compounding')\r\n    subHeading = TranslateString(null, 'Stake tokens for cross-platform farming plus CUB rewards')\r\n    subHeadingPCS = (\r\n      <Heading as=\"h2\" color=\"warning\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n        IMPORTANT: Must use <a target=\"_blank\" rel=\"noreferrer\" href=\"https://exchange.pancakeswap.finance/#/pool\">Pancakeswap V2 Exchange</a> for V2 Kingdom LP tokens until we add a V2 exchange for Cub Finance\r\n      </Heading>\r\n    )\r\n    subHeadingCertik = (\r\n      <Heading as=\"h2\" color=\"warning\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n        CertiK Audit is Pending: Our other contracts have been audited by CertiK and Kingdoms are currently under review. Please use at your own discretion until the audit has been published\r\n      </Heading>\r\n    )\r\n    kingdomFees = (\r\n      <FeeWrapper>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\r\n        Fees\r\n      </Heading>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Management Fee:</Text>\r\n          <Text>0.9%</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Withdrawal Fee:</Text>\r\n          <Text>None</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Fee to CUB Staking Kingdom:</Text>\r\n          <Text>1%</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>CUB Burn Rate:</Text>\r\n          <Text>100% of Fees Buyback and Burn CUB</Text>\r\n        </Flex>\r\n      </FeeWrapper>\r\n    )\r\n  }\r\n\r\n  const tlvSpacing = '20px'\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"15px\">\r\n          {header}\r\n        </Heading>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n          {heading}\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb={tlvSpacing} style={{ textAlign: 'left' }}>\r\n          {subHeading}\r\n        </Heading>\r\n        {subHeadingPCS}\r\n        {subHeadingCertik}\r\n        {kingdomFees}\r\n        <br/>\r\n        {/* extra */}\r\n        <Wrapper>\r\n          <Button size=\"sm\">\r\n            <a href=\"https://docs.cubdefi.com\">Learn More</a>\r\n          </Button>\r\n        </Wrapper>\r\n      </PageHeader>\r\n      {/* <MigrationV2 /> */}\r\n      <Page>\r\n        <ControlContainer>\r\n          {\r\n            !kingdomMode && (\r\n              <ViewControls>\r\n                <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n                <ToggleWrapper>\r\n                  <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n                  <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n                </ToggleWrapper>\r\n                <FarmTabButtons\r\n                  hasStakeInFinishedFarms={stakedInactiveFarms.length > 0}\r\n                  hasStakeInArchivedFarms={stakedArchivedFarms.length > 0}\r\n                />\r\n              </ViewControls>\r\n            )\r\n          }\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Hot',\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <Image src=\"/images/cub/wide.svg\" alt=\"illustration\" width={1352} height={587} responsive />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import { useContext } from 'react'\r\nimport { isEmpty } from 'lodash'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\ninterface ContextData {\r\n  [key: string]: number | string\r\n}\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\r\n    if (translations.length === 0) {\r\n      return fallback\r\n    }\r\n\r\n    const foundTranslation = translations.find((translation) => {\r\n      return translation.data.stringId === translationId\r\n    })\r\n\r\n    if (foundTranslation) {\r\n      const { text } = foundTranslation.data\r\n      const includesVariable = text.includes('%')\r\n\r\n      if (includesVariable) {\r\n        let interpolatedText = text\r\n\r\n        // If dynamic tags are found but no data was passed return the fallback\r\n        if (isEmpty(data)) {\r\n          return fallback\r\n        }\r\n\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return text\r\n    }\r\n\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  /* if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } */\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  /* if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } */\r\n\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking('0')\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getKingdomsContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useKingdom = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getKingdomsContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(isKingdom ? kingdomContract : masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, PCSCAKE_PER_YEAR } from 'config'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber, isKingdom?: boolean): number => {\r\n  if (isKingdom) {\r\n    const yearlyCakeRewardAllocation = PCSCAKE_PER_YEAR.times(poolWeight)\r\n    const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n    return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n  }\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const liquidity = poolLiquidityUsd.toNumber() ? poolLiquidityUsd : new BigNumber(0)\r\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(liquidity).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\nexport default null\r\n"],"sourceRoot":""}