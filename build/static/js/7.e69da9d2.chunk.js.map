{"version":3,"sources":["views/Kingdoms/components/KingdomCard.tsx","views/Kingdoms/components/KingdomDetail.tsx","views/Kingdoms/components/DividerBlue.tsx","views/Kingdoms/components/Kingdom.tsx","views/Kingdoms/components/CardValue.tsx","views/Kingdoms/Kingdoms.tsx"],"names":["KCard","styled","div","props","theme","card","background","Button","UiButton","Values","Brackets","span","colors","text","KingdomCard","farm","walletBalance","depositBalance","rewardBalance","walletBalanceQuoteValue","depositBalanceQuoteValue","addLiquidityUrl","useState","pendingTx","setPendingTx","pid","isTokenOnly","isKingdom","isKingdomToken","tokenName","lpSymbol","toUpperCase","userData","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","BigNumber","cakePrice","usePriceCakeBusd","earningsBusd","multipliedBy","toNumber","onStake","useStake","onUnstake","useUnstake","onReward","useHarvest","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","className","justifyContent","Balance","fontSize","value","decimals","unit","CardBusdValue","mt","fullWidth","onClick","disabled","a","Details","Detail","KDetail","StyledLinkExternal","Link","KingdomDetail","farmName","oneTokenQuoteValue","removed","aprApy","tokenValueFormated","times","DEFAULT_TOKEN_DECIMAL","toFixed","multiplier","quoteToken","token","lpAddresses","kingdomContract","lpLabel","replace","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","address","tokenAddress","exchangeUrl","PCS_ADD_LIQUIDITY_URL","BASE_ADD_LIQUIDITY_URL","lpAddress","process","farmContract","vaultContract","infoAddress","AprApy","isDetails","external","href","primary","ExpandingWrapper","expanded","K","KImage","Image","Kingdom","bnbPrice","ethereum","account","showExpandableSection","setShowExpandableSection","apr","lpTotalInQuoteToken","kingdomSupply","pcsPid","tokenPriceVsQuote","poolWeightPCS","pcsCompounding","lpTokenBalancePCSv2","lpTotalInQuoteTokenPCS","farmImage","split","toLocaleLowerCase","useKingdomAPRAPY","Number","dailyAPR","totalAPY","earnings","rawTokenBalance","getBalanceNumber","rawStakedBalance","rawEarningsBalance","totalValueFormated","toLocaleString","undefined","maximumFractionDigits","farmAPR","src","alt","width","height","alignItems","ExpandableSectionButton","onlyArrow","StyledText","Text","CardValue","prefix","useCountUp","start","end","duration","separator","countUp","update","updateValue","useRef","useEffect","current","FeeWrapper","Kingdoms","totalValue","useTotalValueKingdoms","pathname","useLocation","useFarms","farmsLP","data","userDataLoaded","useWeb3React","prices","useGetApiPrices","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","includes","isActive","activeFarms","filter","isArchivedPid","farmsList","useCallback","farmsToDisplay","map","quoteTokenPriceUsd","getAddress","toLowerCase","totalLiquidity","getFarmApr","poolWeight","liquidity","farmsStakedMemoized","useMemo","farmsStaked","PageHeader","as","size","color","mb","bold","style","textAlign","target","rel","Page","id"],"mappings":"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","file":"static/js/7.e69da9d2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n// import BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\n// import { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Flex, Text, Button as UiButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport Balance from 'components/Balance'\r\nimport CardBusdValue from 'views/Home/components/CardBusdValue'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport DepositModal from 'views/Farms/components/DepositModal'\r\nimport WithdrawModal from 'views/Farms/components/WithdrawModal'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\n// import CardValue from './CardValue'\r\n\r\nimport './KingdomCard.css'\r\n\r\nconst KCard = styled.div`\r\n  align-self: baseline;\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  /*padding: 6px 12px;*/\r\n  position: relative;\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n`\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 40px;\r\n  margin-top: 0;\r\n  display: block;\r\n  &:last-child {\r\n    align-self: right;\r\n  }\r\n`\r\n\r\nconst Values = styled.div`\r\n  display: inline-flex\r\n`\r\n\r\nconst Brackets = styled.span`\r\n  color: ${(props) => props.theme.colors.text};\r\n`\r\n\r\ninterface KingdomCardProps {\r\n  farm?: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  addLiquidityUrl: string\r\n}\r\n\r\nconst KingdomCard: React.FC<KingdomCardProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue ,\r\n  addLiquidityUrl\r\n}) => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { pid, isTokenOnly, isKingdom, isKingdomToken, lpSymbol } = farm\r\n  const tokenName = lpSymbol.toUpperCase()\r\n  const {\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n  } = farm.userData || {}\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const earningsBusd = rewardBalance ? new BigNumber(rewardBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n\r\n  return (\r\n    <KCard>\r\n      <div className=\"k-card\">\r\n        <div className=\"flex-grid\">\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Balance (Wallet)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={walletBalance}\r\n                decimals={walletBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={walletBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            <Button mt=\"8px\" fullWidth onClick={onPresentDeposit}>Deposit</Button>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Deposit (Staked)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={depositBalance}\r\n                decimals={depositBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={depositBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            <Button mt=\"8px\" fullWidth onClick={onPresentWithdraw}>Withdraw</Button>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Text>CUB Rewards</Text>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={rewardBalance}\r\n                decimals={rewardBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={earningsBusd} /><Brackets>)</Brackets>\r\n            </Values>\r\n            <Button\r\n              disabled={rewardBalance === 0 || pendingTx}\r\n              onClick={async () => {\r\n                setPendingTx(true)\r\n                await onReward()\r\n                setPendingTx(false)\r\n              }}\r\n            >\r\n              Harvest\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </KCard>\r\n  )\r\n}\r\n\r\nexport default KingdomCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button as UiButton, Link, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { DEFAULT_TOKEN_DECIMAL, BASE_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL } from 'config'\r\nimport AprApy from 'views/Farms/components/FarmCard/AprApy'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport KingdomCard from './KingdomCard'\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 36px;\r\n  font-size: 1rem;\r\n  padding: 0 12px;\r\n`\r\n\r\nconst Details = styled.div`\r\n  margin-top: 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  /*padding-left: 0.8rem;\r\n  padding-right: 0.8rem;*/\r\n  /*font-size: 0.95rem*/\r\n`\r\n\r\nconst Detail = styled.div`\r\n  /*display: inline;\r\n  margin-right: 1rem;*/\r\n  /*& div {\r\n    font-family: Arial;\r\n    font-size: 0.8rem;\r\n    padding: 2px;\r\n  }*/\r\n  &:nth-child(1) {\r\n    width: 25%\r\n  }\r\n  &:nth-child(2) {\r\n    width: 33%\r\n  }\r\n`\r\n\r\nconst KDetail = styled.div`\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n`\r\n\r\nconst StyledLinkExternal = styled(Link)`\r\n  font-weight: 400;\r\n`\r\n\r\ninterface KingdomDetailProps {\r\n  farm: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  farmName: string\r\n  oneTokenQuoteValue: BigNumber\r\n  removed?: boolean\r\n  aprApy?: any\r\n}\r\n\r\nconst KingdomDetail: React.FC<KingdomDetailProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue,\r\n  farmName,\r\n  oneTokenQuoteValue,\r\n  removed,\r\n  aprApy,\r\n}) => {\r\n  const tokenValueFormated = oneTokenQuoteValue\r\n    ? `~$${oneTokenQuoteValue.times(DEFAULT_TOKEN_DECIMAL).toFixed(2)}`\r\n    : '-'\r\n\r\n  const { lpSymbol, multiplier, quoteToken, token, isKingdom, lpAddresses, isTokenOnly, isKingdomToken, kingdomContract } = farm\r\n  const lpLabel = lpSymbol && lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const exchangeUrl = isKingdom ? PCS_ADD_LIQUIDITY_URL : BASE_ADD_LIQUIDITY_URL\r\n  const addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = token.address[process.env.REACT_APP_CHAIN_ID]\r\n  const isToken = isTokenOnly || isKingdomToken\r\n  const farmContract= isToken ?\r\n    `https://bscscan.com/token/${tokenAddress}`\r\n    : `https://bscscan.com/token/${lpAddress}`\r\n  const vaultContract = `https://bscscan.com/token/${kingdomContract}`\r\n  const infoAddress = `https://pancakeswap.info/pair/${isTokenOnly ? tokenAddress : lpAddress}`\r\n\r\n  return (\r\n    <KDetail>\r\n      <KingdomCard\r\n        farm={farm}\r\n        walletBalance={walletBalance}\r\n        depositBalance={depositBalance}\r\n        rewardBalance={rewardBalance}\r\n        walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n        depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n      <Details className=\"k-details\">\r\n        <Detail>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>{lpSymbol}:</Text>\r\n            <Text>({tokenValueFormated})</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Multiplier:</Text>\r\n            <Text>{multiplier}</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Type:</Text>\r\n            <Text>Auto-compound</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Farm:</Text>\r\n            <Text>{farmName}</Text>\r\n          </Flex>\r\n        </Detail>\r\n        <Detail>\r\n          <AprApy\r\n            aprApy={aprApy}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n            isDetails\r\n          />\r\n        </Detail>\r\n        <Detail>\r\n          <StyledLinkExternal external href={farmContract}>Farm Contract</StyledLinkExternal>\r\n          <StyledLinkExternal external href={vaultContract}>Kingdom Contract</StyledLinkExternal>\r\n          {!removed && (\r\n            <StyledLinkExternal external href={addLiquidityUrl}>\r\n              {`Get ${lpLabel}`}\r\n            </StyledLinkExternal>\r\n          )}\r\n          <StyledLinkExternal external href={infoAddress}>See Token Info</StyledLinkExternal>\r\n        </Detail>\r\n      </Details>\r\n    </KDetail>\r\n  )\r\n}\r\n\r\nexport default KingdomDetail\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  /background-color: ${({ theme }) => theme.colors.primary};\r\n  opacity: 0.2;*/\r\n  height: 1px;\r\n  margin: 12px auto;\r\n  width: 100%;\r\n`\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Text, Image, Flex } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { provider } from 'web3-core'\r\nimport styled from 'styled-components'\r\n// import { IconButton } from '@pancakeswap-libs/uikit'\r\n// import { Farm } from 'state/types'\r\n// import { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\n// import { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useKingdomAPRAPY from 'hooks/useKingdomAPRAPY'\r\nimport Balance from 'components/Balance'\r\n\r\nimport KingdomDetail from './KingdomDetail'\r\n// import ExpandIcon from './ExpandIcon'\r\nimport Divider from './DividerBlue'\r\n// import LinkButton from './LinkButton'\r\n// import CardValue from './CardValue'\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\nconst K = styled.div`\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);\r\n  padding: 0.4rem 0.8rem;\r\n`\r\n\r\nconst KImage = styled(Image)`\r\n  width: 64px;\r\n`\r\n\r\n// export interface FarmWithStakedValue extends Farm {\r\n//   apy?: BigNumber\r\n// }\r\n\r\ninterface KingdomProps {\r\n  farm: FarmWithStakedValue\r\n  removed?: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst Kingdom: React.FC<KingdomProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const { apr, lpTotalInQuoteToken, kingdomSupply, lpSymbol, pcsPid, multiplier, isKingdom, isKingdomToken, tokenPriceVsQuote, poolWeightPCS, pcsCompounding, lpTokenBalancePCSv2 = 0, lpTotalInQuoteTokenPCS = 0 } = farm\r\n  const farmImage = lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  let aprApy = useKingdomAPRAPY(\r\n    isKingdom,\r\n    isKingdomToken,\r\n    Number(tokenPriceVsQuote),\r\n    poolWeightPCS,\r\n    pcsCompounding,\r\n    apr,\r\n    lpTokenBalancePCSv2,\r\n    lpTotalInQuoteTokenPCS,\r\n  )\r\n  const { dailyAPR, totalAPY } = aprApy\r\n  const { tokenBalance, stakedBalance, earnings } = farm.userData\r\n  const rawTokenBalance = tokenBalance ? getBalanceNumber(new BigNumber(tokenBalance)) : 0\r\n  const rawStakedBalance = stakedBalance ? getBalanceNumber(new BigNumber(stakedBalance)) : 0\r\n  const rawEarningsBalance = earnings ? getBalanceNumber(new BigNumber(earnings)) : 0\r\n\r\n  // to get usd value of liquiidty when not USD quote token\r\n  /* const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n  const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd) */\r\n\r\n  const oneTokenQuoteValue = lpTotalInQuoteToken && kingdomSupply ? new BigNumber(1).times(lpTotalInQuoteToken).div(new BigNumber(kingdomSupply)) : new BigNumber(0)\r\n\r\n  const walletBalanceQuoteValue = tokenBalance ? new BigNumber(tokenBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const totalValueFormated = lpTotalInQuoteToken\r\n    ? `$${Number(lpTotalInQuoteToken).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const farmAPR = apr && apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const farmName = (pcsPid || pcsPid === 0) ? 'Pancake v2' : ''\r\n\r\n  aprApy = { ...aprApy, pcsCompounding: farm.pcsCompounding, farmAPR, apr: farm.apr, cakePrice }\r\n\r\n  return (\r\n    <>\r\n      <Divider />\r\n      <K>\r\n        <div className=\"flex-grid k-grid\">\r\n          <div className=\"col\"><KImage src={`/images/farms/${farmImage}.png`} alt={lpSymbol} width={64} height={64} /></div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\">\r\n              <Text className=\"token\">{lpSymbol}</Text>\r\n            </Flex>\r\n            <Text>{farmName}</Text>\r\n            <Text> TVL {totalValueFormated}</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={totalAPY}\r\n              decimals={2}\r\n              unit=\"%\"\r\n            />\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={dailyAPR}\r\n              decimals={2}\r\n              unit=\"%\"\r\n            />\r\n            <Text>{multiplier}</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawTokenBalance}\r\n              decimals={rawTokenBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawStakedBalance}\r\n              decimals={rawStakedBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawEarningsBalance}\r\n              decimals={rawEarningsBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <ExpandableSectionButton\r\n              onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n              expanded={showExpandableSection}\r\n              onlyArrow\r\n            />\r\n          </div>\r\n        </div>\r\n        <ExpandingWrapper expanded={showExpandableSection}>\r\n          <KingdomDetail\r\n            farm={farm}\r\n            walletBalance={rawTokenBalance}\r\n            depositBalance={rawStakedBalance}\r\n            rewardBalance={rawEarningsBalance}\r\n            walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n            depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n            farmName={farmName}\r\n            oneTokenQuoteValue={oneTokenQuoteValue}\r\n            removed={removed}\r\n            aprApy={aprApy}\r\n          />\r\n        </ExpandingWrapper>\r\n      </K>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdom\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst StyledText = styled(Text)`\r\n  line-height: 1.5;\r\n\r\n`\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, prefix, fontSize = '16px', }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <StyledText fontSize={fontSize} >\r\n      {prefix}{countUp}\r\n    </StyledText>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { Heading, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\n// import { Image, Heading, RowType, Toggle, Text, Button, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n// import FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\n// import { MigrationV2 } from 'components/Banner'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices, useTotalValueKingdoms } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\n// import usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\n// import useI18n from 'hooks/useI18n'\r\n// import { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\n// import { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\n// import PageHeader from 'components/PageHeader'\r\n// import { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\n// import { DEFAULT_TOKEN_DECIMAL } from 'config'\r\n\r\n// import styled from 'styled-components'\r\n// import FlexLayout from 'components/layout/Flex'\r\n\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Kingdom from './components/Kingdom'\r\nimport CardValue from './components/CardValue'\r\nimport './Kingdoms.css'\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Kingdoms: React.FC = () => {\r\n  const totalValue = useTotalValueKingdoms();\r\n  // const tvl = totalValue\r\n  //   ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n  //   : '-'\r\n  // const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  // const TranslateString = useI18n()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  // const [query, setQuery] = useState('')\r\n  const { account } = useWeb3React()\r\n  const prices = useGetApiPrices()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.isKingdom && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, prices, isActive],\r\n  )\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    if (isActive) {\r\n      farmsStaked = farmsList(activeFarms)\r\n    }\r\n    return farmsStaked\r\n  }, [\r\n    activeFarms,\r\n    farmsList,\r\n    isActive,\r\n  ])\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <div className='k-header'>\r\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"10px\">\r\n            Kingdoms\r\n          </Heading>\r\n          <Flex>\r\n            <Text bold fontSize=\"24px\">\r\n              TVL&nbsp;\r\n            </Text>\r\n            <CardValue fontSize=\"24px\" value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          </Flex>\r\n        </div>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Composable Auto-Compounding\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Stake tokens for cross-platform farming plus CUB rewards\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          IMPORTANT: Must use <a target=\"_blank\" rel=\"noreferrer\" href=\"https://exchange.pancakeswap.finance/#/pool\">Pancakeswap V2 Exchange</a> for V2 Kingdom LP tokens until we add a V2 exchange for Cub Finance\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          CertiK Audit is Pending: Our other contracts have been audited by CertiK and Kingdoms are currently under review. Please use at your own discretion until the audit has been published\r\n        </Heading>\r\n        <FeeWrapper>\r\n          <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\r\n            Fees\r\n          </Heading>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Management Fee:</Text>\r\n            <Text>0.9%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Withdrawal Fee:</Text>\r\n            <Text>None</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Fee to CUB Staking Kingdom:</Text>\r\n            <Text>1%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>CUB Burn Rate:</Text>\r\n            <Text>100% of Fees Buyback and Burn CUB</Text>\r\n          </Flex>\r\n        </FeeWrapper>\r\n      </PageHeader>\r\n      <Page className=\"k-container\">\r\n        <div id=\"kingdoms\">\r\n          <div id=\"content-header\" className=\"k-content\">\r\n            <div className=\"flex-grid k-grid\">\r\n              <div className=\"col\" />\r\n              <div className=\"col\">\r\n                <Text>Token</Text>\r\n                <Text>Farm</Text>\r\n                <Text>TVL</Text>\r\n              </div>\r\n              <div className=\"col\">\r\n                <Text>Total APY</Text>\r\n                <Text>Daily APR</Text>\r\n                <Text>Multiplier</Text>\r\n              </div>\r\n              <div className=\"col\">\r\n                <Text>Balance</Text>\r\n                <Text>Deposit</Text>\r\n                <Text>Rewards</Text>\r\n              </div>\r\n              <div className=\"col\" />\r\n            </div>\r\n          </div>\r\n          {farmsStakedMemoized.map((farm) => (\r\n            <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n          ))}\r\n        </div>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdoms\r\n"],"sourceRoot":""}