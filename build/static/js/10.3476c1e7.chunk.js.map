{"version":3,"sources":["components/layout/Flex.tsx","hooks/usePersistState.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","components/UnlockButton.tsx"],"names":["FlexLayout","styled","div","usePersistState","initialValue","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Wrapper","theme","colors","primary","ExpandableSectionButton","onClick","expanded","onlyArrow","extra","useI18n","color","bold","role","defaultProps","ViewMode","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","TranslateString","justifyContent","href","name","DualTag","props","variant","outline","NoFeeTag","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","split","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","tokenName","pid","isKingdom","isTokenOnly","isKingdomToken","onStake","useStake","onUnstake","useUnstake","location","useLocation","displayBalance","useCallback","stakedBalanceNumber","getBalanceNumber","getFullDisplayBalance","toLocaleString","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","eq","disabled","pathname","includes","mr","BalanceAndCompound","HarvestAction","earnings","account","useWeb3React","pendingTx","setPendingTx","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","BigNumber","multipliedBy","toNumber","CardBusdValue","size","marginBottom","a","toString","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","address","token","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","useMemo","getBep20Contract","onApprove","useApprove","handleApprove","console","textTransform","fontSize","pr","mt","UnlockButton","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPR","apr","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","quoteToken","exchangeUrl","pcsVersion","PCS_ADD_LIQUIDITY_URL","BASE_ADD_LIQUIDITY_URL","process","symbol","isCommunityFarm","isCommunity","depositFeeBP","style","display","ApyButton","CardActionsContainer","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Container","text","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","mediaQueries","sm","Farm","image","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","gt","Number","ActionContainer","input","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","current","ml","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","children","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","hasStakeInArchivedFarms","url","useRouteMatch","scale","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","Text","LabelWrapper","FilterContainer","ViewControls","Farms","tokenMode","kingdomMode","path","useFarms","farmsLP","userDataLoaded","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","isInactive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","header","heading","subHeading","PageHeader","textAlign","Page","checked","onChange","length","Select","options","option","marginLeft","SearchInput","event","target","sort","b","exact","renderContent","responsive","useAuth","login","logout","onPresentConnectModal","useWalletModal"],"mappings":"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","file":"static/js/10.3476c1e7.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\r\n  }, [value, localStorageKey])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n  onlyArrow?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded, onlyArrow }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  let extra = null\r\n  if (!onlyArrow)\r\n    extra = (\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n  )\r\n\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      {extra}\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  farmAPR?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\r\n        <Text>{totalValueFormatted}</Text>\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n        </StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst CoreTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = (props) => (\r\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nconst DualTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline {...props}>\r\n    Dual\r\n  </Tag>\r\n)\r\n\r\nconst ManualPoolTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Manual\r\n  </Tag>\r\n)\r\n\r\nconst CompoundingPoolTag = (props) => (\r\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n    Auto\r\n  </Tag>\r\n)\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag, NoFeeTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  depositFee?: number\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  // isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {/* isCommunityFarm ? <CommunityTag /> : <CoreTag /> */}\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  isKingdom?: boolean\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  isKingdom,\r\n  isTokenOnly,\r\n  isKingdomToken,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const location = useLocation()\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button onClick={onPresentDeposit} disabled={location.pathname.includes('archived')}>\r\n        {TranslateString(999, isTokenOnly || isKingdomToken ? 'Stake Token' : 'Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  isKingdom?: boolean\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, isKingdom }) => {\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalance}\r\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\r\n      </Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 12 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, isKingdomToken, isKingdom, token: { address } } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  // const lpContract = getBep20Contract(lpAddress, web3)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly || isKingdomToken){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress, isKingdomToken])\r\n\r\n  const { onApprove } = useApprove(lpContract, isKingdom)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        isKingdom={isKingdom}\r\n        isTokenOnly={farm.isTokenOnly}\r\n        isKingdomToken={farm.isKingdomToken}\r\n      />\r\n    ) : (\r\n      <Button\r\n        mt=\"8px\"\r\n        width=\"100%\"\r\n        disabled={requestedApproval || location.pathname.includes('archived')}\r\n        onClick={handleApprove}\r\n      >\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          CUB\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} isKingdom={isKingdom} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\n// import Balance from 'components/Balance'\r\n\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n  depositFeeBP?: number\r\n  lpTokenBalancePCS?: number\r\n  lpTotalInQuoteTokenPCS?: number\r\n  poolWeightPCS?: string\r\n  compounding?: number\r\n  kingdomSupply?: string\r\n  quoteTokenPriceUsd?: number\r\n  beltAPR?:string\r\n  beltRate?:string\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted = farm.liquidity && farm.liquidity.toNumber()\r\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CUB'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const exchangeUrl = farm.pcsVersion && farm.pcsVersion > 1 ? PCS_ADD_LIQUIDITY_URL : BASE_ADD_LIQUIDITY_URL\r\n  const addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.token.symbol === 'CUB' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n        depositFee={farm.depositFeeBP}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n        )\r\n      }\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        {\r\n          farm.depositFeeBP ? (\r\n            <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n          ) : (\r\n            '0%'\r\n          )\r\n        }\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          // bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.token.address[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Text, Image } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const TranslateString = useI18n()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {TranslateString(999, 'FARMING')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const TranslateString = useI18n()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && TranslateString(658, 'Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const TranslateString = useI18n()\r\n  const tooltipContent = (\r\n    <div>\r\n      {TranslateString(999, 'The multiplier represents the amount of CUB rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {TranslateString(\r\n        999,\r\n        'For example, if a 1x farm was getting 1 CUB per block, a 40x farm would be getting 40 CUB per block.',\r\n      )}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, 'top-end', 'hover', undefined, undefined, [\r\n    20,\r\n    10,\r\n  ])\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const TranslateString = useI18n()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    TranslateString(999, 'The total value of the funds in this farm’s liquidity pool'),\r\n    'top-end',\r\n    'hover',\r\n    undefined,\r\n    undefined,\r\n    [20, 10],\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = 0\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default abalance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const TranslateString = useI18n()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>CUB </Title>\r\n        <Subtle>{TranslateString(1072, 'EARNED')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  isTokenOnly,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n  const tokenAddress = getAddress(token.address)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  // const lpContract = getBep20Contract(lpAddress, web3)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={location.pathname.includes('archived')}\r\n          >\r\n            {TranslateString(999, isTokenOnly ? 'Stake Token' : 'Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={requestedApproval || location.pathname.includes('archived')}\r\n          onClick={handleApprove}\r\n          variant=\"secondary\"\r\n        >\r\n          {TranslateString(999, 'Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LinkExternal, Text, Flex } from '@pancakeswap-libs/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { NoFeeTag, DualTag } from 'components/Tags'\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const TranslateString = useI18n()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://bscscan.com/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.cubdefi.com/#/add/${liquidityUrlPathParts}`}>\r\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {/* farm.isCommunity ? <CommunityTag /> : <CoreTag /> */}\r\n          {farm.depositFeeBP === 0 ? <NoFeeTag /> : null}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n        {farm.depositFeeBP !== 0 && (\r\n          <Flex justifyContent='flex-start'>\r\n            <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:&nbsp;</Text>\r\n            <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n          </Flex>\r\n        )}\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(736, 'APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const TranslateString = useI18n()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={TranslateString(736, 'APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout\r\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\r\n                      >\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={TranslateString(1072, 'Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(736, 'APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const TranslateString = useI18n()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {TranslateString(999, 'To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n  hasStakeInArchivedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms, hasStakeInArchivedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const TranslateString = useI18n()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(1198, 'Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {TranslateString(388, 'Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n        <NotificationDot show={hasStakeInArchivedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/archived`}>\r\n            {TranslateString(999, 'Discontinued')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\n// import { MigrationV2 } from 'components/Banner'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\n// import { DEFAULT_TOKEN_DECIMAL } from 'config'\r\n// import { useGetStats } from 'hooks/api'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n// import CardValue from '../Home/components/CardValue'\r\n\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\n/* const StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n` */\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n  kingdomMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = ({ tokenMode, kingdomMode }) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const prices = useGetApiPrices()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    // Makes the main scheduled fetching to request archived farms data\r\n    dispatch(setLoadArchivedFarmsData(isArchived))\r\n\r\n    // Immediately request data for archived farms so users don't have to wait\r\n    // 60 seconds for public data and 10 seconds for user data\r\n    if (isArchived) {\r\n      dispatch(fetchFarmsPublicDataAsync())\r\n      if (account) {\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n      }\r\n    }\r\n  }, [isArchived, dispatch, account])\r\n\r\n  // const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, prices, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  let header = TranslateString(674, 'Farms')\r\n  let heading = TranslateString(320, 'Stake LP tokens to earn CUB')\r\n  const subHeading = TranslateString(10000, 'Deposit Fee will be used to buyback CUB and bLEO')\r\n  // let extra = null\r\n  // const data = useGetStats()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  if (tokenMode) {\r\n    header = TranslateString(674, 'Dens')\r\n    heading = TranslateString(10002, 'Stake tokens to earn CUB')\r\n  }\r\n\r\n  const tlvSpacing = '20px'\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"15px\">\r\n          {header}\r\n        </Heading>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n          {heading}\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb={tlvSpacing} style={{ textAlign: 'left' }}>\r\n          {subHeading}\r\n        </Heading>\r\n        <br/>\r\n        {/* extra */}\r\n        <Wrapper>\r\n          <Button size=\"sm\">\r\n            <a href=\"https://docs.cubdefi.com\">Learn More</a>\r\n          </Button>\r\n        </Wrapper>\r\n      </PageHeader>\r\n      {/* <MigrationV2 /> */}\r\n      <Page>\r\n        <ControlContainer>\r\n          {\r\n            !kingdomMode && (\r\n              <ViewControls>\r\n                <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n                <ToggleWrapper>\r\n                  <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n                  <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n                </ToggleWrapper>\r\n                <FarmTabButtons\r\n                  hasStakeInFinishedFarms={stakedInactiveFarms.length > 0}\r\n                  hasStakeInArchivedFarms={stakedArchivedFarms.length > 0}\r\n                />\r\n              </ViewControls>\r\n            )\r\n          }\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Hot',\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <Image src=\"/images/cub/wide.svg\" alt=\"illustration\" width={1352} height={587} responsive />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n"],"sourceRoot":""}