{"version":3,"sources":["utils/getKingdomAPRAPY.ts","components/Balance.tsx","views/Kingdoms/components/KingdomCard.tsx","views/Kingdoms/components/AprApy.tsx","views/Kingdoms/components/KingdomDetail.tsx","views/Kingdoms/components/DividerBlue.tsx","views/Kingdoms/components/Spacer.tsx","views/Kingdoms/components/Kingdom.tsx","views/Kingdoms/components/CardValue.tsx","views/Kingdoms/hooks/useTotalStaked.ts","views/Kingdoms/components/TotalStaked.tsx","views/Kingdoms/Kingdoms.tsx","hooks/useClaim.ts"],"names":["getKingdomAPRAPY","farm","realCakePrice","bakePrice","beltPrice","cubDen","apr","cubAPR","isKingdom","poolWeightPCS","compounding","lpTokenBalancePCS","lpTokenBalanceMC","lpTotalInQuoteTokenPCS","quoteTokenPriceUsd","quoteToken","busdPrice","altPid","farmType","beltAPR","totalLiquidity","BigNumber","lpTotalInQuoteToken","times","getFarmApr","poolWeight","tokenPriceVsQuote","dailyAPR","div","toNumber","farmAPY","totalAPY","totalAPYString","toLocaleString","maximumFractionDigits","pcsApr","newMultiplier","multiplier","lpSymbol","getPoolApr","Number","token","getBalanceNumber","DEFAULT_TOKEN_DECIMAL","parseFloat","farmTokenPrice","Balance","value","fontSize","color","decimals","isDisabled","unit","bold","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultProps","KCard","styled","props","theme","card","background","Button","UiButton","Values","Brackets","span","colors","text","KingdomCard","walletBalance","depositBalance","rewardBalance","walletBalanceQuoteValue","depositBalanceQuoteValue","addLiquidityUrl","account","cakePrice","location","useLocation","bnbPrice","useBusdPriceFromLpSymbol","useState","requestedApproval","setRequestedApproval","pendingTx","setPendingTx","pid","isTokenOnly","isKingdomToken","lpAddresses","address","tokenName","toUpperCase","userData","allowance","allowanceAsString","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","bnbDividends","earningsBusd","multipliedBy","web3","useWeb3","onStake","useStake","onUnstake","useUnstake","onReward","useHarvest","onClaim","useClaim","isApproved","isGreaterThan","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","lpAddress","getAddress","tokenAddress","lpContract","useMemo","getBep20Contract","onApprove","useApprove","handleApprove","useCallback","a","console","error","approvedButton","mt","disabled","pathname","includes","onClick","bnbRewards","amount","bnbRewardsUSD","harvestSection","CardBusdValue","className","justifyContent","fullWidth","AprApy","aprApy","lpLabel","TranslateString","useI18n","farmAPR","toFixed","alignItems","style","display","ApyButton","height","width","Details","Detail","KDetail","StyledLinkExternal","Link","CubKingdom","KingdomDetail","farmName","oneTokenQuoteValue","removed","tokenValueFormated","toString","kingdomContract","replace","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","process","farmContract","vaultContract","infoAddress","exchangeUrl","PCS_ADD_LIQUIDITY_URL","buyTokenUrl","BASE_EXCHANGE_URL","BAKERY_ADD_LIQUIDITY_URL","BELT_EXCHANGE","displayMultiplier","external","href","symbol","primary","ExpandingWrapper","expanded","K","RainbowLight","keyframes","StyledCardAccent","KImage","Image","KMain","Kingdom","updateTotalStake","showExpandableSection","setShowExpandableSection","tokenPriceString","farmImage","split","toLocaleLowerCase","earnings","rawTokenBalance","rawStakedBalance","rawEarningsBalance","tokenPrice","totalValueFormated","undefined","Spacer","role","src","alt","StyledText","Text","CardValue","prefix","useCountUp","countUp","update","updateValue","useTotalStaked","farms","rawTotalCUB","BIG_ZERO","rawTotalStakedUSD","rawTotalAPY","rawTotalDailyAPR","count","forEach","plus","stakedUSD","cubEarned","Wrapper","TotalStaked","totalStakeUSD","totalCub","totalCubUSD","totalDailyAPR","avgAPY","avgDaily","stakedUSDFormatted","dailyFormatted","cubUSDFormatted","ControlContainer","mediaQueries","sm","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","FeeWrapper","Kingdoms","totalValue","useTotalValueKingdoms","farmsLP","useFarms","data","query","setQuery","useWeb3React","sortOption","setSortOption","prices","useGetApiPrices","usePriceCakeBusd","useFarmFromPid","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","isActive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","stakedOnlyFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","toLowerCase","liquidity","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","totalStake","setTotalStake","PageHeader","as","size","mb","textAlign","Page","checked","onChange","scale","Select","options","label","option","marginLeft","SearchInput","event","target","id","ref","user","nonce","signature","claim","txHash"],"mappings":"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","file":"static/js/7.aed19e63.chunk.js","sourcesContent":["import { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { getPoolApr, getFarmApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\n\r\nconst getKingdomAPRAPY = (\r\n  farm: FarmWithStakedValue,\r\n  realCakePrice: BigNumber,\r\n  bakePrice: BigNumber,\r\n  beltPrice: BigNumber,\r\n  cubDen: any,\r\n) => {\r\n  const { apr: cubAPR, isKingdom, poolWeightPCS, compounding, lpTokenBalancePCS: lpTokenBalanceMC = 0, lpTotalInQuoteTokenPCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, altPid, farmType, beltAPR } = farm\r\n\r\n  let apr:number\r\n  let data = null\r\n\r\n  if (altPid === 12) {\r\n    const totalLiquidity = new BigNumber(cubDen.lpTotalInQuoteToken).times(cubDen.quoteToken.busdPrice)\r\n    apr = getFarmApr(cubDen.poolWeight, cubDen.tokenPriceVsQuote, totalLiquidity)\r\n\r\n    const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\r\n\r\n    const farmAPY = ((((apr / 100 / compounding) + 1) ** compounding) - 1) * 100\r\n    const totalAPY = farmAPY\r\n    const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n    data = { pcsApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString, newMultiplier: cubDen.multiplier }\r\n\r\n    return data\r\n  }\r\n// if (farm.lpSymbol === 'BNB-BUSD LP') {\r\n//   console.log('farm',farm.lpSymbol)\r\n//   console.log('poolWeightPCS',poolWeightPCS)\r\n//   console.log('cakePrice',realCakePrice.toNumber())\r\n//   console.log('totalLiquidity',new BigNumber(lpTotalInQuoteTokenPCS).times(quoteTokenPriceUsd).toNumber())\r\n// }\r\n  if (farm.lpSymbol === 'CAKE') {\r\n    apr = getPoolApr(\r\n      Number(farm.token.busdPrice),\r\n      Number(farm.token.busdPrice),\r\n      getBalanceNumber(new BigNumber(lpTokenBalanceMC).times(DEFAULT_TOKEN_DECIMAL), 18),\r\n      parseFloat('10') // CAKE is 10\r\n    )\r\n  } else {\r\n    const totalLiquidity = new BigNumber(lpTotalInQuoteTokenPCS).times(quoteTokenPriceUsd)\r\n\r\n    let farmTokenPrice = realCakePrice\r\n    if (farmType === 'Bakery') farmTokenPrice = bakePrice\r\n    else if (farmType === 'Belt') farmTokenPrice = beltPrice\r\n\r\n    if (farmType === 'Belt') apr = Number(beltAPR)\r\n    else apr = getFarmApr(new BigNumber(poolWeightPCS), farmTokenPrice, totalLiquidity, isKingdom, farmType)\r\n  }\r\n\r\n  const dailyAPR = apr ? new BigNumber(apr).div(new BigNumber(365)).toNumber() : new BigNumber(0).toNumber()\r\n\r\n  const farmAPY = ((((apr / 100 / compounding) + 1) ** compounding) - 1) * 100\r\n  const totalAPY = cubAPR ? cubAPR + farmAPY : farmAPY\r\n  const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  data = { pcsApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString }\r\n\r\n  return data\r\n}\r\n\r\nexport default getKingdomAPRAPY\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface TextProps {\r\n  isDisabled?: boolean\r\n  fontSize?: string\r\n  color?: string\r\n  bold?: boolean\r\n}\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value?: number\r\n  decimals?: number\r\n  unit?: string\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {value && unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nBalance.defaultProps = {\r\n  fontSize: '32px',\r\n  isDisabled: false,\r\n  color: 'text',\r\n  decimals: 3,\r\n}\r\n\r\nexport default Balance\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { usePriceCakeBusd, useBusdPriceFromLpSymbol } from 'state/hooks'\r\nimport { Flex, Text, Button as UiButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport Balance from 'components/Balance'\r\nimport CardBusdValue from 'views/Home/components/CardBusdValue'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport DepositModal from 'views/Farms/components/DepositModal'\r\nimport WithdrawModal from 'views/Farms/components/WithdrawModal'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useClaim} from 'hooks/useClaim'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport './KingdomCard.css'\r\n\r\nconst KCard = styled.div`\r\n  align-self: baseline;\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  /*padding: 6px 12px;*/\r\n  position: relative;\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n`\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 40px;\r\n  margin-top: 0.3rem;\r\n  display: block;\r\n`\r\n\r\nconst Values = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Brackets = styled.span`\r\n  color: ${(props) => props.theme.colors.text};\r\n`\r\n\r\ninterface KingdomCardProps {\r\n  farm?: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  addLiquidityUrl: string\r\n  account?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst KingdomCard: React.FC<KingdomCardProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue ,\r\n  addLiquidityUrl,\r\n  account,\r\n  cakePrice,\r\n}) => {\r\n  const location = useLocation()\r\n  const bnbPrice = useBusdPriceFromLpSymbol('BNB-BUSD LP')\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { pid, isTokenOnly, isKingdom, isKingdomToken, lpSymbol, lpAddresses, token: { address } } = farm\r\n\r\n  const tokenName = lpSymbol.toUpperCase()\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    bnbDividends = {},\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  // const cakePrice = usePriceCakeBusd()\r\n  const earningsBusd = rewardBalance ? new BigNumber(rewardBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  const web3 = useWeb3()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n  const { onClaim } = useClaim(bnbDividends)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly || isKingdomToken){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress, isKingdomToken])\r\n\r\n  const { onApprove } = useApprove(lpContract, isKingdom)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const approvedButton = (\r\n    <Button\r\n      mt=\"8px\"\r\n      disabled={requestedApproval || location.pathname.includes('archived')}\r\n      onClick={handleApprove}\r\n    >\r\n      Approve Contract\r\n    </Button>\r\n  )\r\n\r\n  const bnbRewards = bnbDividends && bnbDividends.amount ? bnbDividends.amount : 0\r\n  const bnbRewardsUSD = bnbRewards ? new BigNumber(bnbRewards).multipliedBy(bnbPrice).toNumber() : 0\r\n\r\n  let harvestSection = null\r\n  if (farm.lpSymbol === 'CUB') {\r\n    harvestSection = (\r\n      <>\r\n        <Text>BNB Dividends</Text>\r\n        <Values>\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            value={bnbRewards}\r\n            decimals={bnbRewards ? 3 : 2}\r\n            unit=\"\"\r\n          />\r\n          &nbsp;<Brackets>(</Brackets><CardBusdValue value={bnbRewardsUSD} /><Brackets>)</Brackets>\r\n        </Values>\r\n        <Button\r\n          disabled={bnbRewards === 0 || pendingTx || !isApproved}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onClaim()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          Claim\r\n        </Button>\r\n      </>\r\n    )\r\n  } else {\r\n    harvestSection = (\r\n      <>\r\n        <Text>CUB Rewards</Text>\r\n        <Values>\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            value={rewardBalance}\r\n            decimals={rewardBalance ? 3 : 2}\r\n            unit=\"\"\r\n          />\r\n          &nbsp;<Brackets>(</Brackets><CardBusdValue value={earningsBusd} /><Brackets>)</Brackets>\r\n        </Values>\r\n        <Button\r\n          disabled={rewardBalance === 0 || pendingTx || !isApproved}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          Harvest\r\n        </Button>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <KCard>\r\n      <div className=\"k-card\">\r\n        <div className=\"flex-grid\">\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Balance (Wallet)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={walletBalance}\r\n                decimals={walletBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={walletBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            { isApproved ? (\r\n              <Button mt=\"8px\" fullWidth onClick={onPresentDeposit}>Deposit</Button>\r\n            ) : (\r\n              approvedButton\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Deposit (Staked)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={depositBalance}\r\n                decimals={depositBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={depositBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            { isApproved ? (\r\n              <Button mt=\"8px\" fullWidth onClick={onPresentWithdraw}>Withdraw</Button>\r\n            ) : (\r\n              approvedButton\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            {harvestSection}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </KCard>\r\n  )\r\n}\r\n\r\nexport default KingdomCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, Flex, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Balance from 'components/Balance'\r\n\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\n\r\nexport interface AprApyProps {\r\n  aprApy: any\r\n  lpLabel: string\r\n  addLiquidityUrl: string\r\n}\r\n\r\nconst AprApy: React.FC<AprApyProps> = ({ aprApy,  lpLabel, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const { farmAPR, apr, compounding, pcsApr, dailyAPR, farmAPY, totalAPYString, cakePrice } = aprApy\r\n\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"warning\">{TranslateString(354, 'Total APY')}:</Text>\r\n        <Text bold color=\"warning\">{totalAPYString}%</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Farm APR')}:</Text>\r\n        <Text>{`${new BigNumber(pcsApr).toFixed(2)}% (${new BigNumber(dailyAPR).toFixed(3)}%)`}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Compounds / year')}:</Text>\r\n        <Text>~{compounding}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n        <Balance\r\n          fontSize=\"16px\"\r\n          value={farmAPY}\r\n          decimals={2}\r\n          unit=\"%\"\r\n        />\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text>{TranslateString(736, 'CUB APR')}:</Text>\r\n        <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n          {apr ? (\r\n            <>\r\n              <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={apr} />\r\n              {farmAPR || apr.toLocaleString('en-US', { maximumFractionDigits: 2 })}%\r\n            </>\r\n          ) : (\r\n            <Skeleton height={24} width={80} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AprApy\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button as UiButton, Link, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { DEFAULT_TOKEN_DECIMAL, BAKERY_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BELT_EXCHANGE } from 'config'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport KingdomCard from './KingdomCard'\r\nimport AprApy from './AprApy'\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 36px;\r\n  font-size: 1rem;\r\n  padding: 0 12px;\r\n`\r\n\r\nconst Details = styled.div`\r\n  margin-top: 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  /*padding-left: 0.8rem;\r\n  padding-right: 0.8rem;*/\r\n  /*font-size: 0.95rem*/\r\n`\r\n\r\nconst Detail = styled.div`\r\n  /*display: inline;\r\n  margin-right: 1rem;*/\r\n  /*& div {\r\n    font-family: Arial;\r\n    font-size: 0.8rem;\r\n    padding: 2px;\r\n  }*/\r\n  &:nth-child(1) {\r\n    width: 25%\r\n  }\r\n  &:nth-child(2) {\r\n    width: 33%\r\n  }\r\n`\r\n\r\nconst KDetail = styled.div`\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n`\r\n\r\nconst StyledLinkExternal = styled(Link)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst CubKingdom = styled.div`\r\n  color: ${(props) => props.theme.colors.text};\r\n  margin-top: 0.2rem;\r\n`\r\n\r\ninterface KingdomDetailProps {\r\n  farm: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  farmName: string\r\n  oneTokenQuoteValue: BigNumber\r\n  removed?: boolean\r\n  aprApy?: any\r\n  account?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst KingdomDetail: React.FC<KingdomDetailProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue,\r\n  farmName,\r\n  oneTokenQuoteValue,\r\n  removed,\r\n  aprApy,\r\n  account,\r\n  cakePrice,\r\n}) => {\r\n  const tokenValueFormated = oneTokenQuoteValue && oneTokenQuoteValue.toString() !== 'NaN'\r\n    ? `~$${oneTokenQuoteValue.times(DEFAULT_TOKEN_DECIMAL).toFixed(2)}`\r\n    : '-'\r\n  const { lpSymbol, multiplier, quoteToken, token, lpAddresses, isTokenOnly, isKingdomToken, kingdomContract, altPid } = farm\r\n  const lpLabel = lpSymbol && lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = token.address[process.env.REACT_APP_CHAIN_ID]\r\n\r\n  const isToken = isTokenOnly || isKingdomToken\r\n  const farmContract= isToken ?\r\n    `https://bscscan.com/token/${tokenAddress}`\r\n    : `https://bscscan.com/token/${lpAddress}`\r\n  const vaultContract = `https://bscscan.com/token/${kingdomContract}`\r\n  let infoAddress = `https://pancakeswap.info/pair/${isTokenOnly ? tokenAddress : lpAddress}`\r\n\r\n  let exchangeUrl = PCS_ADD_LIQUIDITY_URL\r\n  let buyTokenUrl = `${BASE_EXCHANGE_URL}/#/swap`\r\n  let addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  if (farm.farmType === 'Bakery') {\r\n    exchangeUrl = BAKERY_ADD_LIQUIDITY_URL\r\n    addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n    infoAddress = `https://info.bakeryswap.org/#/pair/${isTokenOnly ? tokenAddress : lpAddress}`\r\n  }\r\n  else if (farm.farmType === 'Belt') {\r\n    exchangeUrl = BELT_EXCHANGE\r\n    addLiquidityUrl = exchangeUrl\r\n    buyTokenUrl = exchangeUrl\r\n    infoAddress = exchangeUrl\r\n  }\r\n\r\n  let displayMultiplier = multiplier\r\n  if (aprApy.newMultiplier) displayMultiplier = `${aprApy.newMultiplier}*`\r\n  // else if (multiplier) displayMultiplier = `${multiplier.substr(0,4)}X`\r\n\r\n  return (\r\n    <KDetail>\r\n      <KingdomCard\r\n        farm={farm}\r\n        walletBalance={walletBalance}\r\n        depositBalance={depositBalance}\r\n        rewardBalance={rewardBalance}\r\n        walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n        depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        account={account}\r\n        cakePrice={cakePrice}\r\n      />\r\n      <Details className=\"k-details\">\r\n        <Detail>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>{lpSymbol}:</Text>\r\n            <Text>({tokenValueFormated})</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Multiplier:</Text>\r\n            <Text>{displayMultiplier}</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Type:</Text>\r\n            <Text>Auto-compound</Text>\r\n          </Flex>\r\n          {altPid === 12 ? (\r\n            <CubKingdom>*CUB Kingdom multiplier coexists with CUB Den multiplier</CubKingdom>\r\n          ) : (\r\n            <Flex justifyContent=\"space-between\">\r\n              <Text>Farm:</Text>\r\n              <Text>{farmName}</Text>\r\n            </Flex>\r\n          )}\r\n        </Detail>\r\n        <Detail>\r\n          <AprApy\r\n            aprApy={aprApy}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        </Detail>\r\n        <Detail>\r\n          <StyledLinkExternal external href={farmContract}>Farm Contract</StyledLinkExternal>\r\n          <StyledLinkExternal external href={vaultContract}>Kingdom Contract</StyledLinkExternal>\r\n          {!removed && (\r\n            <>\r\n              <StyledLinkExternal external href={buyTokenUrl}>\r\n                {`Buy ${token.symbol}`}\r\n              </StyledLinkExternal>\r\n              <StyledLinkExternal external href={addLiquidityUrl}>\r\n                Add Liquidity\r\n              </StyledLinkExternal>\r\n            </>\r\n          )}\r\n          <StyledLinkExternal external href={infoAddress}>See Token Info</StyledLinkExternal>\r\n        </Detail>\r\n      </Details>\r\n    </KDetail>\r\n  )\r\n}\r\n\r\nexport default KingdomDetail\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n  opacity: 0.2;\r\n  height: 1px;\r\n  margin: 12px auto;\r\n  width: 100%;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  height: 1px;\r\n  margin: 12px auto;\r\n  width: 100%;\r\n`\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport { Text, Image, Flex } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getKingdomAPRAPY from 'utils/getKingdomAPRAPY'\r\nimport Balance from 'components/Balance'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport KingdomDetail from './KingdomDetail'\r\nimport Divider from './DividerBlue'\r\nimport Spacer from './Spacer'\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\nconst K = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 0.4rem 0.8rem;\r\n  position: relative;\r\n`\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 8px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst KImage = styled(Image)`\r\n  width: 64px;\r\n`\r\n\r\nconst KMain = styled.div`\r\n  cursor: pointer;\r\n`\r\n\r\ninterface KingdomProps {\r\n  farm: FarmWithStakedValue\r\n  removed?: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n  updateTotalStake?: any\r\n  bakePrice?: BigNumber\r\n  beltPrice?: BigNumber\r\n  cubDen?: any\r\n  realCakePrice?: BigNumber\r\n}\r\n\r\nconst Kingdom: React.FC<KingdomProps> = ({ farm, removed, cakePrice, account, updateTotalStake, bakePrice, beltPrice, cubDen, realCakePrice}) => {\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const { apr, lpTotalInQuoteToken, lpSymbol, lpTokenBalancePCS = 0, lpTotalInQuoteTokenPCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, altPid, farmType, token: { busdPrice: tokenPriceString } } = farm\r\n  const farmImage = lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  let aprApy = getKingdomAPRAPY(farm, realCakePrice, bakePrice, beltPrice, cubDen)\r\n\r\n  const { dailyAPR, totalAPY, pcsApr } = aprApy\r\n  const { tokenBalance, stakedBalance, earnings } = farm.userData\r\n\r\n  const rawTokenBalance = tokenBalance ? getBalanceNumber(new BigNumber(tokenBalance)) : 0\r\n  const rawStakedBalance = stakedBalance ? getBalanceNumber(new BigNumber(stakedBalance)) : 0\r\n  const rawEarningsBalance = earnings ? getBalanceNumber(new BigNumber(earnings)) : 0\r\n  const tokenPrice = new BigNumber(tokenPriceString);\r\n  let oneTokenQuoteValue = new BigNumber(0)\r\n\r\n  if (!farm.isKingdomToken)\r\n    oneTokenQuoteValue = lpTotalInQuoteTokenPCS ? new BigNumber(lpTotalInQuoteTokenPCS).div(new BigNumber(lpTokenBalancePCS)).times(quoteTokenPriceUsd).div(DEFAULT_TOKEN_DECIMAL) : new BigNumber(0)\r\n  else oneTokenQuoteValue = farm.farmType !== 'Belt' ? tokenPrice.div(DEFAULT_TOKEN_DECIMAL) : new BigNumber(farm.token.busdPrice).div(DEFAULT_TOKEN_DECIMAL)\r\n\r\n  const walletBalanceQuoteValue = tokenBalance ? new BigNumber(tokenBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const totalValueFormated = lpTotalInQuoteToken\r\n    ? `$${Number(new BigNumber(lpTotalInQuoteToken).times(quoteTokenPriceUsd)).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const farmAPR = apr && apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  aprApy = { ...aprApy, compounding: farm.compounding, farmAPR, apr: altPid === 12 ? pcsApr : farm.apr, cakePrice, quoteTokenPriceUsd: Number(quoteTokenPriceUsd), lpTotalInQuoteToken }\r\n\r\n  return (\r\n    <>\r\n      <Spacer />\r\n      <K>\r\n        {farm.token.symbol === 'CUB' && <StyledCardAccent />}\r\n        <KMain role=\"presentation\" className=\"flex-grid k-grid\" onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n      >\r\n          <div className=\"col\"><KImage src={`/images/farms/${farmImage}.png`} alt={lpSymbol} width={64} height={64} /></div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\">\r\n              <Text className=\"token\">{lpSymbol}</Text>\r\n            </Flex>\r\n            <Text>Uses: {farmType}</Text>\r\n            <Text>TVL {totalValueFormated}</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawTokenBalance}\r\n              decimals={rawTokenBalance ? 2 : 1}\r\n              unit=\"\"\r\n              color={rawTokenBalance ? \"warning\" : \"text\"}\r\n            />\r\n            <Text>Balance</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawStakedBalance}\r\n              decimals={rawStakedBalance ? 2 : 1}\r\n              unit=\"\"\r\n              color={rawStakedBalance > 0.0000001 ? \"warning\" : \"text\"}\r\n            />\r\n            <Text>Deposited</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawEarningsBalance}\r\n              decimals={rawEarningsBalance ? 2 : 1}\r\n              unit=\"\"\r\n              color={rawEarningsBalance ? \"warning\" : \"text\"}\r\n            />\r\n            <Text>Rewards</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={totalAPY.toString() !== 'NaN' ? totalAPY : 0}\r\n              decimals={2}\r\n              unit=\"%\"\r\n              color=\"warning\"\r\n            />\r\n            <Text color=\"warning\">APY</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={dailyAPR}\r\n              decimals={2}\r\n              unit=\"%\"\r\n            />\r\n            <Text>Daily</Text>\r\n          </div>\r\n        </KMain>\r\n        <ExpandingWrapper expanded={showExpandableSection}>\r\n          <Divider />\r\n          <KingdomDetail\r\n            farm={farm}\r\n            walletBalance={rawTokenBalance}\r\n            depositBalance={rawStakedBalance}\r\n            rewardBalance={rawEarningsBalance}\r\n            walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n            depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n            farmName={farmType}\r\n            oneTokenQuoteValue={oneTokenQuoteValue}\r\n            removed={removed}\r\n            aprApy={aprApy}\r\n            account={account}\r\n            cakePrice={cakePrice}\r\n          />\r\n        </ExpandingWrapper>\r\n      </K>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdom\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst StyledText = styled(Text)`\r\n  line-height: 1.5;\r\n\r\n`\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, prefix, fontSize = '16px', }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <StyledText fontSize={fontSize} >\r\n      {prefix}{countUp}\r\n    </StyledText>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","// import { DEFAULT_TOKEN_DECIMAL,  } from 'config'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n// import { useSelector } from 'react-redux'\r\n// import { getPoolApr, getFarmApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BigNumber from 'bignumber.js'\r\nimport getKingdomAPRAPY from 'utils/getKingdomAPRAPY'\r\n\r\nconst useTotalStaked = (farms: any, cakePrice: BigNumber, bakePrice: BigNumber, beltPrice: BigNumber, cubDen: any) => {\r\n  let rawTotalCUB = BIG_ZERO\r\n  let rawTotalStakedUSD = BIG_ZERO\r\n  let rawTotalAPY = 0\r\n  let rawTotalDailyAPR = 0\r\n  let count = 0\r\n  farms.forEach((farm) => {\r\n    if (farm.isKingdom) {\r\n      const { userData, lpTotalInQuoteTokenPCS = 0, lpTokenBalancePCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, token: { busdPrice: tokenPrice }} = farm\r\n      const { stakedBalance, earnings } = userData\r\n\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const aprApy = getKingdomAPRAPY(farm, cakePrice, bakePrice, beltPrice, cubDen)\r\n\r\n      if (stakedBalance > '1') {\r\n        let oneTokenQuoteValue = BIG_ZERO\r\n\r\n        if (!farm.isKingdomToken)\r\n          oneTokenQuoteValue = lpTotalInQuoteTokenPCS ? new BigNumber(lpTotalInQuoteTokenPCS).div(new BigNumber(lpTokenBalancePCS)).times(quoteTokenPriceUsd) : new BigNumber(0)\r\n        else oneTokenQuoteValue = farm.farmType !== 'Belt' ? tokenPrice : new BigNumber(farm.token.busdPrice)\r\n\r\n        const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue) : new BigNumber(0)\r\n\r\n        rawTotalStakedUSD = rawTotalStakedUSD.plus(new BigNumber(depositBalanceQuoteValue))\r\n\r\n        rawTotalAPY = +rawTotalAPY + +aprApy.totalAPY\r\n        rawTotalDailyAPR = +rawTotalDailyAPR + +aprApy.dailyAPR\r\n\r\n        count += 1\r\n      }\r\n\r\n      if (earnings !== '0') rawTotalCUB = rawTotalCUB.plus(new BigNumber(earnings))\r\n    }\r\n  })\r\n\r\n  const stakedUSD = rawTotalStakedUSD !== BIG_ZERO ? getBalanceNumber(rawTotalStakedUSD) : 0\r\n\r\n  const cubEarned = rawTotalCUB !== BIG_ZERO ? getBalanceNumber(rawTotalCUB) : 0\r\n\r\n  const cubBusd = cubEarned ? new BigNumber(cubEarned).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return [stakedUSD, cubEarned, cubBusd, rawTotalAPY, rawTotalDailyAPR, count]\r\n}\r\n\r\nexport default useTotalStaked\r\n","import React, { useEffect, useCallback, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport Balance from 'components/Balance'\r\nimport { Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport useTotalStaked from '../hooks/useTotalStaked';\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 700px;\r\n  margin: 0 auto;\r\n`\r\n\r\ninterface TotalStakedProps {\r\n  farms: any\r\n  cakePrice: BigNumber\r\n  totalStake?: any\r\n  bakePrice?: BigNumber\r\n  beltPrice?: BigNumber\r\n  cubDen?: any\r\n}\r\n\r\nconst TotalStaked: React.FC<TotalStakedProps> = ({ farms, cakePrice, bakePrice, beltPrice, cubDen }) => {\r\n  const [totalStakeUSD, totalCub, totalCubUSD, totalAPY, totalDailyAPR, count] = useTotalStaked(farms, cakePrice, bakePrice, beltPrice, cubDen);\r\n\r\n  const avgAPY = totalAPY.toString() !== 'NaN' && totalAPY !== 0 ? totalAPY / count : 0\r\n  const avgDaily = totalDailyAPR ? totalDailyAPR / count : 0\r\n\r\n  const stakedUSDFormatted = totalStakeUSD ?  `$${totalStakeUSD.toLocaleString('en-US', { maximumFractionDigits: 2 })}`\r\n    : '0.00'\r\n  const dailyFormatted = avgDaily ?  `${avgDaily.toLocaleString('en-US', { maximumFractionDigits: 2 })}%`\r\n      : '0.00'\r\n  const cubUSDFormatted = totalCubUSD ?  `$${totalCubUSD.toLocaleString('en-US', { maximumFractionDigits: 2 })}`\r\n        : '0.00'\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"flex-start\">\r\n        <div>\r\n          <Text>Total Deposit</Text>\r\n          <Text fontSize=\"18px\" color=\"textSubtle\">{stakedUSDFormatted}</Text>\r\n          <Text>{count} assets</Text>\r\n        </div>\r\n        <div>\r\n          <Text>Average APY</Text>\r\n          <Balance\r\n            fontSize=\"18px\"\r\n            value={avgAPY}\r\n            decimals={avgAPY ? 2 : 1}\r\n            unit=\"%\"\r\n            color=\"textSubtle\"\r\n          />\r\n          <Text>Daily {dailyFormatted}</Text>\r\n        </div>\r\n        <div>\r\n          <Text>CUB Rewards</Text>\r\n          <Balance\r\n            fontSize=\"18px\"\r\n            value={totalCub}\r\n            decimals={totalCub ? 2 : 1}\r\n            unit=\"\"\r\n            color=\"textSubtle\"\r\n          />\r\n          <Text>{cubUSDFormatted}</Text>\r\n        </div>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TotalStaked\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Toggle, Text, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n// import FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\n// import { MigrationV2 } from 'components/Banner'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices, useTotalValueKingdoms, useBusdPriceFromLpSymbol, useFarmFromPid } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\n// import usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\n// import { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\n// import { DEFAULT_TOKEN_DECIMAL } from 'config'\r\n// import { useGetStats } from 'hooks/api'\r\n// import FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\n// import Table from './components/FarmTable/FarmTable'\r\n// import FarmTabButtons from 'views/Farms/components/FarmTabButtons'\r\nimport SearchInput from 'views/Farms/components/SearchInput'\r\n// import { RowProps } from './components/FarmTable/Row'\r\n// import ToggleView from './components/ToggleView/ToggleView'\r\n// import { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Kingdom from './components/Kingdom'\r\nimport CardValue from './components/CardValue'\r\nimport TotalStaked from './components/TotalStaked'\r\nimport './Kingdoms.css'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 20\r\n\r\nconst Kingdoms: React.FC = () => {\r\n  const totalValue = useTotalValueKingdoms();\r\n  // const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { data: farmsLP } = useFarms()\r\n  const [query, setQuery] = useState('')\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const prices = useGetApiPrices()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const realCakePrice = useBusdPriceFromLpSymbol('CAKE') || new BigNumber(0)\r\n  const bakePrice = useBusdPriceFromLpSymbol('BAKE-BNB LP')\r\n  const beltPrice = useBusdPriceFromLpSymbol('BELT-BNB LP')\r\n  const cubDen = useFarmFromPid(12)\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  // const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    // Makes the main scheduled fetching to request archived farms data\r\n    dispatch(setLoadArchivedFarmsData(isArchived))\r\n\r\n    // Immediately request data for archived farms so users don't have to wait\r\n    // 60 seconds for public data and 10 seconds for user data\r\n    if (isArchived) {\r\n      dispatch(fetchFarmsPublicDataAsync())\r\n      if (account) {\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n      }\r\n    }\r\n  }, [isArchived, dispatch, account])\r\n\r\n  const activeFarms = farmsLP.filter(farm => {\r\n    return farm.isKingdom && !isArchivedPid(farm.pid)\r\n  })\r\n  // const inactiveFarms = farmsLP.filter(farm => {\r\n  //   return farm.isKingdom && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n  // })\r\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // const stakedInactiveFarms = inactiveFarms.filter(\r\n  //   (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  // )\r\n  //\r\n  // const stakedArchivedFarms = archivedFarms.filter(\r\n  //   (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  // )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, prices, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    /* if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    } */\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    isActive,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  /* const renderContent = (): JSX.Element => {\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  } */\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const [totalStake, setTotalStake] = useState({})\r\n  const updateTotalStake = (lpSymbol: string, depositBalanceQuoteValue: number, totalAPY: number, dailyAPR: number) => {\r\n    if (totalStake[lpSymbol]) {\r\n      setTotalStake({\r\n        ...totalStake,\r\n        [lpSymbol]: {\r\n          depositBalanceQuoteValue: +totalStake[lpSymbol].depositBalanceQuoteValue + +depositBalanceQuoteValue,\r\n          totalAPY: +totalStake[lpSymbol].totalAPY + +totalAPY,\r\n          dailyAPR: +totalStake[lpSymbol].dailyAPR + +dailyAPR,\r\n        },\r\n      })\r\n    } else {\r\n      setTotalStake({\r\n        ...totalStake,\r\n        [lpSymbol]: {\r\n          depositBalanceQuoteValue,\r\n          totalAPY,\r\n          dailyAPR,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <div className='k-header'>\r\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"10px\">\r\n            Kingdoms\r\n          </Heading>\r\n          <Flex>\r\n            <Text bold fontSize=\"24px\">\r\n              TVL&nbsp;\r\n            </Text>\r\n            <CardValue fontSize=\"24px\" value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          </Flex>\r\n        </div>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Composable Auto-Compounding\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Stake tokens for cross-platform farming plus CUB rewards\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          IMPORTANT: Must use the host farm exchange (eg. PCS, Bakery) for Kingdom LP tokens\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          CertiK Audit is Pending: Our other contracts have been audited by CertiK and Kingdoms are currently under review. Please use at your own discretion until the audit has been published\r\n        </Heading>\r\n        <FeeWrapper>\r\n          <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\r\n            Fees\r\n          </Heading>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Fee for CUB Staking Kingdom BNB Dividends:</Text>\r\n            <Text>3%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Management Fee:</Text>\r\n            <Text>7%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>CUB Burn Rate:</Text>\r\n            <Text>100% of Fees Buyback and Burn CUB</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Withdrawal Fee:</Text>\r\n            <Text>None</Text>\r\n          </Flex>\r\n        </FeeWrapper>\r\n      </PageHeader>\r\n      <Page className=\"k-container\">\r\n        <TotalStaked farms={farmsStakedMemoized} cakePrice={cakePrice} totalStake={totalStake} bakePrice={bakePrice} beltPrice={beltPrice} cubDen={cubDen} />\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text>Staked only</Text>\r\n            </ToggleWrapper>\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Default',\r\n                    value: 'default',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        <div id=\"kingdoms\">\r\n          {farmsStakedMemoized.map((farm) => (\r\n            <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} updateTotalStake={updateTotalStake} bakePrice={bakePrice} beltPrice={beltPrice} cubDen={cubDen} realCakePrice={realCakePrice} />\r\n          ))}\r\n        </div>\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdoms\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { claim } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nexport const useClaim = (bnbDividends: any) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { user = '', amount = '', nonce = '', signature = '' } = bnbDividends\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim('0xa22efc88F3Eb641D881D0807dc8E305d71920cAB', account, user, amount, nonce, signature)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [dispatch, account, user, amount, nonce, signature])\r\n\r\n  return { onClaim: handleClaim }\r\n}\r\n\r\nexport default useClaim\r\n"],"sourceRoot":""}