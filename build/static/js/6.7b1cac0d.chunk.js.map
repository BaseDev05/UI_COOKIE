{"version":3,"sources":["components/layout/Flex.tsx","hooks/usePersistState.ts","components/PageHeader/PageHeader.tsx","components/Select/Select.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useApprove.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","components/ApyCalculatorModal/index.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","hooks/useI18n.ts","views/Home/components/CardValue.tsx","utils/callHelpers.ts","hooks/useContract.ts","hooks/useWeb3.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","views/Home/components/CardBusdValue.tsx","utils/apr.ts"],"names":["FlexLayout","styled","div","usePersistState","initialValue","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Outer","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","DropDownHeader","shadows","inset","inputSecondary","input","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","width","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onChange","containerRef","useRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","height","containerSize","setContainerSize","toggling","onOptionClicked","option","current","offsetWidth","offsetHeight","ref","onClick","label","color","map","Wrapper","primary","ExpandableSectionButton","expanded","TranslateString","useI18n","aria-label","role","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","href","name","DualTag","variant","outline","NoFeeTag","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","src","alt","flexDirection","split","useApprove","lpContract","dispatch","useAppDispatch","account","useWeb3React","masterChefContract","useMasterchef","onApprove","useCallback","a","approve","tx","fetchFarmUserDataAsync","useStake","pid","onStake","amount","stake","txHash","console","info","useUnstake","onUnstake","unstake","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","StyledInput","Input","xs","StyledErrorMessage","Text","ModalInput","max","symbol","onSelectMax","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceNumber","Number","toLocaleString","undefined","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","gt","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","stakedBalanceNumber","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","pathname","includes","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","isTokenOnly","address","token","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","getBep20Contract","handleApprove","textTransform","pr","mt","UnlockButton","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","parseFloat","toFixed","getRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apr","linkLabel","linkHref","earningTokenSymbol","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","Divider","borderColor","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","BASE_ADD_LIQUIDITY_URL","isCommunityFarm","isCommunity","depositFeeBP","display","CardActionsContainer","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","targetRef","tooltipVisible","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","marginBottom","marginTop","expandAnimation","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","hasStakeInArchivedFarms","url","useRouteMatch","as","Link","to","show","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Farms","tokenMode","kingdomMode","path","useFarms","farmsLP","userDataLoaded","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","fastRefresh","useRefresh","isArchived","isInactive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isKingdom","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","header","heading","subHeading","textAlign","Page","checked","marginLeft","sort","b","exact","renderContent","responsive","translations","TranslationsContext","fallback","foundTranslation","find","translation","stringId","includesVariable","interpolatedText","isEmpty","forEach","dataKey","templateKey","RegExp","CardValue","lineHeight","prefix","methods","ethers","constants","MaxUint256","send","from","enterStaking","DEFAULT_TOKEN_DECIMAL","toString","on","transactionHash","deposit","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","gas","leaveStaking","withdraw","sousUnstake","emergencyWithdraw","sousEmergencyUnstake","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","useCake","getCakeContract","useLottery","getLotteryContract","getMasterchefContract","useSousChef","getSouschefContract","library","refEth","Web3","getWeb3NoAccount","setweb3","farmPid","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useAuth","login","logout","onPresentConnectModal","useWalletModal","cakePriceUsd","poolLiquidityUsd","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","isNaN"],"mappings":"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","file":"static/js/6.7b1cac0d.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\r\n  }, [value, localStorageKey])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap-libs/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? TranslateString(1066, 'Hide') : TranslateString(658, 'Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\r\n        <Text>{totalValueFormatted}</Text>\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n        </StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst CoreTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = (props) => (\r\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nconst DualTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline {...props}>\r\n    Dual\r\n  </Tag>\r\n)\r\n\r\nconst ManualPoolTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Manual\r\n  </Tag>\r\n)\r\n\r\nconst CompoundingPoolTag = (props) => (\r\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n    Auto\r\n  </Tag>\r\n)\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag, NoFeeTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  depositFee?: number\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  // isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {/* isCommunityFarm ? <CommunityTag /> : <CoreTag /> */}\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23, 78]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceNumber = Number(balance)\r\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\r\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\r\n    }\r\n    return balanceNumber.toLocaleString()\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance(max)}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button onClick={onPresentDeposit} disabled={location.pathname.includes('archived')}>\r\n        {TranslateString(999, 'Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalance}\r\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\r\n      </Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {TranslateString(562, 'Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, token: { address } } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  // const lpContract = getBep20Contract(lpAddress, web3)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button\r\n        mt=\"8px\"\r\n        width=\"100%\"\r\n        disabled={requestedApproval || location.pathname.includes('archived')}\r\n        onClick={handleApprove}\r\n      >\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          CUB\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const aprAsDecimal = farmApr / 100\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CUB',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {earningTokenSymbol} {TranslateString(999, 'per')} $1000\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          `Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={`${TranslateString(999, 'Get')} ${lpLabel}`}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted = farm.liquidity\r\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CUB'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.token.symbol === 'CUB' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n        depositFee={farm.depositFeeBP}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          // bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.token.address[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Text, Image } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const TranslateString = useI18n()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {TranslateString(999, 'FARMING')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const TranslateString = useI18n()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && TranslateString(658, 'Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const TranslateString = useI18n()\r\n  const tooltipContent = (\r\n    <div>\r\n      {TranslateString(999, 'The multiplier represents the amount of CUB rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {TranslateString(\r\n        999,\r\n        'For example, if a 1x farm was getting 1 CUB per block, a 40x farm would be getting 40 CUB per block.',\r\n      )}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, 'top-end', 'hover', undefined, undefined, [\r\n    20,\r\n    10,\r\n  ])\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity ? (\r\n    `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n  ) : (\r\n    <Skeleton width={60} />\r\n  )\r\n  const TranslateString = useI18n()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    TranslateString(999, 'The total value of the funds in this farm’s liquidity pool'),\r\n    'top-end',\r\n    'hover',\r\n    undefined,\r\n    undefined,\r\n    [20, 10],\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = 0\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default abalance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const TranslateString = useI18n()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>CUB </Title>\r\n        <Subtle>{TranslateString(1072, 'EARNED')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={location.pathname.includes('archived')}\r\n          >\r\n            {TranslateString(999, 'Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={requestedApproval || location.pathname.includes('archived')}\r\n          onClick={handleApprove}\r\n          variant=\"secondary\"\r\n        >\r\n          {TranslateString(999, 'Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LinkExternal, Text, Flex } from '@pancakeswap-libs/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { NoFeeTag, DualTag } from 'components/Tags'\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const TranslateString = useI18n()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://bscscan.com/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.cubdefi.com/#/add/${liquidityUrlPathParts}`}>\r\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {/* farm.isCommunity ? <CommunityTag /> : <CoreTag /> */}\r\n          {farm.depositFeeBP === 0 ? <NoFeeTag /> : null}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n        {farm.depositFeeBP !== 0 && (\r\n          <Flex justifyContent='flex-start'>\r\n            <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:&nbsp;</Text>\r\n            <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n          </Flex>\r\n        )}\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(736, 'APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const TranslateString = useI18n()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={TranslateString(736, 'APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout\r\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\r\n                      >\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={TranslateString(1072, 'Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(736, 'APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const TranslateString = useI18n()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {TranslateString(999, 'To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n  hasStakeInArchivedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms, hasStakeInArchivedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const TranslateString = useI18n()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(1198, 'Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {TranslateString(388, 'Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n        <NotificationDot show={hasStakeInArchivedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/archived`}>\r\n            {TranslateString(999, 'Discontinued')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          value={searchText}\r\n          onChange={onChange}\r\n          placeholder=\"Search farms\"\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\n// import { MigrationV2 } from 'components/Banner'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\n// import { useGetStats } from 'hooks/api'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n// import CardValue from '../Home/components/CardValue'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n`\r\n\r\n/* const StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n` */\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n  kingdomMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = ({ tokenMode, kingdomMode }) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const prices = useGetApiPrices()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    // Makes the main scheduled fetching to request archived farms data\r\n    dispatch(setLoadArchivedFarmsData(isArchived))\r\n\r\n    // Immediately request data for archived farms so users don't have to wait\r\n    // 60 seconds for public data and 10 seconds for user data\r\n    if (isArchived) {\r\n      dispatch(fetchFarmsPublicDataAsync())\r\n      if (account) {\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n      }\r\n    }\r\n  }, [isArchived, dispatch, account])\r\n\r\n  // const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, prices, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  let header = TranslateString(674, 'Farms')\r\n  let heading = TranslateString(320, 'Stake LP tokens to earn CUB')\r\n  let subHeading = TranslateString(10000, 'Deposit Fee will be used to buyback CUB and bLEO')\r\n  // let extra = null\r\n  // const data = useGetStats()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  if (tokenMode) {\r\n    header = TranslateString(674, 'Dens')\r\n    heading = TranslateString(10002, 'Stake tokens to earn CUB')\r\n  } else if (kingdomMode) {\r\n    header = TranslateString(674, 'Kingdoms')\r\n    heading = TranslateString(null, 'Kingdoms: Composable Auto-Compounding')\r\n    subHeading = TranslateString(null, 'Stake tokens for cross-platform farming plus CUB rewards')\r\n    /* extra = (\r\n      <Heading as=\"h3\" color=\"secondary\" mb=\"30px\" style={{ textAlign: 'left', fontSize: '1rem' }}>\r\n        TVL <CardValue value={Number(tvl)} prefix=\"$\" decimals={2}/>\r\n      </Heading>\r\n    ) */\r\n  }\r\n\r\n  // const tlvSpacing = kingdomMode ? '10px' : '20px'\r\n  const tlvSpacing = '20px'\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"15px\">\r\n          {header}\r\n        </Heading>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n          {heading}\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb={tlvSpacing} style={{ textAlign: 'left' }}>\r\n          {subHeading}\r\n        </Heading>\r\n        {/* extra */}\r\n        <Wrapper>\r\n          <Button size=\"sm\">\r\n            <a href=\"https://docs.cubdefi.com\">Learn More</a>\r\n          </Button>\r\n        </Wrapper>\r\n      </PageHeader>\r\n      {/* <MigrationV2 /> */}\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons\r\n              hasStakeInFinishedFarms={stakedInactiveFarms.length > 0}\r\n              hasStakeInArchivedFarms={stakedArchivedFarms.length > 0}\r\n            />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Hot',\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <Image src=\"/images/cub/wide.svg\" alt=\"illustration\" width={1352} height={587} responsive />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import { useContext } from 'react'\r\nimport { isEmpty } from 'lodash'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\ninterface ContextData {\r\n  [key: string]: number | string\r\n}\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\r\n    if (translations.length === 0) {\r\n      return fallback\r\n    }\r\n\r\n    const foundTranslation = translations.find((translation) => {\r\n      return translation.data.stringId === translationId\r\n    })\r\n\r\n    if (foundTranslation) {\r\n      const { text } = foundTranslation.data\r\n      const includesVariable = text.includes('%')\r\n\r\n      if (includesVariable) {\r\n        let interpolatedText = text\r\n\r\n        // If dynamic tags are found but no data was passed return the fallback\r\n        if (isEmpty(data)) {\r\n          return fallback\r\n        }\r\n\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return text\r\n    }\r\n\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking('0')\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\nexport default null\r\n"],"sourceRoot":""}