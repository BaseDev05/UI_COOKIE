{"version":3,"sources":["views/Farms/components/types.ts","components/layout/Flex.tsx","hooks/usePersistState.ts","components/Select/Select.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useApprove.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","components/UnlockButton.tsx"],"names":["ViewMode","FlexLayout","styled","div","usePersistState","initialValue","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","DropDownHeader","theme","shadows","inset","colors","inputSecondary","input","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","width","props","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onChange","containerRef","useRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","height","containerSize","setContainerSize","toggling","onOptionClicked","option","current","offsetWidth","offsetHeight","ref","onClick","label","color","map","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","aprApy","isKingdom","TranslateString","useI18n","justifyContent","AprApy","isDetails","href","name","DualTag","variant","outline","NoFeeTag","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","src","alt","flexDirection","split","useApprove","lpContract","dispatch","useAppDispatch","account","useWeb3React","masterChefContract","useMasterchef","kingdomContract","useKingdom","onApprove","useCallback","a","approve","tx","fetchFarmUserDataAsync","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","tokenName","pid","isTokenOnly","isKingdomToken","onStake","useStake","onUnstake","useUnstake","location","useLocation","displayBalance","stakedBalanceNumber","getBalanceNumber","getFullDisplayBalance","toLocaleString","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","eq","disabled","pathname","includes","mr","BalanceAndCompound","HarvestAction","earnings","pendingTx","setPendingTx","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","BigNumber","multipliedBy","toNumber","CardBusdValue","size","marginBottom","toString","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","address","token","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","useMemo","getBep20Contract","handleApprove","console","bold","textTransform","fontSize","pr","mt","UnlockButton","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPR","apr","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","quoteToken","exchangeUrl","PCS_ADD_LIQUIDITY_URL","BASE_ADD_LIQUIDITY_URL","process","useKingdomAPRAPY","Number","tokenPriceVsQuote","poolWeightPCS","pcsCompounding","lpTokenBalancePCSv2","lpTotalInQuoteTokenPCS","symbol","isCommunityFarm","isCommunity","depositFeeBP","style","display","ApyButton","CardActionsContainer","ExpandableSectionButton","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Container","text","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","primary","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","targetRef","tooltipVisible","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","ml","gt","marginTop","expandAnimation","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","children","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","hasStakeInArchivedFarms","url","useRouteMatch","scale","as","Link","to","show","StyledInput","Input","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","e","target","placeholder","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","Text","LabelWrapper","FilterContainer","ViewControls","FeeWrapper","Farms","tokenMode","kingdomMode","path","useFarms","farmsLP","userDataLoaded","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","fastRefresh","useRefresh","isArchived","isInactive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","header","heading","subHeading","subHeadingPCS","subHeadingCertik","kingdomFees","textAlign","rel","PageHeader","Page","checked","length","marginLeft","event","sort","b","exact","renderContent","responsive","useAuth","login","logout","onPresentConnectModal","useWalletModal"],"mappings":"gSA0GYA,G,2HC3FGC,GAbIC,KAAOC,IAAV,6N,uCCqBDC,GAlBS,SAACC,EAAmBC,GAC1C,MAA0BC,qBAAS,WACjC,IACE,IAAMC,EAAcC,aAAaC,QAAQJ,GAEzC,OAAOE,EAAcG,KAAKC,MAAMJ,GAAeH,EAC/C,MAAOQ,GACP,OAAOR,MANX,oBAAOS,EAAP,KAAcC,EAAd,KAcA,OAJAC,sBAAU,WACRP,aAAaQ,QAAQX,EAAiBK,KAAKO,UAAUJ,MACpD,CAACA,EAAOR,IAEJ,CAACQ,EAAOC,I,uFChBXI,GAAiBjB,KAAOC,IAAV,+RAOJ,qBAAGiB,MAAkBC,QAAQC,SACvB,qBAAGF,MAAkBG,OAAOC,kBAElC,qBAAGJ,MAAkBG,OAAOE,SAItCC,GAAwBxB,KAAOC,IAAV,ySAKX,qBAAGiB,MAAkBG,OAAOE,SAC/B,qBAAGL,MAAkBO,SAASC,YAMvC,qBAAGR,MAAkBS,aAAaC,MAKhCC,GAAoB7B,KAAOC,IAAV,uUAEZ,qBAAG6B,SAEE,qBAAGZ,MAAkBG,OAAOE,SAKxC,qBAAGL,MAAkBS,aAAaC,MAIlC,SAACG,GAAD,OACAA,EAAMC,QACNC,aADA,gYAEIhB,IAC2B,qBAAGC,MAAkBG,OAAOC,kBACzC,qBAAGJ,MAAkBgB,QAAQC,YAI3CX,IAIoB,qBAAGN,MAAkBG,OAAOC,kBAGlC,qBAAGJ,MAAkBgB,QAAQC,gBAY7CC,GAAepC,KAAOqC,GAAV,sGAIL,qBAAGnB,MAAkBO,SAASC,YAGrCY,GAAWtC,KAAOuC,GAAV,gHAII,qBAAGrB,MAAkBG,OAAOC,kBA8D/BkB,GAhDsC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACzDC,EAAeC,kBAAO,MACtBC,EAAcD,kBAAO,MAC3B,EAA4BvC,qBAAS,GAArC,oBAAO2B,EAAP,KAAec,EAAf,KACA,EAA4CzC,oBAASoC,EAAQ,IAA7D,oBAAOM,EAAP,KAAuBC,EAAvB,KACA,EAA0C3C,oBAAS,CAAEyB,MAAO,EAAGmB,OAAQ,IAAvE,oBAAOC,EAAP,KAAsBC,EAAtB,KAEMC,EAAW,kBAAMN,GAAWd,IAE5BqB,EAAkB,SAACC,GAAD,OAAyB,WAC/CN,EAAkBM,GAClBR,GAAU,GAENJ,GACFA,EAASY,KAWb,OAPAxC,sBAAU,WACRqC,EAAiB,CACfrB,MAAOe,EAAYU,QAAQC,YAC3BP,OAAQJ,EAAYU,QAAQE,iBAE7B,IAGD,gBAAC5B,GAAD,2BAAmBG,OAAQA,EAAQ0B,IAAKf,GAAkBO,GAA1D,cAC2B,IAAxBA,EAAcpB,OACb,eAACb,GAAD,CAAgB0C,QAASP,EAAzB,SACE,eAAC,KAAD,UAAOL,EAAea,UAG1B,eAAC,KAAD,CAAmBC,MAAM,OAAOF,QAASP,IACzC,eAAC5B,GAAD,UACE,eAACY,GAAD,CAAcsB,IAAKb,EAAnB,SACGJ,EAAQqB,KAAI,SAACR,GAAD,OACXA,EAAOM,QAAUb,EAAea,MAC9B,eAACtB,GAAD,CAAUqB,QAASN,EAAgBC,GAAnC,SACE,eAAC,KAAD,UAAOA,EAAOM,SADiCN,EAAOM,OAGtD,iB,kDC1HVG,GAAU/D,KAAOC,IAAV,kDAIP+D,GAAqBhE,aAAOiE,KAAPjE,CAAH,kDA0CTkE,GAtC0C,SAAC,GASnD,IARLC,EAQI,EARJA,eACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,QACAC,EAKI,EALJA,oBACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEMC,EAAkBC,eAGxB,OACE,gBAACb,GAAD,WACE,gBAAC,KAAD,CAAMc,eAAe,gBAArB,UACE,gBAAC,KAAD,WAAOF,EAAgB,IAAK,mBAA5B,OACA,eAAC,KAAD,UAAOL,OAERI,GACC,eAACI,GAAA,EAAD,CACEL,OAAQA,EACRF,QAASA,EACTC,gBAAiBA,EACjBO,WAAS,KAGXV,GACA,eAACL,GAAD,CAAoBgB,KAAMR,EAA1B,SACGG,EAAgB,IAAD,cAAaJ,GAAW,CAAEU,KAAMV,MAGpD,eAACP,GAAD,CAAoBgB,KAAMb,EAA1B,SAA2CQ,EAAgB,IAAK,mBAChE,eAACX,GAAD,CAAoBgB,KAAMZ,EAA1B,SAAwCO,EAAgB,IAAK,uBCvC7DO,GAAU,SAACnD,GAAD,OACd,eAAC,KAAD,2BAAKoD,QAAQ,aAAaC,SAAO,GAAKrD,GAAtC,wBAiBIsD,GAAW,kBACf,eAAC,KAAD,CAAKF,QAAQ,UAAUC,SAAO,EAACE,UAAW,eAAC,KAAD,IAA1C,sBC1BIvB,GAAU/D,aAAOuF,KAAPvF,CAAH,mEAMPwF,GAAgBxF,aAAOyF,KAAPzF,CAAH,kDA2BJ0F,GAvBuC,SAAC,GAOhD,IANLnB,EAMI,EANJA,QACAoB,EAKI,EALJA,WAEAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,WAEA,OACE,gBAAC,GAAD,CAASjB,eAAe,gBAAgBkB,WAAW,SAASC,GAAG,OAA/D,UACE,eAAC,KAAD,CAAOC,IAAG,wBAAmBL,EAAnB,QAAoCM,IAAKL,EAAa/D,MAAO,GAAImB,OAAQ,KACnF,gBAAC,KAAD,CAAMkD,cAAc,SAASJ,WAAW,WAAxC,UACE,eAAC,KAAD,CAASC,GAAG,MAAZ,SAAmBzB,EAAQ6B,MAAM,KAAK,KACtC,gBAAC,KAAD,CAAMvB,eAAe,SAArB,UAEkB,IAAfiB,EAAmB,eAAC,GAAD,IAAe,KACnC,eAACN,GAAD,CAAeL,QAAQ,YAAvB,SAAoCQ,c,2EC9BjCU,GAAa,SAACC,EAAsB5B,GAC/C,IAAM6B,EAAWC,eACTC,EAAYC,eAAZD,QACFE,EAAqBC,eACrBC,EAAkBC,eAYxB,MAAO,CAAEC,UAVaC,uBAAW,wBAAC,6BAAAC,EAAA,+EAEbC,aAAQZ,EAAY5B,EAAYmC,EAAkBF,EAAoBF,GAFzD,cAExBU,EAFwB,OAG9BZ,EAASa,aAAuBX,IAHF,kBAIvBU,GAJuB,0DAMvB,GANuB,yDAQ/B,CAACV,EAASF,EAAUD,EAAYK,EAAoBE,EAAiBnC,M,kDCDpE2C,GAAoBrH,KAAOC,IAAV,+EA8DRqH,GAvDqC,SAAC,GAS9C,IARLC,EAQI,EARJA,cACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,UACAC,EAKI,EALJA,IACAlD,EAII,EAJJA,gBACAE,EAGI,EAHJA,UACAiD,EAEI,EAFJA,YACAC,EACI,EADJA,eAEMjD,EAAkBC,eAChBiD,EAAYC,aAASJ,EAAKhD,GAA1BmD,QACAE,EAAcC,aAAWN,EAAKhD,GAA9BqD,UACFE,EAAWC,eAEXC,EAAiBnB,wBAAY,WACjC,IAAMoB,EAAsBC,aAAiBd,GAC7C,OAAIa,EAAsB,GAAKA,EAAsB,KAC5CE,aAAsBf,GAAegB,iBAEvCH,EAAoBG,mBAC1B,CAAChB,IAEJ,EAA2BiB,aACzB,eAACC,GAAA,EAAD,CAAcC,IAAKlB,EAAcmB,UAAWd,EAASJ,UAAWA,EAAWjD,gBAAiBA,EAAiBmD,YAAaA,EAAaC,eAAgBA,KADlJgB,EAAP,qBAGA,EAA4BJ,aAC1B,eAACK,GAAA,EAAD,CAAeH,IAAKnB,EAAeoB,UAAWZ,EAAWN,UAAWA,EAAWE,YAAaA,EAAaC,eAAgBA,KADpHkB,EAAP,qBAqBA,OACE,gBAAC,KAAD,CAAMjE,eAAe,gBAAgBkB,WAAW,SAAhD,UACE,eAAC,KAAD,CAASlC,MAAO0D,EAAcwB,GAAG,GAAK,eAAiB,OAAvD,SAAgEZ,MAlB3DZ,EAAcwB,GAAG,GACtB,eAAC,KAAD,CAAQpF,QAASiF,EAAkBI,SAAUf,EAASgB,SAASC,SAAS,YAAxE,SACGvE,EAAgB,IAAKgD,GAAeC,EAAiB,cAAgB,cAGxE,gBAACP,GAAD,WACE,eAAC,KAAD,CAAYlC,QAAQ,WAAWxB,QAASmF,EAAmBK,GAAG,MAA9D,SACE,eAAC,KAAD,CAAWtF,MAAM,UAAU/B,MAAM,WAEnC,eAAC,KAAD,CAAYqD,QAAQ,WAAWxB,QAASiF,EAAxC,SACE,eAAC,KAAD,CAAS/E,MAAM,UAAU/B,MAAM,kB,oBCrDnCsH,GAAqBpJ,KAAOC,IAAV,qIAwDToJ,GAjDuC,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAU5B,EAAqB,EAArBA,IAAKhD,EAAgB,EAAhBA,UAC9D+B,EAAYC,eAAZD,QACF9B,EAAkBC,eACxB,EAAkCvE,qBAAS,GAA3C,oBAAOkJ,EAAP,KAAkBC,EAAlB,KACQC,EAAaC,aAAWhC,EAAKhD,GAA7B+E,SACFE,EAAYC,eACV/B,EAAYC,aAASJ,EAAKhD,GAA1BmD,QAEFgC,EAAqBpD,EAAU4B,aAAiBiB,GAAY,EAC5DnB,EAAiB0B,EAAmBtB,iBACpCuB,EAAeD,EAAqB,IAAIE,KAAUF,GAAoBG,aAAaL,GAAWM,WAAa,EAEjH,OACE,gBAAC,KAAD,CAAMjE,GAAG,MAAMnB,eAAe,gBAAgBkB,WAAW,SAAzD,UACE,gBAAC,KAAD,CAASlC,MAA8B,IAAvBgG,EAA2B,eAAiB,OAA5D,UACG1B,EACA2B,EAAe,GAAK,eAACI,GAAA,EAAD,CAAetJ,MAAOkJ,OAE7C,gBAACV,GAAD,WACW,KAAR1B,EACC,eAAC,KAAD,CACEsB,SAAiC,IAAvBa,GAA4BN,EACtCY,KAAK,KACLhF,QAAQ,YACRiF,aAAa,OACbzG,QAAO,wBAAE,uBAAAsD,EAAA,6DACPuC,GAAa,GADN,SAED3B,EAAQgC,EAAmBQ,YAF1B,OAGPb,GAAa,GAHN,2CALX,SAWG7E,EAAgB,IAAK,cAEtB,KACJ,eAAC,KAAD,CACEqE,SAAiC,IAAvBa,GAA4BN,EACtC5F,QAAO,wBAAE,uBAAAsD,EAAA,6DACPuC,GAAa,GADN,SAEDC,IAFC,OAGPD,GAAa,GAHN,2CAFX,SAQG7E,EAAgB,IAAK,oBCnD1B2F,GAAStK,KAAOC,IAAV,mDA0GGsK,GA1FqC,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAAM/D,EAA+B,EAA/BA,QAASjC,EAAsB,EAAtBA,gBAC9DG,EAAkBC,eACxB,EAAkDvE,qBAAS,GAA3D,oBAAOoK,EAAP,KAA0BC,EAA1B,KACQhD,EAAiF8C,EAAjF9C,IAAKiD,EAA4EH,EAA5EG,YAAahD,EAA+D6C,EAA/D7C,YAAaC,EAAkD4C,EAAlD5C,eAAgBlD,EAAkC8F,EAAlC9F,UAAoBkG,EAAcJ,EAAvBK,MAASD,QAC3E,EAKIJ,EAAKM,UAAY,GALrB,IACEC,UAAWC,OADb,MACiC,EADjC,MAEExD,aAAcyD,OAFhB,MAEuC,EAFvC,MAGE1D,cAAe2D,OAHjB,MAGyC,EAHzC,MAIE5B,SAAU6B,OAJZ,MAI+B,EAJ/B,EAMMJ,EAAY,IAAIhB,KAAUiB,GAC1BxD,EAAe,IAAIuC,KAAUkB,GAC7B1D,EAAgB,IAAIwC,KAAUmB,GAC9B5B,EAAW,IAAIS,KAAUoB,GACzBC,EAAYC,aAAWV,GACvBW,EAAeD,aAAWT,GAC1BW,EAASf,EAAKgB,SAASC,cACvBC,EAAajF,GAAWsE,GAAaA,EAAUY,cAAc,GAC7DC,EAAOC,eACP5D,EAAWC,eAGX5B,EAAawF,oBAAQ,WACzB,OAAGnE,GAAeC,EACTmE,aAAiBT,EAAcM,GAEjCG,aAAiBX,EAAWQ,KAClC,CAACR,EAAWzD,EAAaiE,EAAMN,EAAc1D,IAExCb,EAAcV,GAAWC,EAAY5B,GAArCqC,UAEFiF,EAAgBhF,uBAAW,wBAAC,uBAAAC,EAAA,sEAE9ByD,GAAqB,GAFS,SAGxB3D,IAHwB,OAI9B2D,GAAqB,GAJS,gDAM9BuB,QAAQtL,MAAR,MAN8B,yDAQ/B,CAACoG,IA0BJ,OACE,gBAACuD,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAM4B,MAAI,EAACC,cAAc,YAAYtI,MAAM,YAAYuI,SAAS,OAAOC,GAAG,MAA1E,iBAIA,eAAC,KAAD,CAAMH,MAAI,EAACC,cAAc,YAAYtI,MAAM,aAAauI,SAAS,OAAjE,SACGzH,EAAgB,KAAM,eAG3B,eAAC,GAAD,CAAe2E,SAAUA,EAAU5B,IAAKA,EAAKhD,UAAWA,IACxD,gBAAC,KAAD,WACE,eAAC,KAAD,CAAMwH,MAAI,EAACC,cAAc,YAAYtI,MAAM,YAAYuI,SAAS,OAAOC,GAAG,MAA1E,SACGd,IAEH,eAAC,KAAD,CAAMW,MAAI,EAACC,cAAc,YAAYtI,MAAM,aAAauI,SAAS,OAAjE,SACGzH,EAAgB,KAAM,eAGzB8B,EA3CGiF,EACL,eAAC,GAAD,CACEnE,cAAeA,EACfC,aAAcA,EACdC,UAAW8D,EACX7D,IAAKA,EACLlD,gBAAiBA,EACjBE,UAAWA,EACXiD,YAAa6C,EAAK7C,YAClBC,eAAgB4C,EAAK5C,iBAGvB,eAAC,KAAD,CACE0E,GAAG,MACHxK,MAAM,OACNkH,SAAUyB,GAAqBxC,EAASgB,SAASC,SAAS,YAC1DvF,QAASqI,EAJX,SAMGrH,EAAgB,IAAK,sBAyBZ,eAAC4H,GAAA,EAAD,CAAcD,GAAG,MAAMxK,MAAM,a,UCvFzC0K,GAAeC,aAAH,+KAYZC,GAAmB1M,KAAOC,IAAV,2nBAgBPuM,IAWTG,GAAQ3M,KAAOC,IAAV,6UAEK,SAAC8B,GAAD,OAAWA,EAAMb,MAAM0L,KAAKC,cAWtCC,GAAU9M,KAAOC,IAAV,6GACS,qBAAGiB,MAAkBG,OAAO0L,eAM5CC,GAAmBhN,KAAOC,IAAV,kEACV,SAAC8B,GAAD,OAAYA,EAAMkL,SAAW,OAAS,SA8HnCC,GAlH2B,SAAC,GAA2C,IAAzC1C,EAAwC,EAAxCA,KAAMnG,EAAkC,EAAlCA,QAASsF,EAAyB,EAAzBA,UAAWlD,EAAc,EAAdA,QAC/D9B,EAAkBC,eAExB,EAA0DvE,qBAAS,GAAnE,oBAAO8M,EAAP,KAA8BC,EAA9B,KAIMxH,EAAY4E,EAAKgB,SAASpF,MAAM,KAAK,GAAGiH,oBAExC/I,EAAsBkG,EAAK8C,WAAa9C,EAAK8C,UAAUrD,WAAjC,WACpBO,EAAK8C,UAAUrD,WAAW1B,oBAAegF,EAAW,CAAEC,sBAAuB,KACjF,IAEEjJ,EAAUiG,EAAKgB,UAAYhB,EAAKgB,SAASC,cAAcgC,QAAQ,UAAW,IAC1EC,EAAYlD,EAAKmD,KAAOnD,EAAKmD,KAAKD,UAAY,MAE9CE,EAAUpD,EAAKqD,KAAOrD,EAAKqD,IAAItF,eAAe,QAAS,CAAEiF,sBAAuB,IAEhFM,EAAwBC,aAAyB,CACrDC,kBAAmBxD,EAAKyD,WAAWrD,QACnCU,aAAcd,EAAKK,MAAMD,UAErBsD,EAAc1D,EAAK9F,UAAYyJ,KAAwBC,KACvD5J,EAAe,UAAM0J,EAAN,YAAqBJ,GACpC1C,EAAYZ,EAAKG,YAAY0D,IAE/B5J,EAAS6J,aACX9D,EAAK9F,UACL8F,EAAK5C,eACL2G,OAAO/D,EAAKgE,mBACZhE,EAAKiE,cACLjE,EAAKkE,eACLlE,EAAKqD,IACLrD,EAAKmE,oBAAsBnE,EAAKmE,oBAAsB,EACtDnE,EAAKoE,uBAAyBpE,EAAKoE,uBAAyB,GAK9D,OAFAnK,EAAM,6BAAQA,GAAR,IAAgBiK,eAAgBlE,EAAKkE,eAAgBd,UAASC,IAAKrD,EAAKqD,IAAKlE,cAGjF,gBAACgD,GAAD,WACyB,QAAtBnC,EAAKK,MAAMgE,QAAoB,eAACnC,GAAD,IAChC,eAAC,GAAD,CACEnI,QAASA,EACToB,WAAY6E,EAAK7E,WACjBmJ,gBAAiBtE,EAAKuE,YACtBnJ,UAAWA,EACXC,YAAa2E,EAAKK,MAAMgE,OACxB/I,WAAY0E,EAAKwE,gBAEjB3K,GAAWmG,EAAK9F,UAChB,eAACI,GAAA,EAAD,CACEL,OAAQA,EACRF,QAASA,EACTC,gBAAiBA,IAGjB,gBAAC,KAAD,CAAMK,eAAe,gBAAgBkB,WAAW,SAAhD,UACE,gBAAC,KAAD,WAAOpB,EAAgB,IAAK,OAA5B,OACA,eAAC,KAAD,CAAMuH,MAAI,EAAC+C,MAAO,CAAEC,QAAS,OAAQnJ,WAAY,UAAjD,SACGyE,EAAKqD,IACJ,uCACE,eAACsB,GAAA,EAAD,CAAW5K,QAASA,EAASC,gBAAiBA,EAAiBmF,UAAWA,EAAWkE,IAAKrD,EAAKqD,MAC9FD,EAFH,OAKA,eAAC,KAAD,CAAU3K,OAAQ,GAAInB,MAAO,UAMvC,gBAAC,KAAD,CAAM+C,eAAe,gBAArB,UACE,gBAAC,KAAD,WAAOF,EAAgB,IAAK,QAA5B,OACA,eAAC,KAAD,CAAMuH,MAAI,EAAV,SAAYwB,OAEd,gBAAC,KAAD,CAAM7I,eAAe,gBAArB,UACE,gBAAC,KAAD,CAAMoK,MAAO,CAAE7C,SAAU,QAAzB,UAAoCzH,EAAgB,MAAO,eAA3D,OAEE6F,EAAKwE,aACH,gBAAC,KAAD,CAAM9C,MAAI,EAAC+C,MAAO,CAAE7C,SAAU,QAA9B,UAA0C5B,EAAKwE,aAAe,IAA9D,OAEA,QAIN,eAACI,GAAD,CAAsB5E,KAAMA,EAAM/D,QAASA,EAASjC,gBAAiBA,IACrE,eAACsI,GAAD,IACA,eAACuC,GAAA,EAAD,CACE1L,QAAS,kBAAMyJ,GAA0BD,IACzCF,SAAUE,IAEZ,eAACH,GAAD,CAAkBC,SAAUE,EAA5B,SACE,eAAC,GAAD,CACE9I,QAASA,EAETF,eACEqG,EAAK7C,YAAL,oCAC+B6C,EAAKK,MAAMD,QAAQyD,KADlD,oCAG+B7D,EAAKG,YAAY0D,KAElDjK,YAAW,wCAAmCgH,GAC9C9G,oBAAqBA,EACrBC,QAASA,EACTC,gBAAiBA,EACjBC,OAAQA,EACRC,UAAW8F,EAAK9F,kBCtLX4K,GAfW,SAACC,EAAoBC,GAC7C,MAAwCnP,qBAAS,GAAjD,oBAAOoP,EAAP,KAAqBC,EAArB,KAWA,OATA5O,sBAAU,WACR,IAAI6O,EAMJ,OALIJ,IAAcE,EAChBC,GAAgB,IACNH,GAAaE,IACvBE,EAAYC,YAAW,kBAAMF,GAAgB,KAAQF,IAEhD,kBAAMK,aAAaF,MACzB,CAACJ,EAAWC,EAAWC,IACnBA,GCJHK,GAAY9P,KAAOC,IAAV,6MAGJ,qBAAGiB,MAAkBG,OAAO0O,QAQvB,qBAAG7O,MAAkBG,OAAO2O,cAMtCC,GAAajQ,KAAOC,IAAV,sEAuCDiQ,GAlCiB,SAAC,GAQ1B,IAPLtP,EAOI,EAPJA,MACA2D,EAMI,EANJA,QACA+G,EAKI,EALJA,aACA0C,EAII,EAJJA,kBACArE,EAGI,EAHJA,UACAwG,EAEI,EAFJA,cAEI,IADJC,kBACI,SACEtC,EAAwBC,aAAyB,CAAEC,oBAAmB1C,iBACtE9G,EAAe,UAAM4J,KAAN,YAAgCN,GAErD,OAAyB,IAAlBqC,EACL,eAACL,GAAD,UACGK,EACC,uCACE,gBAACF,GAAD,WAAarP,EAAb,QACEwP,GACA,eAACjB,GAAA,EAAD,CAAW5K,QAASA,EAASoF,UAAWA,EAAWkE,IAAKsC,EAAe3L,gBAAiBA,OAI5F,eAACyL,GAAD,UACE,eAAC,KAAD,CAAUnO,MAAO,SAKvB,eAACgO,GAAD,UACE,gBAACG,GAAD,WAAaE,EAAb,UC1DAE,GAAYrQ,aAAOsQ,KAAPtQ,CAAH,mHAIX,qBAAGkB,MAAkBS,aAAaC,MAMhCkO,GAAY9P,KAAOC,IAAV,uIAKX,qBAAGiB,MAAkBS,aAAaC,MAiCvB2O,GA5BkC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAO5M,EAAiB,EAAjBA,MAAO8D,EAAU,EAAVA,IACxDH,EAAkBkJ,aAAY/I,GAA9BH,cACF5C,EAAkBC,eAClB8L,EAAmBrI,aAAiBd,GAc1C,OACE,gBAAC,GAAD,WACE,eAAC8I,GAAD,CAAWpK,IAAG,wBAAmBuK,EAAnB,QAAgCtK,IAAI,OAAOpE,MAAO,GAAImB,OAAQ,GAAIkG,GAAG,QACnF,iCAdEuH,EAEA,eAAC,KAAD,CAAM7M,MAAM,YAAYuI,SAAS,OAAOF,MAAI,EAA5C,SACGvH,EAAgB,IAAK,aAKrB,KAQH,eAAC,KAAD,CAAMuH,MAAI,EAAV,SAAYtI,WC1Cd+M,GAAS3Q,KAAO4Q,KAAV,sFACD,gBAAGC,EAAH,EAAGA,OAAQ3P,EAAX,EAAWA,MAAX,OAAwB2P,EAAS3P,EAAMG,OAAO0O,KAAO7O,EAAMG,OAAOyP,gBAgB9DC,GAXiD,SAAC,GAAiC,IAA/BzH,EAA8B,EAA9BA,SACjE,OAD+F,EAApB0H,cAElE,eAACL,GAAD,CAAQE,OAAQvH,EAAhB,SAA2BA,EAASf,mBAG3C,eAACoI,GAAD,CAAQE,OAAQ,EAAhB,SACE,eAAC,KAAD,CAAU/O,MAAO,QChBjBgO,GAAY9P,KAAOC,IAAV,4KAKJ,qBAAGiB,MAAkBG,OAAO4P,WAEnC,qBAAG/P,MAAkBS,aAAaC,MAKhCsP,GAAYlR,aAAOmR,KAAPnR,CAAH,iEACA,qBAAGoR,QAAyB,iBAAmB,eAiB/CC,GAbyB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBACnC3M,EAAkBC,eAElB2M,GADWC,eAATC,KAGR,OACE,gBAAC,GAAD,YACIF,GAAY5M,EAAgB,IAAK,WACnC,eAACuM,GAAD,CAAWrN,MAAM,UAAUuN,QAASE,QC7BpCI,GAAmB1R,KAAOC,IAAV,uDAQhB0R,GAAoB3R,KAAOC,IAAV,sKACZ,qBAAGiB,MAAkBG,OAAO0O,QAKnC,qBAAG7O,MAAkBS,aAAaiQ,MAMhC9B,GAAY9P,KAAOC,IAAV,uEAmCA4R,GA9B8C,SAAC,GAAoB,IAAlBlM,EAAiB,EAAjBA,WACxDmM,EAAoBnM,EAAaA,EAAWoM,cAAgB,eAAC,KAAD,CAAUjQ,MAAO,KAC7E6C,EAAkBC,eAClBoN,EACJ,iCACGrN,EAAgB,IAAK,uEACtB,wBACA,wBACCA,EACC,IACA,2GAIN,EAA+CsN,aAAWD,EAAgB,UAAW,aAASzE,OAAWA,EAAW,CAClH,GACA,KAFM2E,EAAR,EAAQA,UAAWhQ,EAAnB,EAAmBA,QAASiQ,EAA5B,EAA4BA,eAK5B,OACE,gBAAC,GAAD,WACE,eAACR,GAAD,UAAoBG,IACpB,eAACJ,GAAD,CAAkBhO,IAAKwO,EAAvB,SACE,eAAC,KAAD,CAAUrO,MAAM,iBAEjBsO,GAAkBjQ,MCjDnBwP,GAAmB1R,KAAOC,IAAV,uDAQhBmS,GAAmBpS,KAAOC,IAAV,iLAMlB,qBAAGiB,MAAkBS,aAAaiQ,MAMhC9B,GAAY9P,KAAOC,IAAV,uEAkCAoS,GA7B4C,SAAC,GAAmB,IAAjB/E,EAAgB,EAAhBA,UACtDgF,EAAmBhF,EAAUrD,WAAV,WACnBsE,OAAOjB,GAAW/E,oBAAegF,EAAW,CAAEC,sBAAuB,KAEzE,IAEI7I,EAAkBC,eACxB,EAA+CqN,aAC7CtN,EAAgB,IAAK,mEACrB,UACA,aACA4I,OACAA,EACA,CAAC,GAAI,KANC2E,EAAR,EAAQA,UAAWhQ,EAAnB,EAAmBA,QAASiQ,EAA5B,EAA4BA,eAS5B,OACE,gBAAC,GAAD,WACE,eAACC,GAAD,UACE,eAAC,KAAD,UAAOE,MAET,eAAC,GAAD,CAAkB5O,IAAKwO,EAAvB,SACE,eAAC,KAAD,CAAUrO,MAAM,iBAEjBsO,GAAkBjQ,M,UCrDZqQ,GAAkBvS,KAAOC,IAAV,yXAEN,qBAAGiB,MAAkBG,OAAOE,SAM9C,qBAAGL,MAAkBS,aAAaC,MAOlC,qBAAGV,MAAkBS,aAAa6Q,MAQzBC,GAAezS,KAAOC,IAAV,6FAMZyS,GAAQ1S,KAAO4Q,KAAV,4CACP,qBAAG1P,MAAkBG,OAAOsR,aAG1BC,GAAS5S,KAAO4Q,KAAV,4CACR,qBAAG1P,MAAkBG,OAAO2O,cAG1B6C,GAAgB7S,KAAOC,IAAV,0GAKb8Q,GAAS/Q,KAAOC,IAAV,qFAGR,qBAAGiB,MAAkBG,OAAO0O,QAG1B+C,GAAS9S,KAAOC,IAAV,gEAER,qBAAGiB,MAAkBG,OAAO2O,cCsBxB3G,GA1DoD,SAAC,GAAsC,IAApC3B,EAAmC,EAAnCA,IAAKoD,EAA8B,EAA9BA,SAAUkG,EAAoB,EAApBA,cAC7E+B,EAAoB,IAAIhJ,KAAUe,EAASxB,UAC3CK,EAAYC,eACdN,EAAW,EACXQ,EAAe,EACf3B,EAAiB6I,EAAgB1H,EAASf,iBAAmB,eAAC,KAAD,CAAUzG,MAAO,KAG7EiR,EAAkBC,WACrB1J,EAAWjB,aAAiB0K,GAC5BjJ,EAAe,IAAIC,KAAUT,GAAUU,aAAaL,GAAWM,WAC/D9B,EAAiBmB,EAASf,kBAG5B,MAAkClI,qBAAS,GAA3C,oBAAOkJ,EAAP,KAAkBC,EAAlB,KACQC,EAAaC,aAAWhC,GAAxB+B,SACF9E,EAAkBC,eAExB,EAA4BqO,sBAAW,CACrCC,MAAO,EACPC,IAAKrJ,EACLsJ,SAAU,EACVC,UAAW,IACXC,SAAU,IALJC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAOXC,EAAc7Q,kBAAO4Q,GAM3B,OAJA1S,sBAAU,WACR2S,EAAYlQ,QAAQuG,KACnB,CAACA,EAAc2J,IAGhB,gBAAClB,GAAD,WACE,gBAACE,GAAD,WACE,eAACC,GAAD,mBACA,eAACE,GAAD,UAASjO,EAAgB,KAAM,eAEjC,gBAACkO,GAAD,WACE,iCACE,eAAC,GAAD,UAAS1K,IACRoL,EAAU,GAAK,gBAAC,GAAD,eAAUA,EAAV,YAElB,eAAC,KAAD,CACEvK,UAAWM,GAAYC,IAAcyH,EACrCrN,QAAO,wBAAE,uBAAAsD,EAAA,6DACPuC,GAAa,GADN,SAEDC,IAFC,OAGPD,GAAa,GAHN,2CAKTkK,GAAG,MAPL,SASG/O,EAAgB,IAAK,oBC5C1B0C,GAAoBrH,KAAOC,IAAV,+CA+JR6S,GAvJ6C,SAAC,GAQtD,IAPLpL,EAOI,EAPJA,IACA8D,EAMI,EANJA,SACAb,EAKI,EALJA,YACAsD,EAII,EAJJA,WACApD,EAGI,EAHJA,MACAmG,EAEI,EAFJA,cACArJ,EACI,EADJA,YAEMhD,EAAkBC,eAChB6B,EAAYC,eAAZD,QACR,EAAkDpG,qBAAS,GAA3D,oBAAOoK,EAAP,KAA0BC,EAA1B,KACA,EAAmD+F,aAAY/I,GAAvDqD,EAAR,EAAQA,UAAWvD,EAAnB,EAAmBA,aAAcD,EAAjC,EAAiCA,cACzBM,EAAYC,aAASJ,GAArBG,QACAE,EAAcC,aAAWN,GAAzBK,UACF6D,EAAOC,eACP5D,EAAWC,eACXoD,EAAeD,aAAWR,EAAMD,SAEhCc,EAAajF,GAAWsE,GAAaA,EAAUY,cAAc,GAE7DP,EAAYT,EAAY0D,IACxBP,EAAwBC,aAAyB,CACrDC,kBAAmBC,EAAWrD,QAC9BU,aAAcT,EAAMD,UAEhBpG,EAAe,UAAM4J,KAAN,YAAgCN,GAE/C3F,EAAiBnB,wBAAY,WACjC,IAAMoB,EAAsBC,aAAiBd,GAC7C,OAAIa,EAAsB,GAAKA,EAAsB,KAC5CE,aAAsBf,GAAegB,iBAEvCH,EAAoBG,mBAC1B,CAAChB,IAEJ,EAA2BiB,aACzB,eAACC,GAAA,EAAD,CAAcC,IAAKlB,EAAcmB,UAAWd,EAASJ,UAAW+D,EAAUhH,gBAAiBA,KADtFoE,EAAP,qBAGA,EAA4BJ,aAAS,eAACK,GAAA,EAAD,CAAeH,IAAKnB,EAAeoB,UAAWZ,EAAWN,UAAW+D,KAAlG1C,EAAP,qBAGMxC,EAAawF,oBAAQ,WACzB,OAAGnE,EACMoE,aAAiBT,EAAcM,GAEjCG,aAAiBX,EAAWQ,KAClC,CAACR,EAAWzD,EAAaiE,EAAMN,IAE1BvE,EAAcV,GAAWC,GAAzBS,UAEFiF,EAAgBhF,uBAAW,wBAAC,uBAAAC,EAAA,sEAE9ByD,GAAqB,GAFS,SAGxB3D,IAHwB,OAI9B2D,GAAqB,GAJS,gDAM9BuB,QAAQtL,MAAR,MAN8B,yDAQ/B,CAACoG,IAEJ,OAAKN,EAaDiF,EACEnE,EAAcoM,GAAG,GAEjB,gBAACpB,GAAD,WACE,gBAACE,GAAD,WACE,gBAACC,GAAD,WAAQlH,EAAR,OACA,eAACoH,GAAD,UAASjO,EAAgB,IAAK,eAEhC,gBAACkO,GAAD,WACE,+BACE,eAAC,GAAD,UAAS1K,QAEX,gBAAC,GAAD,WACE,eAAC,KAAD,CAAYhD,QAAQ,YAAYxB,QAASmF,EAAmBK,GAAG,MAA/D,SACE,eAAC,KAAD,CAAWtF,MAAM,UAAU/B,MAAM,WAEnC,eAAC,KAAD,CAAYqD,QAAQ,YAAYxB,QAASiF,EAAzC,SACE,eAAC,KAAD,CAAS/E,MAAM,UAAU/B,MAAM,oBASzC,gBAACyQ,GAAD,WACE,gBAACE,GAAD,WACE,gBAACG,GAAD,WAASjO,EAAgB,IAAK,SAA9B,OACA,eAAC+N,GAAD,UAAQlH,OAEV,eAACqH,GAAD,UACE,eAAC,KAAD,CACE/Q,MAAM,OACN6B,QAASiF,EACTzD,QAAQ,YACR6D,SAAUf,EAASgB,SAASC,SAAS,YAJvC,SAMGvE,EAAgB,IAAKgD,EAAc,cAAgB,mBAOzDqJ,EAcH,gBAACuB,GAAD,WACE,eAACE,GAAD,UACE,eAACG,GAAD,UAASjO,EAAgB,IAAK,mBAEhC,eAACkO,GAAD,UACE,eAAC,KAAD,CACE/Q,MAAM,OACNkH,SAAUyB,GAAqBxC,EAASgB,SAASC,SAAS,YAC1DvF,QAASqI,EACT7G,QAAQ,YAJV,SAMGR,EAAgB,IAAK,iBAvB1B,gBAAC4N,GAAD,WACE,eAACE,GAAD,UACE,eAACG,GAAD,UAASjO,EAAgB,IAAK,qBAEhC,eAACkO,GAAD,UACE,eAAC,KAAD,CAAU/Q,MAAO,IAAKsI,aAAc,GAAIwJ,UAAW,UA/DvD,gBAACrB,GAAD,WACE,eAACE,GAAD,UACE,eAACG,GAAD,UAASjO,EAAgB,IAAK,qBAEhC,eAACkO,GAAD,UACE,eAACtG,GAAA,EAAD,CAAczK,MAAM,eC7ExB+R,GAAkBpH,aAAH,uGASfqH,GAAoBrH,aAAH,uGASjBqD,GAAY9P,KAAOC,IAAV,mPACA,qBAAGgN,SAEVhL,aADI,yEAEA4R,IAEJ5R,aAJI,yEAKA6R,OAGI,qBAAG5S,MAAkBG,OAAOwL,cAMxC,qBAAG3L,MAAkBS,aAAaiQ,MAMhC5N,GAAqBhE,aAAOiE,KAAPjE,CAAH,kDAIlB+T,GAAiB/T,KAAOC,IAAV,2KACT,qBAAGiB,MAAkBG,OAAO0O,QAKnC,qBAAG7O,MAAkBS,aAAaC,MAKhCoS,GAAgBhU,KAAOC,IAAV,mRAKf,qBAAGiB,MAAkBS,aAAaC,MAgBhC2Q,GAAkBvS,KAAOC,IAAV,qLAIjB,qBAAGiB,MAAkBS,aAAaC,MAQhCqS,GAAgBjU,KAAOC,IAAV,kDAIbiU,GAAiBlU,KAAOC,IAAV,oFAGhB,qBAAGiB,MAAkBS,aAAaiQ,MAKhCuC,GAAenU,KAAOC,IAAV,gIA2EHmU,GApEgD,SAAC,GAOzD,IANLC,EAMI,EANJA,QACAxG,EAKI,EALJA,IACAlI,EAII,EAJJA,WACA2H,EAGI,EAHJA,UACA0D,EAEI,EAFJA,cACA/D,EACI,EADJA,SAEMzC,EAAO6J,EAEP1P,EAAkBC,eAClB0P,EAA+B,OAApB9J,EAAK7E,WACdsI,EAA4BzD,EAA5ByD,WAAYpD,EAAgBL,EAAhBK,MAAO8C,EAASnD,EAATmD,KACrBpJ,EAAUiG,EAAKgB,UAAYhB,EAAKgB,SAASC,cAAcgC,QAAQ,UAAW,IAC1EK,EAAwBC,aAAyB,CACrDC,kBAAmBC,EAAWrD,QAC9BU,aAAcT,EAAMD,UAEhBQ,EAAYZ,EAAKG,YAAY0D,IAC7BkG,EAAG,sCAAkCnJ,GACrCoJ,EAAI,wCAAoCpJ,GAE9C,OACE,gBAAC,GAAD,CAAW6B,SAAUA,EAArB,UACE,gBAACgH,GAAD,WACGK,GACC,eAACP,GAAD,UACE,eAAC,GAAD,CAAoB/O,KAAI,6CAAwC8I,GAAhE,SACGnJ,EAAgB,IAAD,cAAaJ,GAAW,CAAEU,KAAMV,QAItD,eAAC,GAAD,CAAoBS,KAAMuP,EAA1B,SAAgC5P,EAAgB,IAAK,mBACrD,eAAC,GAAD,CAAoBK,KAAMwP,EAA1B,SAAiC7P,EAAgB,IAAK,mBACtD,gBAACqP,GAAD,WAEyB,IAAtBxJ,EAAKwE,aAAqB,eAAC,GAAD,IAAe,KACzCrB,EAAO,eAAC,GAAD,IAAc,QAED,IAAtBnD,EAAKwE,cACJ,gBAAC,KAAD,CAAMnK,eAAe,aAArB,UACE,gBAAC,KAAD,CAAMoK,MAAO,CAAE7C,SAAU,QAAzB,UAAoCzH,EAAgB,MAAO,eAA3D,WACA,gBAAC,KAAD,CAAMuH,MAAI,EAAC+C,MAAO,CAAE7C,SAAU,QAA9B,UAA0C5B,EAAKwE,aAAe,IAA9D,aAIN,gBAACkF,GAAD,WACE,gBAACC,GAAD,WACE,eAAC,KAAD,UAAOxP,EAAgB,IAAK,SAC5B,eAAC,GAAD,gBAASkJ,OAEX,gBAACsG,GAAD,WACE,eAAC,KAAD,UAAOxP,EAAgB,IAAK,gBAC5B,eAAC,GAAD,gBAAgBgB,OAElB,gBAACwO,GAAD,WACE,eAAC,KAAD,UAAOxP,EAAgB,IAAK,eAC5B,eAAC,GAAD,gBAAe2I,UAGnB,gBAAC,GAAD,WACE,eAAC,GAAD,6BAAmB9C,GAAnB,IAAyBwG,cAAeA,KACxC,eAACyD,GAAD,6BAAkBjK,GAAlB,IAAwBwG,cAAeA,YC5LzC0D,GAAQ1U,KAAOC,IAAV,uFAEA,qBAAGiB,MAAkBG,OAAO2O,cAIjC2E,GAAmB3U,KAAOC,IAAV,8FAmBP2U,GAT+B,SAAC,GAA8B,IAAD,IAA3BhR,aAA2B,MAAnB,GAAmB,EAAfiR,EAAe,EAAfA,SAC3D,OACE,iCACGjR,GAAS,eAAC8Q,GAAD,UAAQ9Q,IAClB,eAAC+Q,GAAD,UAAmBE,QvBOZC,GAAwC,CACnD,CACEC,GAAI,EACJ9P,KAAM,OACN+P,cAAe,IACfC,UAAU,EACVrR,MAAO,IAET,CACEmR,GAAI,EACJ9P,KAAM,SACN+P,cAAe,KACfC,UAAU,EACVrR,MAAO,UAET,CACEmR,GAAI,EACJ9P,KAAM,MACN+P,cAAe,IACfC,UAAU,EACVrR,MAAO,OAET,CACEmR,GAAI,EACJ9P,KAAM,UACN+P,cAAe,IACfC,UAAU,EACVrR,MAAO,KAIEsR,GAAyC,CACpD,CACEH,GAAI,EACJ9P,KAAM,OACN+P,cAAe,IACfC,UAAU,EACVrR,MAAO,IAET,CACEmR,GAAI,EACJ9P,KAAM,SACN+P,cAAe,KACfC,UAAU,EACVrR,MAAO,UAET,CACEmR,GAAI,EACJ9P,KAAM,MACN+P,cAAe,IACfC,UAAU,EACVrR,MAAO,OAET,CACEmR,GAAI,EACJ9P,KAAM,YACN+P,cAAe,IACfC,UAAU,EACVrR,MAAO,aAET,CACEmR,GAAI,EACJ9P,KAAM,aACN+P,cAAe,IACfC,UAAU,EACVrR,MAAO,cAET,CACEmR,GAAI,EACJ9P,KAAM,UACN+P,cAAe,IACfC,UAAU,EACVrR,MAAO,M,SAIC9D,K,cAAAA,E,aAAAA,Q,KwB3EZ,I,sDAAMqV,GAAQ,CACZtH,IAAKqC,GACL1F,KAAM+F,GACNM,OAAQE,GACRsD,QAAShD,GACT1L,WAAYkM,GACZvE,UAAW+E,IAGP+C,GAAYpV,KAAOC,IAAV,gLAOX,qBAAGiB,MAAkBS,aAAa6Q,MAKhC6C,GAAWrV,KAAOsV,GAAV,oFAEe,qBAAGpU,MAAkBG,OAAO0L,eAGnDwI,GAAmBvV,KAAOwV,GAAV,6DAIhBC,GAAgBzV,KAAOwV,GAAV,8EAKbE,GAAiB1V,KAAOwV,GAAV,qDA0HLG,GAtH2C,SAAC5T,GACzD,IAAQsS,EAA2BtS,EAA3BsS,QAASrD,EAAkBjP,EAAlBiP,cACX4E,IAAoBnF,aAAY4D,EAAQ3M,KAAKH,cAAc0C,WACjE,EAAsD5J,oBAASuV,GAA/D,oBAAOC,EAAP,KAA4BC,EAA5B,KACMC,EAAoBzG,GAAkBuG,EAAqB,KAC3DlR,EAAkBC,eAElBoR,EAAoB,WACxBF,GAAwBD,IAG1B/U,sBAAU,WACRgV,EAAuBF,KACtB,CAACA,IAEJ,MAAuBpE,eAAfC,EAAR,EAAQA,KAAMwE,EAAd,EAAcA,KAER1E,GAAYE,EACZyE,EAAc3E,EAAWuD,GAAqBI,GAC9CiB,EAAcD,EAAYpS,KAAI,SAACsS,GAAD,OAAYA,EAAOnR,QAqFvD,OACE,uCAnFKgR,EAiDH,gBAACZ,GAAD,CAAU1R,QAASqS,EAAnB,UACE,gCACE,8BACE,eAACN,GAAD,UACE,eAAC,GAAD,UACE,eAAC,GAAD,gBAAU3T,EAAMyI,aAItB,gCACE,eAAC+K,GAAD,UACE,eAAC,GAAD,CAAY3R,MAAOe,EAAgB,KAAM,UAAzC,SACE,eAAC,GAAD,6BAAY5C,EAAM8O,QAAlB,IAA0BG,cAAeA,SAG7C,eAACyE,GAAD,UACE,eAAC,GAAD,CAAY7R,MAAOe,EAAgB,IAAK,OAAxC,SACE,eAAC,GAAD,6BAAS5C,EAAM8L,KAAf,IAAoBuC,YAAU,eAKtC,8BACE,eAACgF,GAAD,UACE,eAAC,GAAD,UACE,eAAC,GAAD,CAAS9D,mBAAoBuE,aAxEnC,eAACR,GAAD,CAAU1R,QAASqS,EAAnB,SACGK,OAAOC,KAAKvU,GAAO+B,KAAI,SAACyS,GACvB,IAAMC,EAAcL,EAAYM,QAAQF,GACxC,IAAqB,IAAjBC,EACF,OAAO,KAGT,OAAQD,GACN,IAAK,UACH,OACE,8BACE,eAACnB,GAAD,UACE,eAAC,GAAD,UACE,eAAC,GAAD,CAAS9D,mBAAoBuE,SAH1BU,GAQb,IAAK,MACH,OACE,8BACE,eAACnB,GAAD,UACE,eAAC,GAAD,CAAYxR,MAAOe,EAAgB,IAAK,OAAxC,SACE,eAAC,GAAD,6BAAS5C,EAAM8L,KAAf,IAAoBuC,WAAYmB,UAH7BgF,GAQb,QACE,OACE,8BACE,eAACnB,GAAD,UACE,eAAC,GAAD,CACExR,MAAOe,EAAgBuR,EAAYM,GAAaxB,cAAekB,EAAYM,GAAa5S,OAD1F,SAGG8S,KAAMC,cAAcxB,GAAMoB,GAA1B,6BAAqCxU,EAAMwU,IAA3C,IAAiDvF,wBAL/CuF,SAqDpBR,GACC,8BACE,qBAAIa,QAAS,EAAb,SACE,eAAC,GAAD,6BAAiB7U,GAAjB,IAAwBkL,SAAU4I,aCtKxC/F,GAAY9P,KAAOC,IAAV,gIACH,qBAAGiB,MAAkB0L,KAAKiK,cAEtB,qBAAG3V,MAAkB0L,KAAKC,cAKpCiK,GAAe9W,KAAOC,IAAV,0GAQZ8W,GAAc/W,KAAOgX,MAAV,qKASXC,GAAYjX,KAAOkX,MAAV,sHASTC,GAAiBnX,KAAOC,IAAV,sDAIdmX,GAAwBpX,KAAOC,IAAV,0HA2CZoX,GApC0B,SAACtV,GACxC,IAAMuV,EAAiB1U,kBAAuB,MACxC+B,EAAkBC,eAChB2S,EAAiCxV,EAAjCwV,KAAMC,EAA2BzV,EAA3ByV,QAASxG,EAAkBjP,EAAlBiP,cAEfyG,EAASC,aAASF,EAASD,EAAM,CAAEtC,UAAU,EAAM0C,WAAY,SAA/DF,KAQR,OACE,eAAC,GAAD,UACE,gBAACN,GAAD,WACE,eAACL,GAAD,CAAcpT,IAAK4T,EAAnB,SACE,eAACP,GAAD,UACE,eAACE,GAAD,UACGQ,EAAK3T,KAAI,SAAC8T,GACT,OAAO,yBAAC,GAAD,6BAASA,EAAIC,UAAb,IAAuB7G,cAAeA,EAAeuF,IAAG,oBAAeqB,EAAI7C,gBAK1F,eAACqC,GAAD,UACE,gBAAC,KAAD,CAAQjS,QAAQ,OAAOxB,QAnBX,WAClB2T,EAAe/T,QAAQuU,eAAe,CACpCC,SAAU,YAiBN,UACGpT,EAAgB,IAAK,UACtB,eAAC,KAAD,CAAed,MAAM,uB,UClClBmU,GA1CuC,SAAC,GAA0D,IAK3GC,EALmDC,EAAuD,EAAvDA,wBAAyBC,EAA8B,EAA9BA,wBACxEC,EAAQC,eAARD,IACFnQ,EAAWC,eACXvD,EAAkBC,eAGxB,OAAQqD,EAASgB,UACf,IAAK,SACHgP,EAAc,EACd,MACF,IAAK,iBACHA,EAAc,EACd,MACF,IAAK,kBACHA,EAAc,EACd,MACF,QACEA,EAAc,EAIlB,OACE,eAAC,GAAD,UACE,gBAAC,KAAD,CAAYA,YAAaA,EAAaK,MAAM,KAAKnT,QAAQ,SAAzD,UACE,eAAC,KAAD,CAAgBoT,GAAIC,KAAMC,GAAE,UAAKL,GAAjC,SACGzT,EAAgB,KAAM,UAEzB,eAAC,KAAD,CAAiB+T,KAAMR,EAAvB,SACE,eAAC,KAAD,CAAgBK,GAAIC,KAAMC,GAAE,UAAKL,EAAL,YAA5B,SACGzT,EAAgB,IAAK,gBAG1B,eAAC,KAAD,CAAiB+T,KAAMP,EAAvB,SACE,eAAC,KAAD,CAAgBI,GAAIC,KAAMC,GAAE,UAAKL,EAAL,aAA5B,SACGzT,EAAgB,IAAK,0BAU5BZ,GAAU/D,KAAOC,IAAV,8MAUT,qBAAGiB,MAAkBS,aAAaC,M,qBC5DhC+W,GAAc3Y,aAAO4Y,KAAP5Y,CAAH,6EAKX6Y,GAAe7Y,KAAOC,IAAV,4GAEd,qBAAGiB,MAAkBS,aAAaC,MAMhCkO,GAAY9P,KAAOC,IAAV,6BAkCA6Y,GA5BsB,SAAC,GAAoC,IAAxBC,EAAuB,EAAjCrW,SACtC,EAA8BrC,qBAAS,GAAvC,oBAAO+Q,EAAP,KAAgB4H,EAAhB,KACA,EAAoC3Y,oBAAS,IAA7C,oBAAO4Y,EAAP,KAAmBC,EAAnB,KAEMC,EAAoBrN,oBACxB,kBAAMsN,MAAS,SAACC,GAAD,OAA4CN,EAAiBM,KAAI,OAChF,CAACN,IAQH,OACE,eAAC,GAAD,CAAW3H,QAASA,EAApB,SACE,eAACyH,GAAD,UACE,eAACF,GAAD,CACE/X,MAAOqY,EACPvW,SAVS,SAAC2W,GAChBH,EAAcG,EAAEC,OAAO1Y,OACvBuY,EAAkBE,IASZE,YAAY,eACZC,OAAQ,kBAAMR,GAAW,WCnC7BlJ,GAAY9P,KAAOC,IAAV,0FAGX,qBAAGiB,MAAkBS,aAAaC,MAwBvB6X,GAnB8C,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAClEC,EAAe,SAACC,GAChBH,IAAaG,GACfF,EAASE,IAIb,OACE,gBAAC,GAAD,WACE,eAAC,KAAD,CAAY1U,QAAQ,OAAOmT,MAAM,KAAK3U,QAAS,kBAAMiW,EAAa9Z,GAASga,OAA3E,SACE,eAAC,KAAD,CAAcjW,MAAO6V,IAAa5Z,GAASga,KAAO,UAAY,mBAEhE,eAAC,KAAD,CAAY3U,QAAQ,OAAOmT,MAAM,KAAK3U,QAAS,kBAAMiW,EAAa9Z,GAASia,QAA3E,SACE,eAAC,KAAD,CAAclW,MAAO6V,IAAa5Z,GAASia,MAAQ,UAAY,uBCKjEC,GAAmBha,KAAOC,IAAV,wTAUlB,qBAAGiB,MAAkBS,aAAaC,MAQhCqY,GAAgBja,KAAOC,IAAV,qIAKfia,MAKEC,GAAena,KAAOC,IAAV,oEACZia,MAKAE,GAAkBpa,KAAOC,IAAV,iKAMjB,qBAAGiB,MAAkBS,aAAaC,MAMhCyY,GAAera,KAAOC,IAAV,sSAWd,qBAAGiB,MAAkBS,aAAaC,MAUhCmC,GAAU/D,KAAOC,IAAV,6GAMPqa,GAAata,KAAOC,IAAV,oDAyaDsa,GAxZqB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YACxCC,EAASrC,eAATqC,KACAzR,EAAaf,eAAbe,SACFtE,EAAkBC,eACxB,EAA0C+V,eAA5BC,EAAd,EAAQrD,KAAesD,EAAvB,EAAuBA,eACjBlR,EAAYC,eAClB,EAA0BvJ,oBAAS,IAAnC,oBAAOya,EAAP,KAAcC,EAAd,KACA,EAAgC7a,GAAgBJ,GAASia,MAAO,qBAAhE,oBAAOL,EAAP,KAAiBsB,EAAjB,KACQvU,EAAYC,eAAZD,QACR,EAAoCpG,oBAAS,OAA7C,oBAAO4a,EAAP,KAAmBC,EAAnB,KACMC,EAASC,eAET7U,EAAWC,eACT6U,EAAgBC,eAAhBD,YACRva,sBAAU,WACJ2F,GACFF,EAASa,aAAuBX,MAEjC,CAACA,EAASF,EAAU8U,IAEvB,IAAME,EAAatS,EAASC,SAAS,YAC/BsS,EAAavS,EAASC,SAAS,WAC/BoL,GAAYkH,IAAeD,EAI3BvK,GAAiBvK,KAAcA,GAAWoU,EAEhD,EAAoCxa,qBAAUiU,GAA9C,oBAAOmH,EAAP,KAAmBC,EAAnB,KACA5a,sBAAU,WACR4a,GAAepH,KACd,CAACA,IAEJxT,sBAAU,WAERyF,EAASoV,aAAyBJ,IAI9BA,IACFhV,EAASqV,gBACLnV,GACFF,EAASa,aAAuBX,OAGnC,CAAC8U,EAAYhV,EAAUE,IAG1B,IAAMoV,EAAcjB,EAAQkB,QAAO,SAAAtR,GACjC,OAAIiQ,IACOjQ,EAAK9F,cAAgB+V,GAAmC,OAApBjQ,EAAK7E,aAAwBoW,aAAcvR,EAAK9C,OAEtF8C,EAAK7C,gBAAkB6S,KAAehQ,EAAK9F,cAAgB+V,GAAmC,OAApBjQ,EAAK7E,aAAwBoW,aAAcvR,EAAK9C,QAG/HsU,EAAgBpB,EAAQkB,QAAO,SAAAtR,GACnC,OAAIiQ,IACOjQ,EAAK9F,cAAgB+V,GAAmC,OAApBjQ,EAAK7E,aAAwBoW,aAAcvR,EAAK9C,OAEtF8C,EAAK7C,gBAAkB6S,KAAehQ,EAAK9F,cAAgB+V,GAAmC,OAApBjQ,EAAK7E,aAAwBoW,aAAcvR,EAAK9C,QAE/HuU,EAAgBrB,EAAQkB,QAAO,SAACtR,GAAD,OAAUuR,aAAcvR,EAAK9C,QAE5DwU,EAAkBL,EAAYC,QAClC,SAACtR,GAAD,OAAUA,EAAKM,UAAY,IAAIf,KAAUS,EAAKM,SAASvD,eAAeoE,cAAc,MAGhFwQ,EAAsBH,EAAcF,QACxC,SAACtR,GAAD,OAAUA,EAAKM,UAAY,IAAIf,KAAUS,EAAKM,SAASvD,eAAeoE,cAAc,MAGhFyQ,EAAsBH,EAAcH,QACxC,SAACtR,GAAD,OAAUA,EAAKM,UAAY,IAAIf,KAAUS,EAAKM,SAASvD,eAAeoE,cAAc,MAGhF0Q,EAAYrV,wBAChB,SAACsV,GACC,IAAIC,EAA+CD,EAAexY,KAAI,SAAC0G,GACrE,IAAKA,EAAKgS,sBAAwBrB,EAChC,OAAO3Q,EAGT,IAAMiS,EAAqBtB,EAAO9P,aAAWb,EAAKyD,WAAWrD,SAASmH,eAChE2K,EAAiB,IAAI3S,KAAUS,EAAKgS,qBAAqBG,MAAMF,GAC/D5O,EAAMyG,EAAWsI,aAAWpS,EAAKqS,WAAYlT,EAAW+S,GAAkB,EAEhF,OAAO,6BAAKlS,GAAZ,IAAkBqD,MAAKP,UAAWoP,OAGpC,GAAI5B,EAAO,CACT,IAAMgC,EAAiBhC,EAAM/I,cAC7BwK,EAAwBA,EAAsBT,QAAO,SAACtR,GACpD,OAAOA,EAAKgB,SAASuG,cAAc7I,SAAS4T,MAGhD,OAAOP,IAET,CAAC5S,EAAWwR,EAAQL,EAAOxG,IAOvByI,EAAcna,kBAAuB,MAE3C,EAAwDvC,oBAjH1B,IAiH9B,oBAAO2c,EAAP,KAA6BC,EAA7B,KACA,EAA0C5c,qBAAS,GAAnD,oBAAO6c,EAAP,KAAsBC,EAAtB,KAEMC,EAAsBtR,oBAAQ,WAClC,IAAIuR,EAAc,GA+BlB,OAVI/I,IACF+I,EAA2BhB,EAAbZ,EAAuBS,EAA6BL,IAEhEL,IACF6B,EAA2BhB,EAAbZ,EAAuBU,EAAiCH,IAEpET,IACF8B,EAA2BhB,EAAbZ,EAAuBW,EAAiCH,IA1BtD,SAACqB,GACjB,OAAQrC,GACN,IAAK,MACH,OAAOsC,mBAAQD,GAAO,SAAC9S,GAAD,OAA+BA,EAAKqD,MAAK,QACjE,IAAK,aACH,OAAO0P,mBACLD,GACA,SAAC9S,GAAD,OAAgCA,EAAK7E,WAAa4I,OAAO/D,EAAK7E,WAAW6X,MAAM,GAAI,IAAM,IACzF,QAEJ,IAAK,SACH,OAAOD,mBAAQD,GAAO,SAAC9S,GAAD,OAAgCA,EAAKM,SAAWN,EAAKM,SAASxB,SAAW,IAAI,QACrG,IAAK,YACH,OAAOiU,mBAAQD,GAAO,SAAC9S,GAAD,OAA+B+D,OAAO/D,EAAK8C,aAAY,QAC/E,QACE,OAAOgQ,GAcNG,CAAUJ,GAAaG,MAAM,EAAGR,KACtC,CACD/B,EACAY,EACAQ,EACAL,EACAC,EACA3H,EACAkH,EACAD,EACAa,EACAD,EACAV,EACAS,EACAc,IAGFlc,sBAAU,WAQHoc,IACsB,IAAIQ,sBART,SAACC,GACrB,aAAgBA,EAAhB,MACUC,gBACRX,GAAwB,SAACY,GAAD,OAA2BA,EAzK3B,QA8KuC,CAC/DC,WAAY,MACZC,UAAW,IAEIC,QAAQjB,EAAYxZ,SACrC4Z,GAAiB,MAElB,CAACC,EAAqBF,IAEzB,IAAMe,EAAUb,EAAoBtZ,KAAI,SAAC0G,GACvC,IAAQK,EAAsBL,EAAtBK,MAAOoD,EAAezD,EAAfyD,WACT3C,EAAeT,EAAMD,QACrBoD,EAAoBC,EAAWrD,QAC/BrG,EAAUiG,EAAKgB,UAAYhB,EAAKgB,SAASpF,MAAM,KAAK,GAAGqF,cAAcgC,QAAQ,UAAW,IA8B9F,MA5BsB,CACpBI,IAAK,CACHjN,MAAO4J,EAAKqD,KAAOrD,EAAKqD,IAAItF,eAAe,QAAS,CAAEiF,sBAAuB,IAC7E7H,WAAY6E,EAAK7E,WACjBpB,UACA+G,eACA0C,oBACArE,YACAwG,cAAe3F,EAAKqD,KAEtBrD,KAAM,CACJgG,MAAOhG,EAAKgB,SAASpF,MAAM,KAAK,GAAGiH,oBACnCzJ,MAAOW,EACPmD,IAAK8C,EAAK9C,KAEZmJ,OAAQ,CACNvH,SAAUjB,aAAiB,IAAI0B,KAAUS,EAAKM,SAASxB,WACvD5B,IAAK8C,EAAK9C,KAEZ4F,UAAW,CACTA,UAAW9C,EAAK8C,WAElB3H,WAAY,CACVA,WAAY6E,EAAK7E,YAEnB0O,QAAS7J,MA+DT0T,EAASvZ,EAAgB,IAAK,SAC9BwZ,EAAUxZ,EAAgB,IAAK,+BAC/ByZ,GAAazZ,EAAgB,IAAO,oDACpC0Z,GAAgB,KAChBC,GAAmB,KACnBC,GAAc,KAKd/D,GACF0D,EAASvZ,EAAgB,IAAK,QAC9BwZ,EAAUxZ,EAAgB,MAAO,6BACxB8V,IACTyD,EAASvZ,EAAgB,IAAK,YAC9BwZ,EAAUxZ,EAAgB,KAAM,yCAChCyZ,GAAazZ,EAAgB,KAAM,4DACnC0Z,GACE,gBAAC,KAAD,CAAS9F,GAAG,KAAK1U,MAAM,UAAUmC,GAAG,OAAOiJ,MAAO,CAAEuP,UAAW,QAA/D,iCACsB,oBAAGlF,OAAO,SAASmF,IAAI,aAAazZ,KAAK,8CAAzC,qCADtB,0EAIFsZ,GACE,eAAC,KAAD,CAAS/F,GAAG,KAAK1U,MAAM,UAAUmC,GAAG,OAAOiJ,MAAO,CAAEuP,UAAW,QAA/D,oMAIFD,GACE,gBAACjE,GAAD,WACA,eAAC,KAAD,CAAS/B,GAAG,KAAK1U,MAAM,YAAYmC,GAAG,MAAMiJ,MAAO,CAAEuP,UAAW,QAAhE,kBAGE,gBAAC,KAAD,CAAM3Z,eAAe,gBAArB,UACE,eAAC,KAAD,8BACA,eAAC,KAAD,sBAEF,gBAAC,KAAD,CAAMA,eAAe,gBAArB,UACE,eAAC,KAAD,8BACA,eAAC,KAAD,sBAEF,gBAAC,KAAD,CAAMA,eAAe,gBAArB,UACE,eAAC,KAAD,0CACA,eAAC,KAAD,oBAEF,gBAAC,KAAD,CAAMA,eAAe,gBAArB,UACE,eAAC,KAAD,6BACA,eAAC,KAAD,uDAQR,OACE,uCACE,gBAAC6Z,GAAA,EAAD,WACE,eAAC,KAAD,CAASnG,GAAG,KAAKpO,KAAK,MAAMtG,MAAM,YAAYmC,GAAG,OAAjD,SACGkY,IAEH,eAAC,KAAD,CAAS3F,GAAG,KAAKpO,KAAK,KAAKtG,MAAM,UAAUmC,GAAG,OAAOiJ,MAAO,CAAEuP,UAAW,QAAzE,SACGL,IAEH,eAAC,KAAD,CAAS5F,GAAG,KAAK1U,MAAM,YAAYmC,GAXtB,OAWsCiJ,MAAO,CAAEuP,UAAW,QAAvE,SACGJ,KAEFC,GACAC,GACAC,GACD,wBAEA,eAAC,GAAD,UACE,eAAC,KAAD,CAAQpU,KAAK,KAAb,SACE,oBAAGnF,KAAK,2BAAR,+BAKN,gBAAC2Z,GAAA,EAAD,WACE,gBAAC3E,GAAD,YAEKS,GACC,gBAACJ,GAAD,WACE,eAAC,GAAD,CAAYX,SAAUA,EAAUC,SAAU,SAACE,GAAD,OAAoBmB,EAAYnB,MAC1E,gBAACI,GAAD,WACE,eAAC,KAAD,CAAQ2E,QAASnD,EAAY/Y,SAAU,kBAAMgZ,GAAeD,IAAanD,MAAM,OAC/E,gBAAC,KAAD,eAAQ3T,EAAgB,KAAM,qBAEhC,eAAC,GAAD,CACEuT,wBAAyBiE,EAAoB0C,OAAS,EACtD1G,wBAAyBiE,EAAoByC,OAAS,OAK9D,gBAACzE,GAAD,WACE,gBAACD,GAAD,WACE,eAAC,KAAD,sBACA,eAAC,GAAD,CACE1X,QAAS,CACP,CACEmB,MAAO,MACPhD,MAAO,OAET,CACEgD,MAAO,MACPhD,MAAO,OAET,CACEgD,MAAO,aACPhD,MAAO,cAET,CACEgD,MAAO,SACPhD,MAAO,UAET,CACEgD,MAAO,YACPhD,MAAO,cAGX8B,SA7HiB,SAACY,GAC9B4X,EAAc5X,EAAO1C,aA+Hb,gBAACuZ,GAAD,CAAclL,MAAO,CAAE6P,WAAY,IAAnC,UACE,eAAC,KAAD,qBACA,eAAC,GAAD,CAAapc,SAxSC,SAACqc,GACzBhE,EAASgE,EAAMzF,OAAO1Y,mBAgHF,WACpB,IAAK6Z,GAAef,IAAa5Z,GAASia,OAASkE,EAAQY,OAAQ,CACjE,IAEMrH,EAFetC,GAEQpR,KAAI,SAACsS,GAAD,MAAa,CAC5CrB,GAAIqB,EAAOrB,GACX9P,KAAMmR,EAAOnR,KACbrB,MAAOwS,EAAOxS,MACdob,KAAM,SAAC/X,EAAsBgY,GAC3B,OAAQ7I,EAAOnR,MACb,IAAK,OACH,OAAOga,EAAElK,GAAK9N,EAAE8N,GAClB,IAAK,MACH,OAAI9N,EAAE4Q,SAAShK,IAAIjN,OAASqe,EAAEpH,SAAShK,IAAIjN,MAClC2N,OAAOtH,EAAE4Q,SAAShK,IAAIjN,OAAS2N,OAAO0Q,EAAEpH,SAAShK,IAAIjN,OAGvD,EACT,IAAK,SACH,OAAOqG,EAAE4Q,SAAShH,OAAOvH,SAAW2V,EAAEpH,SAAShH,OAAOvH,SACxD,QACE,OAAO,IAGb2L,SAAUmB,EAAOnB,aAGnB,OAAO,eAAC,GAAD,CAAOsC,KAAM0G,EAASzG,QAASA,EAASxG,cAAeA,IAGhE,OACE,+BACE,gBAACzL,GAAD,WACE,eAAC,KAAD,CAAO2Z,OAAK,EAACxE,KAAI,UAAKA,GAAtB,SACG0C,EAAoBtZ,KAAI,SAAC0G,GAAD,OACvB,eAAC,GAAD,CAAyBA,KAAMA,EAAMb,UAAWA,EAAWlD,QAASA,EAASpC,SAAS,GAAvEmG,EAAK9C,UAGxB,eAAC,KAAD,CAAOwX,OAAK,EAACxE,KAAI,UAAKA,EAAL,YAAjB,SACG0C,EAAoBtZ,KAAI,SAAC0G,GAAD,OACvB,eAAC,GAAD,CAAyBA,KAAMA,EAAMb,UAAWA,EAAWlD,QAASA,EAASpC,SAAO,GAArEmG,EAAK9C,UAGxB,eAAC,KAAD,CAAOwX,OAAK,EAACxE,KAAI,UAAKA,EAAL,aAAjB,SACG0C,EAAoBtZ,KAAI,SAAC0G,GAAD,OACvB,eAAC,GAAD,CAAyBA,KAAMA,EAAMb,UAAWA,EAAWlD,QAASA,EAASpC,SAAO,GAArEmG,EAAK9C,eA8IzByX,GACD,sBAAKzb,IAAKqZ,IACV,eAAC,KAAD,CAAO9W,IAAI,uBAAuBC,IAAI,eAAepE,MAAO,KAAMmB,OAAQ,IAAKmc,YAAU,Y,qFC/flF7S,IAZM,SAACxK,GACpB,IAAM4C,EAAkBC,cACxB,EAA0Bya,cAAlBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACPC,EAA0BC,YAAeH,EAAOC,GAAhDC,sBAER,OACE,cAAC,IAAD,yBAAQ7b,QAAS6b,GAA2Bzd,GAA5C,aACG4C,EAAgB,IAAK","file":"static/js/8.28e6f890.chunk.js","sourcesContent":["export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\r\n  }, [value, localStorageKey])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\r\n\r\nimport AprApy from './AprApy'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  aprApy?: any\r\n  farmAPR?: string\r\n  isKingdom?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n  aprApy,\r\n  isKingdom,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\r\n        <Text>{totalValueFormatted}</Text>\r\n      </Flex>\r\n      {isKingdom && (\r\n        <AprApy\r\n          aprApy={aprApy}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          isDetails\r\n        />\r\n      )}\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n        </StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst CoreTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = (props) => (\r\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nconst DualTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline {...props}>\r\n    Dual\r\n  </Tag>\r\n)\r\n\r\nconst ManualPoolTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Manual\r\n  </Tag>\r\n)\r\n\r\nconst CompoundingPoolTag = (props) => (\r\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n    Auto\r\n  </Tag>\r\n)\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag, NoFeeTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  depositFee?: number\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  // isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {/* isCommunityFarm ? <CommunityTag /> : <CoreTag /> */}\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery, useKingdom } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, isKingdom ? kingdomContract : masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  isKingdom?: boolean\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  isKingdom,\r\n  isTokenOnly,\r\n  isKingdomToken,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const location = useLocation()\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button onClick={onPresentDeposit} disabled={location.pathname.includes('archived')}>\r\n        {TranslateString(999, isTokenOnly || isKingdomToken ? 'Stake Token' : 'Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  isKingdom?: boolean\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, isKingdom }) => {\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalance}\r\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\r\n      </Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 12 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, isKingdomToken, isKingdom, token: { address } } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  // const lpContract = getBep20Contract(lpAddress, web3)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly || isKingdomToken){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress, isKingdomToken])\r\n\r\n  const { onApprove } = useApprove(lpContract, isKingdom)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        isKingdom={isKingdom}\r\n        isTokenOnly={farm.isTokenOnly}\r\n        isKingdomToken={farm.isKingdomToken}\r\n      />\r\n    ) : (\r\n      <Button\r\n        mt=\"8px\"\r\n        width=\"100%\"\r\n        disabled={requestedApproval || location.pathname.includes('archived')}\r\n        onClick={handleApprove}\r\n      >\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          CUB\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} isKingdom={isKingdom} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport useKingdomAPRAPY from 'hooks/useKingdomAPRAPY'\r\n// import Balance from 'components/Balance'\r\n\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\nimport AprApy from './AprApy'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n  depositFeeBP?: number\r\n  lpTokenBalancePCSv2?: number\r\n  lpTotalInQuoteTokenPCS?: number\r\n  poolWeightPCS?: string\r\n  pcsCompounding?: number\r\n  kingdomSupply?: string\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted = farm.liquidity && farm.liquidity.toNumber()\r\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CUB'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const exchangeUrl = farm.isKingdom ? PCS_ADD_LIQUIDITY_URL : BASE_ADD_LIQUIDITY_URL\r\n  const addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n\r\n  let aprApy = useKingdomAPRAPY(\r\n    farm.isKingdom,\r\n    farm.isKingdomToken,\r\n    Number(farm.tokenPriceVsQuote),\r\n    farm.poolWeightPCS,\r\n    farm.pcsCompounding,\r\n    farm.apr,\r\n    farm.lpTokenBalancePCSv2 ? farm.lpTokenBalancePCSv2 : 0,\r\n    farm.lpTotalInQuoteTokenPCS ? farm.lpTotalInQuoteTokenPCS : 0,\r\n  )\r\n\r\n  aprApy = { ...aprApy, pcsCompounding: farm.pcsCompounding, farmAPR, apr: farm.apr, cakePrice }\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.token.symbol === 'CUB' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n        depositFee={farm.depositFeeBP}\r\n      />\r\n      {!removed && farm.isKingdom ? (\r\n        <AprApy\r\n          aprApy={aprApy}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n        ) : (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{TranslateString(736, 'APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <>\r\n                  <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                  {farmAPR}%\r\n                </>\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )\r\n      }\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        {\r\n          farm.depositFeeBP ? (\r\n            <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n          ) : (\r\n            '0%'\r\n          )\r\n        }\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          // bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.token.address[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          aprApy={aprApy}\r\n          isKingdom={farm.isKingdom}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Text, Image } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const TranslateString = useI18n()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {TranslateString(999, 'FARMING')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const TranslateString = useI18n()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && TranslateString(658, 'Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const TranslateString = useI18n()\r\n  const tooltipContent = (\r\n    <div>\r\n      {TranslateString(999, 'The multiplier represents the amount of CUB rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {TranslateString(\r\n        999,\r\n        'For example, if a 1x farm was getting 1 CUB per block, a 40x farm would be getting 40 CUB per block.',\r\n      )}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, 'top-end', 'hover', undefined, undefined, [\r\n    20,\r\n    10,\r\n  ])\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity.toNumber() ? (\r\n    `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n  ) : (\r\n    '-'\r\n  )\r\n  const TranslateString = useI18n()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    TranslateString(999, 'The total value of the funds in this farm’s liquidity pool'),\r\n    'top-end',\r\n    'hover',\r\n    undefined,\r\n    undefined,\r\n    [20, 10],\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = 0\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default abalance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const TranslateString = useI18n()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>CUB </Title>\r\n        <Subtle>{TranslateString(1072, 'EARNED')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  isTokenOnly,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n  const tokenAddress = getAddress(token.address)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  // const lpContract = getBep20Contract(lpAddress, web3)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={location.pathname.includes('archived')}\r\n          >\r\n            {TranslateString(999, isTokenOnly ? 'Stake Token' : 'Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={requestedApproval || location.pathname.includes('archived')}\r\n          onClick={handleApprove}\r\n          variant=\"secondary\"\r\n        >\r\n          {TranslateString(999, 'Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LinkExternal, Text, Flex } from '@pancakeswap-libs/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { NoFeeTag, DualTag } from 'components/Tags'\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const TranslateString = useI18n()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://bscscan.com/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.cubdefi.com/#/add/${liquidityUrlPathParts}`}>\r\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {/* farm.isCommunity ? <CommunityTag /> : <CoreTag /> */}\r\n          {farm.depositFeeBP === 0 ? <NoFeeTag /> : null}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n        {farm.depositFeeBP !== 0 && (\r\n          <Flex justifyContent='flex-start'>\r\n            <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:&nbsp;</Text>\r\n            <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n          </Flex>\r\n        )}\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(736, 'APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const TranslateString = useI18n()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={TranslateString(736, 'APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout\r\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\r\n                      >\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={TranslateString(1072, 'Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(736, 'APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const TranslateString = useI18n()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {TranslateString(999, 'To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n  hasStakeInArchivedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms, hasStakeInArchivedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const TranslateString = useI18n()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(1198, 'Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {TranslateString(388, 'Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n        <NotificationDot show={hasStakeInArchivedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/archived`}>\r\n            {TranslateString(999, 'Discontinued')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          value={searchText}\r\n          onChange={onChange}\r\n          placeholder=\"Search farms\"\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\n// import { MigrationV2 } from 'components/Banner'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\n// import { useGetStats } from 'hooks/api'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n// import CardValue from '../Home/components/CardValue'\r\n\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\n/* const StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n` */\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n  kingdomMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = ({ tokenMode, kingdomMode }) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const prices = useGetApiPrices()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    // Makes the main scheduled fetching to request archived farms data\r\n    dispatch(setLoadArchivedFarmsData(isArchived))\r\n\r\n    // Immediately request data for archived farms so users don't have to wait\r\n    // 60 seconds for public data and 10 seconds for user data\r\n    if (isArchived) {\r\n      dispatch(fetchFarmsPublicDataAsync())\r\n      if (account) {\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n      }\r\n    }\r\n  }, [isArchived, dispatch, account])\r\n\r\n  // const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, prices, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (!kingdomMode && viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  let header = TranslateString(674, 'Farms')\r\n  let heading = TranslateString(320, 'Stake LP tokens to earn CUB')\r\n  let subHeading = TranslateString(10000, 'Deposit Fee will be used to buyback CUB and bLEO')\r\n  let subHeadingPCS = null\r\n  let subHeadingCertik = null\r\n  let kingdomFees = null\r\n  // let extra = null\r\n  // const data = useGetStats()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  if (tokenMode) {\r\n    header = TranslateString(674, 'Dens')\r\n    heading = TranslateString(10002, 'Stake tokens to earn CUB')\r\n  } else if (kingdomMode) {\r\n    header = TranslateString(674, 'Kingdoms')\r\n    heading = TranslateString(null, 'Kingdoms: Composable Auto-Compounding')\r\n    subHeading = TranslateString(null, 'Stake tokens for cross-platform farming plus CUB rewards')\r\n    subHeadingPCS = (\r\n      <Heading as=\"h2\" color=\"warning\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n        IMPORTANT: Must use <a target=\"_blank\" rel=\"noreferrer\" href=\"https://exchange.pancakeswap.finance/#/pool\">Pancakeswap V2 Exchange</a> for V2 Kingdom LP tokens until we add a V2 exchange for Cub Finance\r\n      </Heading>\r\n    )\r\n    subHeadingCertik = (\r\n      <Heading as=\"h2\" color=\"warning\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n        CertiK Audit is Pending: Our other contracts have been audited by CertiK and Kingdoms are currently under review. Please use at your own discretion until the audit has been published\r\n      </Heading>\r\n    )\r\n    kingdomFees = (\r\n      <FeeWrapper>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\r\n        Fees\r\n      </Heading>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Management Fee:</Text>\r\n          <Text>0.9%</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Withdrawal Fee:</Text>\r\n          <Text>None</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Fee to CUB Staking Kingdom:</Text>\r\n          <Text>1%</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>CUB Burn Rate:</Text>\r\n          <Text>100% of Fees Buyback and Burn CUB</Text>\r\n        </Flex>\r\n      </FeeWrapper>\r\n    )\r\n  }\r\n\r\n  const tlvSpacing = '20px'\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"15px\">\r\n          {header}\r\n        </Heading>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n          {heading}\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb={tlvSpacing} style={{ textAlign: 'left' }}>\r\n          {subHeading}\r\n        </Heading>\r\n        {subHeadingPCS}\r\n        {subHeadingCertik}\r\n        {kingdomFees}\r\n        <br/>\r\n        {/* extra */}\r\n        <Wrapper>\r\n          <Button size=\"sm\">\r\n            <a href=\"https://docs.cubdefi.com\">Learn More</a>\r\n          </Button>\r\n        </Wrapper>\r\n      </PageHeader>\r\n      {/* <MigrationV2 /> */}\r\n      <Page>\r\n        <ControlContainer>\r\n          {\r\n            !kingdomMode && (\r\n              <ViewControls>\r\n                <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n                <ToggleWrapper>\r\n                  <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n                  <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n                </ToggleWrapper>\r\n                <FarmTabButtons\r\n                  hasStakeInFinishedFarms={stakedInactiveFarms.length > 0}\r\n                  hasStakeInArchivedFarms={stakedArchivedFarms.length > 0}\r\n                />\r\n              </ViewControls>\r\n            )\r\n          }\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Hot',\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <Image src=\"/images/cub/wide.svg\" alt=\"illustration\" width={1352} height={587} responsive />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n"],"sourceRoot":""}