{"version":3,"sources":["components/layout/Flex.tsx","hooks/usePersistState.ts","components/PageHeader/PageHeader.tsx","components/Select/Select.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","hooks/useTotalCakeBalance.ts","components/Balance.tsx","views/Farms/components/types.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useApprove.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","components/ApyCalculatorModal/index.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","hooks/useI18n.ts","views/Home/components/CardValue.tsx","utils/callHelpers.ts","hooks/useContract.ts","hooks/useWeb3.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","views/Home/components/CardBusdValue.tsx","utils/apr.ts"],"names":["FlexLayout","styled","div","usePersistState","initialValue","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","Outer","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","DropDownHeader","shadows","inset","inputSecondary","input","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","width","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onChange","containerRef","useRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","height","containerSize","setContainerSize","toggling","onOptionClicked","option","current","offsetWidth","offsetHeight","ref","onClick","label","color","map","Wrapper","primary","ExpandableSectionButton","expanded","TranslateString","useI18n","aria-label","role","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","useTotalCakeBalance","BigNumber","balances","setBalance","fastRefresh","useRefresh","a","callsNonBnbPools","address","name","params","multicall","cakeABI","balanceMaster","fetchTotalStakeBalance","Balance","fontSize","decimals","isDisabled","unit","previousValue","start","end","duration","separator","ViewMode","StyledLinkExternal","LinkExternal","DetailsSection","apr","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","isKingdom","cubAPR","totalStakedCake","tokenPrice","useGetApiPrice","getPoolApr","getBalanceNumber","parseFloat","extra","dailyAPR","toNumber","farmAPY","totalAPYString","toLocaleString","maximumFractionDigits","justifyContent","toFixed","href","DualTag","variant","outline","NoFeeTag","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","src","alt","flexDirection","split","useApprove","lpContract","dispatch","useAppDispatch","account","useWeb3React","masterChefContract","useMasterchef","kingdomContract","useKingdom","onApprove","useCallback","console","log","approve","tx","fetchFarmUserDataAsync","useStake","pid","onStake","amount","stake","txHash","info","useUnstake","onUnstake","unstake","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","StyledInput","Input","xs","StyledErrorMessage","Text","ModalInput","max","symbol","onSelectMax","inputTitle","isBalanceZero","style","position","pl","balance","balanceNumber","Number","undefined","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","gt","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","stakedBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","pathname","includes","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","isTokenOnly","token","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","getBep20Contract","handleApprove","textTransform","pr","mt","UnlockButton","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","roundingDecimals","compoundFrequency","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","getRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","linkLabel","linkHref","earningTokenSymbol","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","Divider","borderColor","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","exchangeUrl","PCS_ADD_LIQUIDITY_URL","BASE_ADD_LIQUIDITY_URL","isCommunityFarm","isCommunity","depositFeeBP","display","CardActionsContainer","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","targetRef","tooltipVisible","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","countUp","update","updateValue","marginBottom","marginTop","expandAnimation","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","hasStakeInArchivedFarms","url","useRouteMatch","as","Link","to","show","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","FeeWrapper","Farms","tokenMode","kingdomMode","path","useFarms","farmsLP","userDataLoaded","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","isArchived","isInactive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","header","heading","subHeading","subHeading2","kingdomFees","textAlign","rel","Page","checked","marginLeft","sort","b","exact","renderContent","responsive","translations","TranslationsContext","fallback","foundTranslation","find","translation","stringId","includesVariable","interpolatedText","isEmpty","forEach","dataKey","templateKey","RegExp","CardValue","lineHeight","prefix","methods","ethers","constants","MaxUint256","send","from","deposit","DEFAULT_TOKEN_DECIMAL","toString","on","transactionHash","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","gas","leaveStaking","withdraw","sousUnstake","emergencyWithdraw","sousEmergencyUnstake","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","useCake","getCakeContract","useLottery","getLotteryContract","getMasterchefContract","getKingdomsContract","useSousChef","getSouschefContract","library","refEth","Web3","getWeb3NoAccount","setweb3","farmPid","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useAuth","login","logout","onPresentConnectModal","useWalletModal","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","PCS_BLOCKS_PER_YEAR","totalStakingTokenInPool","isNaN","cakePriceUsd","poolLiquidityUsd","yearlyCakeRewardAllocation","CAKE_PER_BLOCK","BLOCKS_PER_YEAR"],"mappings":"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","file":"static/js/6.d726436a.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\r\n  }, [value, localStorageKey])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap-libs/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? TranslateString(1066, 'Hide') : TranslateString(658, 'Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\n// import { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport multicall from 'utils/multicall'\r\n// import { convertSharesToCake } from 'views/Pools/helpers'\r\n// import { getCakeVaultContract } from 'utils/contractHelpers'\r\n// import makeBatchRequest from 'utils/makeBatchRequest'\r\nimport useRefresh from './useRefresh'\r\n\r\n// const cakeVaultContract = getCakeVaultContract()\r\n\r\nconst useTotalCakeBalance = () => {\r\n  const [balances, setBalance] = useState(new BigNumber(0))\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchTotalStakeBalance = async () => {\r\n      const callsNonBnbPools = [\r\n        {\r\n          address: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n          name: 'balanceOf',\r\n          params: ['0x73feaa1eE314F8c655E354234017bE2193C9E24E'],\r\n        },\r\n      ]\r\n\r\n      const [balanceMaster] = await multicall(cakeABI, callsNonBnbPools)\r\n      // return balanceMaster\r\n\r\n      /* const [sharePrice, shares] = await makeBatchRequest([\r\n        cakeVaultContract.methods.getPricePerFullShare().call,\r\n        cakeVaultContract.methods.totalShares().call,\r\n      ])\r\n\r\n      const totalSharesAsBigNumber = new BigNumber(shares as string)\r\n      const sharePriceAsBigNumber = new BigNumber(sharePrice as string)\r\n      const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\r\n      const totalCakeInVault = totalCakeInVaultEstimate.cakeAsBigNumber.toJSON()\r\n\r\n      const totalManualCake = new BigNumber(balanceMaster).minus(new BigNumber(totalCakeInVault))\r\n\r\n      setBalance(totalManualCake) */\r\n\r\n      setBalance(new BigNumber(balanceMaster))\r\n    }\r\n\r\n    fetchTotalStakeBalance()\r\n  }, [fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useTotalCakeBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface TextProps {\r\n  isDisabled?: boolean\r\n  fontSize?: string\r\n  color?: string\r\n  bold?: boolean\r\n}\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value?: number\r\n  decimals?: number\r\n  unit?: string\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {value && unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nBalance.defaultProps = {\r\n  fontSize: '32px',\r\n  isDisabled: false,\r\n  color: 'text',\r\n  decimals: 3,\r\n}\r\n\r\nexport default Balance\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport useTotalCakeBalance from 'hooks/useTotalCakeBalance'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useGetApiPrice } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  isKingdom?: boolean\r\n  cubAPR?: number\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n  isKingdom,\r\n  cubAPR,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const totalStakedCake = useTotalCakeBalance()\r\n  const tokenPrice = useGetApiPrice('0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82')\r\n\r\n  let apr:number\r\n  if (isKingdom) {\r\n    apr = getPoolApr(\r\n      tokenPrice,\r\n      tokenPrice,\r\n      getBalanceNumber(totalStakedCake, 18),\r\n      parseFloat('10'),\r\n    )\r\n  }\r\n\r\n  let extra = null\r\n  if (isKingdom) {\r\n    const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\r\n\r\n    const farmAPY = ((((apr / 100 / 4500) + 1) ** 4500) - 1) * 100\r\n    const totalAPY = cubAPR + farmAPY\r\n    const totalAPYString = cubAPR && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n    extra = (\r\n      <>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Farm APR')}:</Text>\r\n          <Text>{`${new BigNumber(apr).toFixed(2)}% (${new BigNumber(dailyAPR).toFixed(2)}%)`}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Compounds per year')}:</Text>\r\n          <Text>~4,500</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            value={farmAPY}\r\n            decimals={2}\r\n            unit=\"%\"\r\n          />\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'CUB APR')}:</Text>\r\n          <Text>{cubAPR && cubAPR.toLocaleString('en-US', { maximumFractionDigits: 2 })}%</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Total APY')}:</Text>\r\n          <Text>{totalAPYString}%</Text>\r\n        </Flex>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\r\n        <Text>{totalValueFormatted}</Text>\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n        </StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n      {extra}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst CoreTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = (props) => (\r\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nconst DualTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline {...props}>\r\n    Dual\r\n  </Tag>\r\n)\r\n\r\nconst ManualPoolTag = (props) => (\r\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\r\n    Manual\r\n  </Tag>\r\n)\r\n\r\nconst CompoundingPoolTag = (props) => (\r\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\r\n    Auto\r\n  </Tag>\r\n)\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag, NoFeeTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  depositFee?: number\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  // isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {/* isCommunityFarm ? <CommunityTag /> : <CoreTag /> */}\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery, useKingdom } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      console.log('lpContract',lpContract)\r\n      console.log('isKingdom',isKingdom)\r\n      console.log('account',account)\r\n      const tx = await approve(lpContract, isKingdom ? kingdomContract : masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nconst useStake = (pid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(isKingdom ? kingdomContract : masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, kingdomContract, isKingdom],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nconst useUnstake = (pid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(isKingdom ? kingdomContract : masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, kingdomContract, isKingdom],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23, 78]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceNumber = Number(balance)\r\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\r\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\r\n    }\r\n    return balanceNumber.toLocaleString()\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance(max)}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  isKingdom?: boolean\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  isKingdom,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const location = useLocation()\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button onClick={onPresentDeposit} disabled={location.pathname.includes('archived')}>\r\n        {TranslateString(999, 'Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  isKingdom?: boolean\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, isKingdom }) => {\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalance}\r\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\r\n      </Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {TranslateString(562, 'Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, token: { address }, isKingdom } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  // const lpContract = getBep20Contract(lpAddress, web3)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress])\r\n\r\n  const { onApprove } = useApprove(lpContract, isKingdom)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        isKingdom={isKingdom}\r\n      />\r\n    ) : (\r\n      <Button\r\n        mt=\"8px\"\r\n        width=\"100%\"\r\n        disabled={requestedApproval || location.pathname.includes('archived')}\r\n        onClick={handleApprove}\r\n      >\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          CUB\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} isKingdom={isKingdom} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const aprAsDecimal = farmApr / 100\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CUB',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {earningTokenSymbol} {TranslateString(999, 'per')} $1000\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          `Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={`${TranslateString(999, 'Get')} ${lpLabel}`}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\n\r\n\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted = farm.liquidity.toNumber()\r\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CUB'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const exchangeUrl = farm.isKingdom ? PCS_ADD_LIQUIDITY_URL : BASE_ADD_LIQUIDITY_URL\r\n  const addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.token.symbol === 'CUB' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n        depositFee={farm.depositFeeBP}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          // bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.token.address[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          isKingdom={farm.isKingdom}\r\n          cubAPR={farm.apr}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Text, Image } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const TranslateString = useI18n()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {TranslateString(999, 'FARMING')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const TranslateString = useI18n()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && TranslateString(658, 'Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const TranslateString = useI18n()\r\n  const tooltipContent = (\r\n    <div>\r\n      {TranslateString(999, 'The multiplier represents the amount of CUB rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {TranslateString(\r\n        999,\r\n        'For example, if a 1x farm was getting 1 CUB per block, a 40x farm would be getting 40 CUB per block.',\r\n      )}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, 'top-end', 'hover', undefined, undefined, [\r\n    20,\r\n    10,\r\n  ])\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity.toNumber() ? (\r\n    `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n  ) : (\r\n    '-'\r\n  )\r\n  const TranslateString = useI18n()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    TranslateString(999, 'The total value of the funds in this farm’s liquidity pool'),\r\n    'top-end',\r\n    'hover',\r\n    undefined,\r\n    undefined,\r\n    [20, 10],\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = 0\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default abalance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const TranslateString = useI18n()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>CUB </Title>\r\n        <Subtle>{TranslateString(1072, 'EARNED')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={location.pathname.includes('archived')}\r\n          >\r\n            {TranslateString(999, 'Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={requestedApproval || location.pathname.includes('archived')}\r\n          onClick={handleApprove}\r\n          variant=\"secondary\"\r\n        >\r\n          {TranslateString(999, 'Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LinkExternal, Text, Flex } from '@pancakeswap-libs/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { NoFeeTag, DualTag } from 'components/Tags'\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const TranslateString = useI18n()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://bscscan.com/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.cubdefi.com/#/add/${liquidityUrlPathParts}`}>\r\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {/* farm.isCommunity ? <CommunityTag /> : <CoreTag /> */}\r\n          {farm.depositFeeBP === 0 ? <NoFeeTag /> : null}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n        {farm.depositFeeBP !== 0 && (\r\n          <Flex justifyContent='flex-start'>\r\n            <Text style={{ fontSize: '16px' }}>{TranslateString(10001, 'Deposit Fee')}:&nbsp;</Text>\r\n            <Text bold style={{ fontSize: '16px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n          </Flex>\r\n        )}\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(736, 'APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const TranslateString = useI18n()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={TranslateString(736, 'APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout\r\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\r\n                      >\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={TranslateString(1072, 'Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(736, 'APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const TranslateString = useI18n()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {TranslateString(999, 'To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n  hasStakeInArchivedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms, hasStakeInArchivedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const TranslateString = useI18n()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(1198, 'Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {TranslateString(388, 'Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n        <NotificationDot show={hasStakeInArchivedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/archived`}>\r\n            {TranslateString(999, 'Discontinued')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          value={searchText}\r\n          onChange={onChange}\r\n          placeholder=\"Search farms\"\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\n// import { MigrationV2 } from 'components/Banner'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\n// import { useGetStats } from 'hooks/api'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n// import CardValue from '../Home/components/CardValue'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n`\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\n/* const StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n` */\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n  kingdomMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = ({ tokenMode, kingdomMode }) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const prices = useGetApiPrices()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    // Makes the main scheduled fetching to request archived farms data\r\n    dispatch(setLoadArchivedFarmsData(isArchived))\r\n\r\n    // Immediately request data for archived farms so users don't have to wait\r\n    // 60 seconds for public data and 10 seconds for user data\r\n    if (isArchived) {\r\n      dispatch(fetchFarmsPublicDataAsync())\r\n      if (account) {\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n      }\r\n    }\r\n  }, [isArchived, dispatch, account])\r\n\r\n  // const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  // const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter(farm => {\r\n    if (kingdomMode) {\r\n      return !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n    }\r\n    return !!farm.isTokenOnly === !!tokenMode && !!farm.isKingdom === !!kingdomMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid)\r\n  })\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, prices, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  let header = TranslateString(674, 'Farms')\r\n  let heading = TranslateString(320, 'Stake LP tokens to earn CUB')\r\n  let subHeading = TranslateString(10000, 'Deposit Fee will be used to buyback CUB and bLEO')\r\n  let subHeading2 = null\r\n  let kingdomFees = null\r\n  // let extra = null\r\n  // const data = useGetStats()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  if (tokenMode) {\r\n    header = TranslateString(674, 'Dens')\r\n    heading = TranslateString(10002, 'Stake tokens to earn CUB')\r\n  } else if (kingdomMode) {\r\n    header = TranslateString(674, 'Kingdoms')\r\n    heading = TranslateString(null, 'Kingdoms: Composable Auto-Compounding')\r\n    subHeading = TranslateString(null, 'Stake tokens for cross-platform farming plus CUB rewards')\r\n    subHeading2 = (\r\n      <Heading as=\"h2\" color=\"warning\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n        IMPORTANT: Must use <a target=\"_blank\" rel=\"noreferrer\" href=\"https://exchange.pancakeswap.finance/#/pool\">Pancakeswap V2 Exchange</a> for V2 Kingdom LP tokens until we add a V2 exchange for Cub Finance\r\n      </Heading>\r\n    )\r\n    kingdomFees = (\r\n      <FeeWrapper>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\r\n        Fees\r\n      </Heading>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Controller fee:</Text>\r\n          <Text>0.4% on profits to controller</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Platform fee:</Text>\r\n          <Text>0.5% on profits to platform</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>CUB buyback rate:</Text>\r\n          <Text>1.5% on profits</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Entrance fee:</Text>\r\n          <Text>{`< 0.1% on capital to pool`}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Withdrawal fee:</Text>\r\n          <Text>none</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>Fee to CUB staking kingdom:</Text>\r\n          <Text>1% on profits</Text>\r\n        </Flex>\r\n      </FeeWrapper>\r\n    )\r\n  }\r\n\r\n  const tlvSpacing = '20px'\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"15px\">\r\n          {header}\r\n        </Heading>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"20px\" style={{ textAlign: 'left' }}>\r\n          {heading}\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb={tlvSpacing} style={{ textAlign: 'left' }}>\r\n          {subHeading}\r\n        </Heading>\r\n        {subHeading2}\r\n        {kingdomFees}\r\n        <br/>\r\n        {/* extra */}\r\n        <Wrapper>\r\n          <Button size=\"sm\">\r\n            <a href=\"https://docs.cubdefi.com\">Learn More</a>\r\n          </Button>\r\n        </Wrapper>\r\n      </PageHeader>\r\n      {/* <MigrationV2 /> */}\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons\r\n              hasStakeInFinishedFarms={stakedInactiveFarms.length > 0}\r\n              hasStakeInArchivedFarms={stakedArchivedFarms.length > 0}\r\n            />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Hot',\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <Image src=\"/images/cub/wide.svg\" alt=\"illustration\" width={1352} height={587} responsive />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import { useContext } from 'react'\r\nimport { isEmpty } from 'lodash'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\ninterface ContextData {\r\n  [key: string]: number | string\r\n}\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\r\n    if (translations.length === 0) {\r\n      return fallback\r\n    }\r\n\r\n    const foundTranslation = translations.find((translation) => {\r\n      return translation.data.stringId === translationId\r\n    })\r\n\r\n    if (foundTranslation) {\r\n      const { text } = foundTranslation.data\r\n      const includesVariable = text.includes('%')\r\n\r\n      if (includesVariable) {\r\n        let interpolatedText = text\r\n\r\n        // If dynamic tags are found but no data was passed return the fallback\r\n        if (isEmpty(data)) {\r\n          return fallback\r\n        }\r\n\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return text\r\n    }\r\n\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  /* if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } */\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking('0')\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getKingdomsContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useKingdom = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getKingdomsContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(isKingdom ? kingdomContract : masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, PCS_BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\n// export const getPoolApr = (\r\n//   stakingTokenPrice: number,\r\n//   rewardTokenPrice: number,\r\n//   totalStaked: number,\r\n//   tokenPerBlock: number,\r\n// ): number => {\r\n//   const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(PCS_BLOCKS_PER_YEAR)\r\n//   const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n//   const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n//   return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n// }\r\n\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(PCS_BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const liquidity = poolLiquidityUsd.toNumber() ? poolLiquidityUsd : new BigNumber(1)\r\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(liquidity).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\nexport default null\r\n"],"sourceRoot":""}