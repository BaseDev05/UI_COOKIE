{"version":3,"sources":["hooks/useKingdomAPRAPY.ts","components/Balance.tsx","views/Kingdoms/components/KingdomCard.tsx","views/Kingdoms/components/AprApy.tsx","views/Kingdoms/components/KingdomDetail.tsx","views/Kingdoms/components/DividerBlue.tsx","views/Kingdoms/components/Spacer.tsx","views/Kingdoms/components/Kingdom.tsx","views/Kingdoms/components/CardValue.tsx","views/Kingdoms/hooks/useTotalStaked.ts","views/Kingdoms/components/TotalStaked.tsx","views/Kingdoms/Kingdoms.tsx"],"names":["useKingdomAPRAPY","farm","apr","cubAPR","isKingdom","poolWeightPCS","compounding","lpTokenBalancePCS","lpTokenBalanceMC","lpTotalInQuoteTokenPCS","quoteTokenPriceUsd","quoteToken","busdPrice","altPid","farmType","beltAPR","cakePrice","useBusdPriceFromPid","bakePrice","useBusdPriceFromLpSymbol","beltPrice","newFarm","useFarmFromPid","totalLiquidity","BigNumber","lpTotalInQuoteToken","times","getFarmApr","poolWeight","tokenPriceVsQuote","dailyAPR","div","toNumber","farmAPY","totalAPY","totalAPYString","toLocaleString","maximumFractionDigits","pcsApr","newMultiplier","multiplier","lpSymbol","getPoolApr","Number","token","getBalanceNumber","DEFAULT_TOKEN_DECIMAL","parseFloat","farmTokenPrice","Balance","value","fontSize","color","decimals","isDisabled","unit","bold","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultProps","KCard","styled","props","theme","card","background","Button","UiButton","Values","Brackets","span","colors","text","KingdomCard","walletBalance","depositBalance","rewardBalance","walletBalanceQuoteValue","depositBalanceQuoteValue","addLiquidityUrl","account","location","useLocation","useState","requestedApproval","setRequestedApproval","pendingTx","setPendingTx","pid","isTokenOnly","isKingdomToken","lpAddresses","address","tokenName","toUpperCase","userData","allowance","allowanceAsString","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","usePriceCakeBusd","earningsBusd","multipliedBy","web3","useWeb3","onStake","useStake","onUnstake","useUnstake","onReward","useHarvest","isApproved","isGreaterThan","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","lpAddress","getAddress","tokenAddress","lpContract","useMemo","getBep20Contract","onApprove","useApprove","handleApprove","useCallback","a","console","error","approvedButton","mt","disabled","pathname","includes","onClick","className","justifyContent","CardBusdValue","fullWidth","AprApy","aprApy","lpLabel","TranslateString","useI18n","farmAPR","toFixed","alignItems","style","display","ApyButton","height","width","Details","Detail","KDetail","StyledLinkExternal","Link","CubKingdom","KingdomDetail","farmName","oneTokenQuoteValue","removed","tokenValueFormated","toString","kingdomContract","replace","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","process","farmContract","vaultContract","infoAddress","exchangeUrl","PCS_ADD_LIQUIDITY_URL","buyTokenUrl","BASE_EXCHANGE_URL","BAKERY_ADD_LIQUIDITY_URL","BELT_EXCHANGE","displayMultiplier","external","href","symbol","primary","ExpandingWrapper","expanded","K","RainbowLight","keyframes","StyledCardAccent","KImage","Image","KMain","Kingdom","updateTotalStake","showExpandableSection","setShowExpandableSection","farmImage","split","toLocaleLowerCase","earnings","rawTokenBalance","rawStakedBalance","rawEarningsBalance","tokenPrice","totalValueFormated","undefined","Spacer","role","src","alt","StyledText","Text","CardValue","prefix","useCountUp","countUp","update","updateValue","useTotalStaked","farms","rawTotalCUB","BIG_ZERO","rawTotalStakedUSD","rawTotalAPY","rawTotalDailyAPR","count","forEach","plus","stakedUSD","cubEarned","Wrapper","TotalStaked","totalStake","totalStakeUSD","totalCub","totalCubUSD","totalDailyAPR","avgAPY","stakedUSDFormatted","dailyFormatted","cubUSDFormatted","FeeWrapper","Kingdoms","totalValue","useTotalValueKingdoms","useFarms","farmsLP","data","userDataLoaded","useWeb3React","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","isActive","activeFarms","filter","isArchivedPid","farmsList","farmsToDisplay","map","liquidity","farmsStakedMemoized","farmsStaked","setTotalStake","log","PageHeader","as","size","mb","textAlign","Page","id"],"mappings":"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","file":"static/js/7.ce58fd8f.chunk.js","sourcesContent":["// import { useCallback } from 'react'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { getPoolApr, getFarmApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useBusdPriceFromPid, useFarmFromPid, useBusdPriceFromLpSymbol } from 'state/hooks'\r\n// import Balance from 'components/Balance'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\n\r\nconst useKingdomAPRAPY = (\r\n  farm: FarmWithStakedValue,\r\n) => {\r\n  const { apr: cubAPR, isKingdom, poolWeightPCS, compounding, lpTokenBalancePCS: lpTokenBalanceMC = 0, lpTotalInQuoteTokenPCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, altPid, farmType, beltAPR } = farm\r\n\r\n  const cakePrice = useBusdPriceFromPid(0)\r\n  const bakePrice = useBusdPriceFromLpSymbol('BAKE-BNB LP')\r\n  const beltPrice = useBusdPriceFromLpSymbol('BELT-BNB LP')\r\n\r\n  const newFarm = useFarmFromPid(altPid)\r\n  let apr:number\r\n  let data = null\r\n\r\n  if (altPid === 12) {\r\n    const totalLiquidity = new BigNumber(newFarm.lpTotalInQuoteToken).times(newFarm.quoteToken.busdPrice)\r\n    apr = getFarmApr(newFarm.poolWeight, newFarm.tokenPriceVsQuote, totalLiquidity)\r\n\r\n    const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\r\n\r\n    const farmAPY = ((((apr / 100 / compounding) + 1) ** compounding) - 1) * 100\r\n    const totalAPY = farmAPY\r\n    const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n    data = { pcsApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString, newMultiplier: newFarm.multiplier }\r\n\r\n    return data\r\n  }\r\n\r\n  if (farm.lpSymbol === 'CAKE') {\r\n    apr = getPoolApr(\r\n      Number(farm.token.busdPrice),\r\n      Number(farm.token.busdPrice),\r\n      getBalanceNumber(new BigNumber(lpTokenBalanceMC).times(DEFAULT_TOKEN_DECIMAL), 18),\r\n      parseFloat('10') // CAKE is 10\r\n    )\r\n  } else {\r\n    const totalLiquidity = new BigNumber(lpTotalInQuoteTokenPCS).times(quoteTokenPriceUsd)\r\n\r\n    let farmTokenPrice = cakePrice\r\n    if (farmType === 'Bakery') farmTokenPrice = bakePrice\r\n    else if (farmType === 'Belt') farmTokenPrice = beltPrice\r\n\r\n    if (farmType === 'Belt') apr = Number(beltAPR)\r\n    else apr = getFarmApr(new BigNumber(poolWeightPCS), farmTokenPrice, totalLiquidity, isKingdom, farmType)\r\n  }\r\n\r\n  const dailyAPR = apr ? new BigNumber(apr).div(new BigNumber(365)).toNumber() : new BigNumber(0).toNumber()\r\n\r\n  const farmAPY = ((((apr / 100 / compounding) + 1) ** compounding) - 1) * 100\r\n  const totalAPY = cubAPR ? cubAPR + farmAPY : farmAPY\r\n  const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  data = { pcsApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString }\r\n\r\n  return data\r\n}\r\n\r\nexport default useKingdomAPRAPY\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface TextProps {\r\n  isDisabled?: boolean\r\n  fontSize?: string\r\n  color?: string\r\n  bold?: boolean\r\n}\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value?: number\r\n  decimals?: number\r\n  unit?: string\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {value && unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nBalance.defaultProps = {\r\n  fontSize: '32px',\r\n  isDisabled: false,\r\n  color: 'text',\r\n  decimals: 3,\r\n}\r\n\r\nexport default Balance\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Flex, Text, Button as UiButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport Balance from 'components/Balance'\r\nimport CardBusdValue from 'views/Home/components/CardBusdValue'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport DepositModal from 'views/Farms/components/DepositModal'\r\nimport WithdrawModal from 'views/Farms/components/WithdrawModal'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport './KingdomCard.css'\r\n\r\nconst KCard = styled.div`\r\n  align-self: baseline;\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  /*padding: 6px 12px;*/\r\n  position: relative;\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n`\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 40px;\r\n  margin-top: 0.3rem;\r\n  display: block;\r\n`\r\n\r\nconst Values = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Brackets = styled.span`\r\n  color: ${(props) => props.theme.colors.text};\r\n`\r\n\r\ninterface KingdomCardProps {\r\n  farm?: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  addLiquidityUrl: string\r\n  account?: string\r\n}\r\n\r\nconst KingdomCard: React.FC<KingdomCardProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue ,\r\n  addLiquidityUrl,\r\n  account\r\n}) => {\r\n  const location = useLocation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { pid, isTokenOnly, isKingdom, isKingdomToken, lpSymbol, lpAddresses, token: { address } } = farm\r\n\r\n  const tokenName = lpSymbol.toUpperCase()\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const earningsBusd = rewardBalance ? new BigNumber(rewardBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  const web3 = useWeb3()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly || isKingdomToken){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress, isKingdomToken])\r\n\r\n  const { onApprove } = useApprove(lpContract, isKingdom)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const approvedButton = (\r\n    <Button\r\n      mt=\"8px\"\r\n      disabled={requestedApproval || location.pathname.includes('archived')}\r\n      onClick={handleApprove}\r\n    >\r\n      Approve Contract\r\n    </Button>\r\n  )\r\n\r\n  return (\r\n    <KCard>\r\n      <div className=\"k-card\">\r\n        <div className=\"flex-grid\">\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Balance (Wallet)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={walletBalance}\r\n                decimals={walletBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={walletBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            { isApproved ? (\r\n              <Button mt=\"8px\" fullWidth onClick={onPresentDeposit}>Deposit</Button>\r\n            ) : (\r\n              approvedButton\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Deposit (Staked)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={depositBalance}\r\n                decimals={depositBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={depositBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            { isApproved ? (\r\n              <Button mt=\"8px\" fullWidth onClick={onPresentWithdraw}>Withdraw</Button>\r\n            ) : (\r\n              approvedButton\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            <Text>CUB Rewards</Text>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={rewardBalance}\r\n                decimals={rewardBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={earningsBusd} /><Brackets>)</Brackets>\r\n            </Values>\r\n            <Button\r\n              disabled={rewardBalance === 0 || pendingTx || !isApproved}\r\n              onClick={async () => {\r\n                setPendingTx(true)\r\n                await onReward()\r\n                setPendingTx(false)\r\n              }}\r\n            >\r\n              Harvest\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </KCard>\r\n  )\r\n}\r\n\r\nexport default KingdomCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, Flex, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Balance from 'components/Balance'\r\n\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\n\r\nexport interface AprApyProps {\r\n  aprApy: any\r\n  lpLabel: string\r\n  addLiquidityUrl: string\r\n}\r\n\r\nconst AprApy: React.FC<AprApyProps> = ({ aprApy,  lpLabel, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const { farmAPR, apr, compounding, pcsApr, dailyAPR, farmAPY, totalAPYString, cakePrice } = aprApy\r\n\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"warning\">{TranslateString(354, 'Total APY')}:</Text>\r\n        <Text bold color=\"warning\">{totalAPYString}%</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Farm APR')}:</Text>\r\n        <Text>{`${new BigNumber(pcsApr).toFixed(2)}% (${new BigNumber(dailyAPR).toFixed(3)}%)`}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Compounds / year')}:</Text>\r\n        <Text>~{compounding}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n        <Balance\r\n          fontSize=\"16px\"\r\n          value={farmAPY}\r\n          decimals={2}\r\n          unit=\"%\"\r\n        />\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text>{TranslateString(736, 'CUB APR')}:</Text>\r\n        <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n          {apr ? (\r\n            <>\r\n              <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={apr} />\r\n              {farmAPR || apr.toLocaleString('en-US', { maximumFractionDigits: 2 })}%\r\n            </>\r\n          ) : (\r\n            <Skeleton height={24} width={80} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AprApy\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button as UiButton, Link, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { DEFAULT_TOKEN_DECIMAL, BAKERY_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BELT_EXCHANGE } from 'config'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport KingdomCard from './KingdomCard'\r\nimport AprApy from './AprApy'\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 36px;\r\n  font-size: 1rem;\r\n  padding: 0 12px;\r\n`\r\n\r\nconst Details = styled.div`\r\n  margin-top: 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  /*padding-left: 0.8rem;\r\n  padding-right: 0.8rem;*/\r\n  /*font-size: 0.95rem*/\r\n`\r\n\r\nconst Detail = styled.div`\r\n  /*display: inline;\r\n  margin-right: 1rem;*/\r\n  /*& div {\r\n    font-family: Arial;\r\n    font-size: 0.8rem;\r\n    padding: 2px;\r\n  }*/\r\n  &:nth-child(1) {\r\n    width: 25%\r\n  }\r\n  &:nth-child(2) {\r\n    width: 33%\r\n  }\r\n`\r\n\r\nconst KDetail = styled.div`\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n`\r\n\r\nconst StyledLinkExternal = styled(Link)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst CubKingdom = styled.div`\r\n  color: ${(props) => props.theme.colors.text};\r\n  margin-top: 0.2rem;\r\n`\r\n\r\ninterface KingdomDetailProps {\r\n  farm: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  farmName: string\r\n  oneTokenQuoteValue: BigNumber\r\n  removed?: boolean\r\n  aprApy?: any\r\n  account?: string\r\n}\r\n\r\nconst KingdomDetail: React.FC<KingdomDetailProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue,\r\n  farmName,\r\n  oneTokenQuoteValue,\r\n  removed,\r\n  aprApy,\r\n  account,\r\n}) => {\r\n  const tokenValueFormated = oneTokenQuoteValue && oneTokenQuoteValue.toString() !== 'NaN'\r\n    ? `~$${oneTokenQuoteValue.times(DEFAULT_TOKEN_DECIMAL).toFixed(2)}`\r\n    : '-'\r\n  const { lpSymbol, multiplier, quoteToken, token, lpAddresses, isTokenOnly, isKingdomToken, kingdomContract, altPid } = farm\r\n  const lpLabel = lpSymbol && lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = token.address[process.env.REACT_APP_CHAIN_ID]\r\n\r\n  const isToken = isTokenOnly || isKingdomToken\r\n  const farmContract= isToken ?\r\n    `https://bscscan.com/token/${tokenAddress}`\r\n    : `https://bscscan.com/token/${lpAddress}`\r\n  const vaultContract = `https://bscscan.com/token/${kingdomContract}`\r\n  let infoAddress = `https://pancakeswap.info/pair/${isTokenOnly ? tokenAddress : lpAddress}`\r\n\r\n  let exchangeUrl = PCS_ADD_LIQUIDITY_URL\r\n  let buyTokenUrl = `${BASE_EXCHANGE_URL}/#/swap`\r\n  let addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  if (farm.farmType === 'Bakery') {\r\n    exchangeUrl = BAKERY_ADD_LIQUIDITY_URL\r\n    addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n    infoAddress = `https://info.bakeryswap.org/#/pair/${isTokenOnly ? tokenAddress : lpAddress}`\r\n  }\r\n  else if (farm.farmType === 'Belt') {\r\n    exchangeUrl = BELT_EXCHANGE\r\n    addLiquidityUrl = exchangeUrl\r\n    buyTokenUrl = exchangeUrl\r\n    infoAddress = exchangeUrl\r\n  }\r\n\r\n  let displayMultiplier = multiplier\r\n  if (aprApy.newMultiplier) displayMultiplier = `${aprApy.newMultiplier}*`\r\n  // else if (multiplier) displayMultiplier = `${multiplier.substr(0,4)}X`\r\n\r\n  return (\r\n    <KDetail>\r\n      <KingdomCard\r\n        farm={farm}\r\n        walletBalance={walletBalance}\r\n        depositBalance={depositBalance}\r\n        rewardBalance={rewardBalance}\r\n        walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n        depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        account={account}\r\n      />\r\n      <Details className=\"k-details\">\r\n        <Detail>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>{lpSymbol}:</Text>\r\n            <Text>({tokenValueFormated})</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Multiplier:</Text>\r\n            <Text>{displayMultiplier}</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Type:</Text>\r\n            <Text>Auto-compound</Text>\r\n          </Flex>\r\n          {altPid === 12 ? (\r\n            <CubKingdom>*CUB Kingdom multiplier coexists with CUB Den multiplier</CubKingdom>\r\n          ) : (\r\n            <Flex justifyContent=\"space-between\">\r\n              <Text>Farm:</Text>\r\n              <Text>{farmName}</Text>\r\n            </Flex>\r\n          )}\r\n        </Detail>\r\n        <Detail>\r\n          <AprApy\r\n            aprApy={aprApy}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        </Detail>\r\n        <Detail>\r\n          <StyledLinkExternal external href={farmContract}>Farm Contract</StyledLinkExternal>\r\n          <StyledLinkExternal external href={vaultContract}>Kingdom Contract</StyledLinkExternal>\r\n          {!removed && (\r\n            <>\r\n              <StyledLinkExternal external href={buyTokenUrl}>\r\n                {`Buy ${token.symbol}`}\r\n              </StyledLinkExternal>\r\n              <StyledLinkExternal external href={addLiquidityUrl}>\r\n                Add Liquidity\r\n              </StyledLinkExternal>\r\n            </>\r\n          )}\r\n          <StyledLinkExternal external href={infoAddress}>See Token Info</StyledLinkExternal>\r\n        </Detail>\r\n      </Details>\r\n    </KDetail>\r\n  )\r\n}\r\n\r\nexport default KingdomDetail\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n  opacity: 0.2;\r\n  height: 1px;\r\n  margin: 12px auto;\r\n  width: 100%;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  height: 1px;\r\n  margin: 12px auto;\r\n  width: 100%;\r\n`\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport { Text, Image, Flex } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useBusdPriceFromLpSymbol } from 'state/hooks'\r\nimport useKingdomAPRAPY from 'hooks/useKingdomAPRAPY'\r\nimport Balance from 'components/Balance'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport KingdomDetail from './KingdomDetail'\r\nimport Divider from './DividerBlue'\r\nimport Spacer from './Spacer'\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\nconst K = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 0.4rem 0.8rem;\r\n  position: relative;\r\n`\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 8px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst KImage = styled(Image)`\r\n  width: 64px;\r\n`\r\n\r\nconst KMain = styled.div`\r\n  cursor: pointer;\r\n`\r\n\r\ninterface KingdomProps {\r\n  farm: FarmWithStakedValue\r\n  removed?: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n  updateTotalStake?: any\r\n}\r\n\r\nconst Kingdom: React.FC<KingdomProps> = ({ farm, removed, cakePrice, account, updateTotalStake }) => {\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const { apr, lpTotalInQuoteToken, lpSymbol, lpTokenBalancePCS = 0, lpTotalInQuoteTokenPCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, altPid, farmType } = farm\r\n  const farmImage = lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  // let aprApy = useKingdomAPRAPY(\r\n  //   isKingdom,\r\n  //   isKingdomToken,\r\n  //   Number(tokenPriceVsQuote),\r\n  //   poolWeightPCS,\r\n  //   compounding,\r\n  //   apr,\r\n  //   lpTokenBalancePCS,\r\n  //   lpTotalInQuoteTokenPCS,\r\n  //   Number(quoteTokenPriceUsd),\r\n  //   altPid,\r\n  //   farm,\r\n  // )\r\n  let aprApy = useKingdomAPRAPY(farm)\r\n\r\n  const { dailyAPR, totalAPY, pcsApr } = aprApy\r\n  const { tokenBalance, stakedBalance, earnings } = farm.userData\r\n\r\n  const rawTokenBalance = tokenBalance ? getBalanceNumber(new BigNumber(tokenBalance)) : 0\r\n  const rawStakedBalance = stakedBalance ? getBalanceNumber(new BigNumber(stakedBalance)) : 0\r\n  const rawEarningsBalance = earnings ? getBalanceNumber(new BigNumber(earnings)) : 0\r\n\r\n  const tokenPrice = useBusdPriceFromLpSymbol(farm.lpSymbol);\r\n  let oneTokenQuoteValue = new BigNumber(0)\r\n\r\n  if (!farm.isKingdomToken)\r\n    oneTokenQuoteValue = lpTotalInQuoteTokenPCS ? new BigNumber(lpTotalInQuoteTokenPCS).div(new BigNumber(lpTokenBalancePCS)).times(quoteTokenPriceUsd).div(DEFAULT_TOKEN_DECIMAL) : new BigNumber(0)\r\n  else oneTokenQuoteValue = farm.farmType !== 'Belt' ? tokenPrice.div(DEFAULT_TOKEN_DECIMAL) : new BigNumber(farm.token.busdPrice).div(DEFAULT_TOKEN_DECIMAL)\r\n\r\n  const walletBalanceQuoteValue = tokenBalance ? new BigNumber(tokenBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const totalValueFormated = lpTotalInQuoteToken\r\n    ? `$${Number(new BigNumber(lpTotalInQuoteToken).times(quoteTokenPriceUsd)).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const farmAPR = apr && apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  aprApy = { ...aprApy, compounding: farm.compounding, farmAPR, apr: altPid === 12 ? pcsApr : farm.apr, cakePrice, quoteTokenPriceUsd: Number(quoteTokenPriceUsd), lpTotalInQuoteToken }\r\n\r\n  // setInterval(() => updateTotalStake(farm.lpSymbol, depositBalanceQuoteValue, aprApy.totalAPY, aprApy.dailyAPR), 10000)\r\n  // useEffect(() => {\r\n  //   console.log('useEffect')\r\n  //   updateTotalStake(farm.lpSymbol, depositBalanceQuoteValue, aprApy.totalAPY, aprApy.dailyAPR)\r\n  // }, [updateTotalStake, farm.lpSymbol, depositBalanceQuoteValue, aprApy.totalAPY, aprApy.dailyAPR])\r\n\r\n  return (\r\n    <>\r\n      <Spacer />\r\n      <K>\r\n        {farm.token.symbol === 'CUB' && <StyledCardAccent />}\r\n        <KMain role=\"presentation\" className=\"flex-grid k-grid\" onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n      >\r\n          <div className=\"col\"><KImage src={`/images/farms/${farmImage}.png`} alt={lpSymbol} width={64} height={64} /></div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\">\r\n              <Text className=\"token\">{lpSymbol}</Text>\r\n            </Flex>\r\n            <Text>Uses: {farmType}</Text>\r\n            <Text>TVL {totalValueFormated}</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawTokenBalance}\r\n              decimals={rawTokenBalance ? 2 : 1}\r\n              unit=\"\"\r\n              color={rawTokenBalance ? \"warning\" : \"text\"}\r\n            />\r\n            <Text>Balance</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawStakedBalance}\r\n              decimals={rawStakedBalance ? 2 : 1}\r\n              unit=\"\"\r\n              color={rawStakedBalance > 0.0000001 ? \"warning\" : \"text\"}\r\n            />\r\n            <Text>Deposited</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawEarningsBalance}\r\n              decimals={rawEarningsBalance ? 2 : 1}\r\n              unit=\"\"\r\n              color={rawEarningsBalance ? \"warning\" : \"text\"}\r\n            />\r\n            <Text>Rewards</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={totalAPY}\r\n              decimals={2}\r\n              unit=\"%\"\r\n              color=\"warning\"\r\n            />\r\n            <Text color=\"warning\">APY</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={dailyAPR}\r\n              decimals={2}\r\n              unit=\"%\"\r\n            />\r\n            <Text>Daily</Text>\r\n          </div>\r\n        </KMain>\r\n        <ExpandingWrapper expanded={showExpandableSection}>\r\n          <Divider />\r\n          <KingdomDetail\r\n            farm={farm}\r\n            walletBalance={rawTokenBalance}\r\n            depositBalance={rawStakedBalance}\r\n            rewardBalance={rawEarningsBalance}\r\n            walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n            depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n            farmName={farmType}\r\n            oneTokenQuoteValue={oneTokenQuoteValue}\r\n            removed={removed}\r\n            aprApy={aprApy}\r\n            account={account}\r\n          />\r\n        </ExpandingWrapper>\r\n      </K>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdom\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst StyledText = styled(Text)`\r\n  line-height: 1.5;\r\n\r\n`\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, prefix, fontSize = '16px', }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <StyledText fontSize={fontSize} >\r\n      {prefix}{countUp}\r\n    </StyledText>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import { DEFAULT_TOKEN_DECIMAL,  } from 'config'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n// import { getPoolApr, getFarmApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useBusdPriceFromLpSymbol } from 'state/hooks'\r\nimport useKingdomAPRAPY from 'hooks/useKingdomAPRAPY'\r\n\r\nconst useTotalStaked = (farms: any, cakePrice: BigNumber) => {\r\n  let rawTotalCUB = BIG_ZERO\r\n  let rawTotalStakedUSD = BIG_ZERO\r\n  let rawTotalAPY = 0\r\n  let rawTotalDailyAPR = 0\r\n  let count = 0\r\n  farms.forEach((farm) => {\r\n    if (farm.isKingdom) {\r\n      const { userData, lpTotalInQuoteTokenPCS = 0, lpTokenBalancePCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd } } = farm\r\n      const { stakedBalance, earnings } = userData\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const tokenPrice = useBusdPriceFromLpSymbol(farm.lpSymbol);\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const aprApy = useKingdomAPRAPY(farm)\r\n\r\n      if (stakedBalance > '1') {\r\n        let oneTokenQuoteValue = BIG_ZERO\r\n\r\n        if (!farm.isKingdomToken)\r\n          oneTokenQuoteValue = lpTotalInQuoteTokenPCS ? new BigNumber(lpTotalInQuoteTokenPCS).div(new BigNumber(lpTokenBalancePCS)).times(quoteTokenPriceUsd) : new BigNumber(0)\r\n        else oneTokenQuoteValue = farm.farmType !== 'Belt' ? tokenPrice : new BigNumber(farm.token.busdPrice)\r\n\r\n        const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue) : new BigNumber(0)\r\n\r\n        rawTotalStakedUSD = rawTotalStakedUSD.plus(new BigNumber(depositBalanceQuoteValue))\r\n\r\n        rawTotalAPY = +rawTotalAPY + +aprApy.totalAPY\r\n        rawTotalDailyAPR = +rawTotalDailyAPR + +aprApy.dailyAPR\r\n\r\n        count += 1\r\n      }\r\n\r\n      if (earnings !== '0') rawTotalCUB = rawTotalCUB.plus(new BigNumber(earnings))\r\n    }\r\n  })\r\n\r\n  const stakedUSD = rawTotalStakedUSD !== BIG_ZERO ? getBalanceNumber(rawTotalStakedUSD) : 0\r\n\r\n  const cubEarned = rawTotalCUB !== BIG_ZERO ? getBalanceNumber(rawTotalCUB) : 0\r\n\r\n  const cubBusd = cubEarned ? new BigNumber(cubEarned).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return [stakedUSD, cubEarned, cubBusd, rawTotalAPY, rawTotalDailyAPR, count]\r\n}\r\n\r\nexport default useTotalStaked\r\n","import React, { useEffect, useCallback, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport Balance from 'components/Balance'\r\nimport { Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport useTotalStaked from '../hooks/useTotalStaked';\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 700px;\r\n  margin: 0 auto;\r\n`\r\n\r\ninterface TotalStakedProps {\r\n  farms: any\r\n  cakePrice: BigNumber\r\n  totalStake?: any\r\n}\r\n\r\nconst TotalStaked: React.FC<TotalStakedProps> = ({ farms, cakePrice, totalStake }) => {\r\n  const [totalStakeUSD, totalCub, totalCubUSD, totalAPY, totalDailyAPR, count] = useTotalStaked(farms, cakePrice);\r\n\r\n  const avgAPY = totalAPY.toString() !== 'NaN' ? totalAPY / count : 0\r\n\r\n  const stakedUSDFormatted = totalStakeUSD ?  `$${totalStakeUSD.toLocaleString('en-US', { maximumFractionDigits: 2 })}`\r\n    : '0.00'\r\n  const dailyFormatted = totalDailyAPR ?  `${totalDailyAPR.toLocaleString('en-US', { maximumFractionDigits: 2 })}%`\r\n      : '0.00'\r\n  const cubUSDFormatted = totalCubUSD ?  `$${totalCubUSD.toLocaleString('en-US', { maximumFractionDigits: 2 })}`\r\n        : '0.00'\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"flex-start\">\r\n        <div>\r\n          <Text>Total Deposit</Text>\r\n          <Text fontSize=\"18px\" color=\"textSubtle\">{stakedUSDFormatted}</Text>\r\n          <Text>{count} assets</Text>\r\n        </div>\r\n        <div>\r\n          <Text>Average APY</Text>\r\n          <Balance\r\n            fontSize=\"18px\"\r\n            value={avgAPY}\r\n            decimals={avgAPY ? 2 : 1}\r\n            unit=\"%\"\r\n            color=\"textSubtle\"\r\n          />\r\n          <Text>Daily {dailyFormatted}</Text>\r\n        </div>\r\n        <div>\r\n          <Text>CUB Rewards</Text>\r\n          <Balance\r\n            fontSize=\"18px\"\r\n            value={totalCub}\r\n            decimals={totalCub ? 2 : 1}\r\n            unit=\"\"\r\n            color=\"textSubtle\"\r\n          />\r\n          <Text>{cubUSDFormatted}</Text>\r\n        </div>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TotalStaked\r\n","import React, { useEffect, useCallback, useMemo, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Heading, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport Page from 'components/layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { useFarms, usePriceCakeBusd, useTotalValueKingdoms } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { Farm } from 'state/types'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\n\r\n\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Kingdom from './components/Kingdom'\r\nimport CardValue from './components/CardValue'\r\nimport TotalStaked from './components/TotalStaked'\r\nimport './Kingdoms.css'\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\nconst Kingdoms: React.FC = () => {\r\n  const totalValue = useTotalValueKingdoms();\r\n  const { pathname } = useLocation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n\r\n  const cakePrice = usePriceCakeBusd()\r\n  const { account } = useWeb3React()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  // const activeFarms = farmsLP.filter((farm) => farm.isKingdom && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter((farm) => farm.isKingdom && !isArchivedPid(farm.pid))\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, isActive],\r\n  )\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    if (isActive) {\r\n      farmsStaked = farmsList(activeFarms)\r\n    }\r\n    return farmsStaked\r\n  }, [\r\n    activeFarms,\r\n    farmsList,\r\n    isActive,\r\n  ])\r\n\r\n  const [totalStake, setTotalStake] = useState({})\r\n  const updateTotalStake = (lpSymbol: string, depositBalanceQuoteValue: number, totalAPY: number, dailyAPR: number) => {\r\n    console.log('updating', lpSymbol)\r\n    if (totalStake[lpSymbol]) {\r\n      setTotalStake({\r\n        ...totalStake,\r\n        [lpSymbol]: {\r\n          depositBalanceQuoteValue: +totalStake[lpSymbol].depositBalanceQuoteValue + +depositBalanceQuoteValue,\r\n          totalAPY: +totalStake[lpSymbol].totalAPY + +totalAPY,\r\n          dailyAPR: +totalStake[lpSymbol].dailyAPR + +dailyAPR,\r\n        },\r\n      })\r\n    } else {\r\n      setTotalStake({\r\n        ...totalStake,\r\n        [lpSymbol]: {\r\n          depositBalanceQuoteValue,\r\n          totalAPY,\r\n          dailyAPR,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  // const [totalStake, setTotalStake] = useState({})\r\n  // const updateTotalStake = (lpSymbol, depositBalanceQuoteValue, totalAPY, dailyAPR) => {\r\n  //   setTotalStake([\r\n  //     ...totalStake.slice(0, lpSymbol),\r\n  //     {\r\n  //       [lpSymbol]: {\r\n  //         depositBalanceQuoteValue,\r\n  //         totalAPY,\r\n  //         dailyAPR,\r\n  //       },\r\n  //     },\r\n  //     ...totalStake.slice(lpSymbol + 1),\r\n  //   ])\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <div className='k-header'>\r\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"10px\">\r\n            Kingdoms\r\n          </Heading>\r\n          <Flex>\r\n            <Text bold fontSize=\"24px\">\r\n              TVL&nbsp;\r\n            </Text>\r\n            <CardValue fontSize=\"24px\" value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          </Flex>\r\n        </div>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Composable Auto-Compounding\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Stake tokens for cross-platform farming plus CUB rewards\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          IMPORTANT: Must use the host farm exchange (eg. PCS, Bakery) for Kingdom LP tokens\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          CertiK Audit is Pending: Our other contracts have been audited by CertiK and Kingdoms are currently under review. Please use at your own discretion until the audit has been published\r\n        </Heading>\r\n        <FeeWrapper>\r\n          <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\r\n            Fees\r\n          </Heading>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Fee for CUB Staking Kingdom BNB Dividends:</Text>\r\n            <Text>3%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Management Fee:</Text>\r\n            <Text>7%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>CUB Burn Rate:</Text>\r\n            <Text>100% of Fees Buyback and Burn CUB</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Withdrawal Fee:</Text>\r\n            <Text>None</Text>\r\n          </Flex>\r\n        </FeeWrapper>\r\n      </PageHeader>\r\n      <Page className=\"k-container\">\r\n        <TotalStaked farms={farmsStakedMemoized} cakePrice={cakePrice} totalStake={totalStake} />\r\n        <div id=\"kingdoms\">\r\n          {farmsStakedMemoized.map((farm) => (\r\n            <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} updateTotalStake={updateTotalStake} />\r\n          ))}\r\n        </div>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdoms\r\n"],"sourceRoot":""}