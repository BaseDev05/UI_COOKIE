{"version":3,"sources":["hooks/useI18n.ts","hooks/useWeb3.ts","views/Home/components/CardValue.tsx","utils/callHelpers.ts","hooks/useContract.ts","hooks/useHarvest.ts","views/Home/components/CardBusdValue.tsx","utils/apr.ts","utils/getLiquidityUrlPathParts.ts","hooks/useStake.ts","views/Farms/components/FarmCard/AprApy.tsx","components/Balance.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","utils/compoundApyHelpers.ts","components/ApyCalculatorModal/index.tsx","views/Farms/components/FarmCard/ApyButton.tsx","hooks/useKingdomAPRAPY.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/PageHeader/PageHeader.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","components/ModalInput/ModalInput.tsx"],"names":["useI18n","translations","useContext","TranslationsContext","translationId","fallback","data","length","foundTranslation","find","translation","stringId","text","includesVariable","includes","interpolatedText","isEmpty","Object","keys","forEach","dataKey","templateKey","RegExp","replace","useWeb3","library","useWeb3React","refEth","useRef","useState","Web3","getWeb3NoAccount","web3","setweb3","useEffect","current","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","style","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","on","tx","transactionHash","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","gas","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmergencyUnstake","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","useCake","useMemo","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useKingdom","getKingdomsContract","useSousChef","id","getSouschefContract","useHarvest","farmPid","isKingdom","dispatch","useAppDispatch","kingdomContract","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farms","harvestPromises","reduce","accum","farm","Promise","all","CardBusdValue","props","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BLOCKS_PER_YEAR","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolWeight","cakePriceUsd","poolLiquidityUsd","PCSCAKE_PER_YEAR","yearlyCakeRewardAllocation","CAKE_PER_BLOCK","liquidity","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","useStake","onStake","console","info","AprApy","aprApy","lpLabel","addLiquidityUrl","isDetails","TranslateString","farmAPR","pcsCompounding","pcsApr","dailyAPR","farmAPY","totalAPYString","cakePrice","justifyContent","toFixed","unit","alignItems","display","height","width","Balance","isDisabled","previousValue","defaultProps","useApprove","onApprove","useUnstake","onUnstake","DepositModal","max","onConfirm","onDismiss","tokenName","isTokenOnly","isKingdomToken","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","handleSelectMax","title","onSelectMax","onChange","symbol","inputTitle","variant","onClick","disabled","eq","gt","href","alignSelf","WithdrawModal","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","parseFloat","getRoi","amountEarned","amountInvested","Grid","styled","GridItem","Description","Text","ApyCalculatorModal","linkLabel","linkHref","earningTokenSymbol","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","textTransform","mb","ApyButton","useModal","onPresentApyModal","event","stopPropagation","scale","ml","useKingdomAPRAPY","tokenPriceVsQuote","poolWeightPCS","cubAPR","lpTokenBalancePCSv2","lpTotalInQuoteTokenPCS","useGetApiPrice","extra","getBalanceNumber","totalAPY","toLocaleString","maximumFractionDigits","StyledSpacer","size","Spacer","s","spacing","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","map","child","i","Outer","Box","background","gradients","bubblegum","Inner","Container","PageHeader","Wrapper","primary","ExpandableSectionButton","expanded","onlyArrow","aria-label","role","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","ModalInput","isBalanceZero","position","pl","balance","balanceNumber","Number","displayBalance","pattern","inputMode","step","min","placeholder","mr","external"],"mappings":"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","file":"static/js/1.bff8d34d.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { isEmpty } from 'lodash'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\ninterface ContextData {\r\n  [key: string]: number | string\r\n}\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\r\n    if (translations.length === 0) {\r\n      return fallback\r\n    }\r\n\r\n    const foundTranslation = translations.find((translation) => {\r\n      return translation.data.stringId === translationId\r\n    })\r\n\r\n    if (foundTranslation) {\r\n      const { text } = foundTranslation.data\r\n      const includesVariable = text.includes('%')\r\n\r\n      if (includesVariable) {\r\n        let interpolatedText = text\r\n\r\n        // If dynamic tags are found but no data was passed return the fallback\r\n        if (isEmpty(data)) {\r\n          return fallback\r\n        }\r\n\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return text\r\n    }\r\n\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  /* if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } */\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  /* if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } */\r\n\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  // if (pid === 0) {\r\n  //   return masterChefContract.methods\r\n  //     .leaveStaking('0')\r\n  //     .send({ from: account })\r\n  //     .on('transactionHash', (tx) => {\r\n  //       return tx.transactionHash\r\n  //     })\r\n  // }\r\n\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getKingdomsContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useKingdom = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getKingdomsContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(isKingdom ? kingdomContract : masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farms: any[]) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farms.reduce((accum, farm) => {\r\n      if (farm.isKingdom) return [...accum, harvest(kingdomContract, farm.pid, account)]\r\n      return [...accum, harvest(masterChefContract, farm.pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farms, masterChefContract, kingdomContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"16px\" lineHeight=\"1.5\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, PCSCAKE_PER_YEAR } from 'config'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber, isKingdom?: boolean): number => {\r\n  if (isKingdom) {\r\n    const yearlyCakeRewardAllocation = PCSCAKE_PER_YEAR.times(poolWeight)\r\n    const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n    return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n  }\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const liquidity = poolLiquidityUsd.toNumber() ? poolLiquidityUsd : new BigNumber(0)\r\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(liquidity).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\nexport default null\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nconst useStake = (pid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(isKingdom ? kingdomContract : masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, kingdomContract, isKingdom],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, Flex, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Balance from 'components/Balance'\r\n\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface AprApyProps {\r\n  aprApy: any\r\n  lpLabel: string\r\n  addLiquidityUrl: string\r\n  isDetails?: boolean\r\n}\r\n\r\nconst AprApy: React.FC<AprApyProps> = ({ aprApy,  lpLabel, addLiquidityUrl, isDetails }) => {\r\n  const TranslateString = useI18n()\r\n  const { farmAPR, apr, pcsCompounding, pcsApr, dailyAPR, farmAPY, totalAPYString, cakePrice } = aprApy\r\n\r\n  if (isDetails)\r\n    return (\r\n      <>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text color=\"warning\">{TranslateString(354, 'Total APY')}:</Text>\r\n          <Text bold color=\"warning\">{totalAPYString}%</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Farm APR')}:</Text>\r\n          <Text>{`${new BigNumber(pcsApr).toFixed(2)}% (${new BigNumber(dailyAPR).toFixed(3)}%)`}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Compounds / year')}:</Text>\r\n          <Text>~{pcsCompounding}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            value={farmAPY}\r\n            decimals={2}\r\n            unit=\"%\"\r\n          />\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'CUB APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      </>\r\n    )\r\n\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"warning\">{TranslateString(354, 'Total APY')}:</Text>\r\n        <Text bold color=\"warning\">{totalAPYString}%</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n        <Balance\r\n          fontSize=\"16px\"\r\n          value={farmAPY}\r\n          decimals={2}\r\n          unit=\"%\"\r\n        />\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text>{TranslateString(736, 'CUB APR')}:</Text>\r\n        <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n          {apr ? (\r\n            <>\r\n              <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={apr} />\r\n              {farmAPR}%\r\n            </>\r\n          ) : (\r\n            <Skeleton height={24} width={80} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AprApy\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface TextProps {\r\n  isDisabled?: boolean\r\n  fontSize?: string\r\n  color?: string\r\n  bold?: boolean\r\n}\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value?: number\r\n  decimals?: number\r\n  unit?: string\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {value && unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nBalance.defaultProps = {\r\n  fontSize: '32px',\r\n  isDisabled: false,\r\n  color: 'text',\r\n  decimals: 3,\r\n}\r\n\r\nexport default Balance\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery, useKingdom } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, isKingdom ? kingdomContract : masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nconst useUnstake = (pid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(isKingdom ? kingdomContract : masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, kingdomContract, isKingdom],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23, 78]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl, isTokenOnly, isKingdomToken }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, isTokenOnly || isKingdomToken ? 'Stake tokens' : 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', isTokenOnly, isKingdomToken }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, isTokenOnly || isKingdomToken ? 'Unstake tokens' : 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const aprAsDecimal = farmApr / 100\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CUB',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {earningTokenSymbol} {TranslateString(999, 'per')} $1000\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          `Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={`${TranslateString(999, 'Get')} ${lpLabel}`}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","// import { useCallback } from 'react'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { getPoolApr, getFarmApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useGetApiPrice } from 'state/hooks'\r\n// import Balance from 'components/Balance'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst useKingdomAPRAPY = (\r\n  isKingdom: boolean,\r\n  isKingdomToken: boolean,\r\n  tokenPriceVsQuote: number,\r\n  poolWeightPCS: any,\r\n  pcsCompounding: number,\r\n  cubAPR: number,\r\n  lpTokenBalancePCSv2: number,\r\n  lpTotalInQuoteTokenPCS: number,\r\n) => {\r\n  const cakePrice = useGetApiPrice('0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82')\r\n\r\n  let apr:number\r\n\r\n  let extra = null\r\n  if (isKingdom) {\r\n    if (isKingdomToken)\r\n      apr = getPoolApr(\r\n        tokenPriceVsQuote,\r\n        tokenPriceVsQuote,\r\n        getBalanceNumber(new BigNumber(lpTokenBalancePCSv2).times(DEFAULT_TOKEN_DECIMAL), 18),\r\n        parseFloat('10'),\r\n      )\r\n    else\r\n      apr = getFarmApr(poolWeightPCS, new BigNumber(cakePrice), new BigNumber(lpTotalInQuoteTokenPCS), isKingdom)\r\n\r\n    const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\r\n\r\n    const farmAPY = ((((apr / 100 / pcsCompounding) + 1) ** pcsCompounding) - 1) * 100\r\n    const totalAPY = cubAPR ? cubAPR + farmAPY : farmAPY\r\n    const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n    extra = { pcsApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString }\r\n  }\r\n\r\n  return extra\r\n}\r\n\r\nexport default useKingdomAPRAPY\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap-libs/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 16px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n  onlyArrow?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded, onlyArrow }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  let extra = null\r\n  if (!onlyArrow)\r\n    extra = (\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n  )\r\n\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      {extra}\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceNumber = Number(balance)\r\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\r\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\r\n    }\r\n    return balanceNumber.toLocaleString()\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance(max)}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n"],"sourceRoot":""}