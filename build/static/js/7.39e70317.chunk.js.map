{"version":3,"sources":["hooks/useKingdomAPRAPY.ts","components/Balance.tsx","views/Farms/components/FarmCard/AprApy.tsx","views/Kingdoms/components/KingdomCard.tsx","views/Kingdoms/components/KingdomDetail.tsx","views/Kingdoms/components/DividerBlue.tsx","views/Kingdoms/components/Kingdom.tsx","views/Kingdoms/components/CardValue.tsx","views/Kingdoms/Kingdoms.tsx"],"names":["useKingdomAPRAPY","isKingdom","isKingdomToken","tokenPriceVsQuote","poolWeightPCS","compounding","cubAPR","lpTokenBalanceMC","lpTotalInQuoteTokenPCS","quoteTokenPriceUsd","altPid","apr","cakePrice","useBusdPriceFromPid","newFarm","useFarmFromPid","totalLiquidity","BigNumber","lpTotalInQuoteToken","times","quoteToken","busdPrice","getFarmApr","poolWeight","dailyAPR","div","toNumber","farmAPY","totalAPY","totalAPYString","toLocaleString","maximumFractionDigits","pcsApr","newMultiplier","multiplier","getPoolApr","getBalanceNumber","DEFAULT_TOKEN_DECIMAL","parseFloat","Balance","value","fontSize","color","decimals","isDisabled","unit","bold","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultProps","AprApy","aprApy","lpLabel","addLiquidityUrl","TranslateString","useI18n","farmAPR","justifyContent","toFixed","alignItems","style","display","ApyButton","height","width","KCard","styled","props","theme","card","background","Button","UiButton","Values","Brackets","span","colors","text","KingdomCard","farm","walletBalance","depositBalance","rewardBalance","walletBalanceQuoteValue","depositBalanceQuoteValue","account","location","useLocation","useState","requestedApproval","setRequestedApproval","pendingTx","setPendingTx","pid","isTokenOnly","lpSymbol","lpAddresses","address","token","tokenName","toUpperCase","userData","allowance","allowanceAsString","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","usePriceCakeBusd","earningsBusd","multipliedBy","web3","useWeb3","onStake","useStake","onUnstake","useUnstake","onReward","useHarvest","isApproved","isGreaterThan","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","lpAddress","getAddress","tokenAddress","lpContract","useMemo","getBep20Contract","onApprove","useApprove","handleApprove","useCallback","a","console","error","approvedButton","mt","disabled","pathname","includes","onClick","className","CardBusdValue","fullWidth","Details","Detail","KDetail","StyledLinkExternal","Link","CubKingdom","KingdomDetail","farmName","oneTokenQuoteValue","removed","tokenValueFormated","toString","kingdomContract","replace","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","exchangeUrl","PCS_ADD_LIQUIDITY_URL","BASE_ADD_LIQUIDITY_URL","process","farmContract","vaultContract","infoAddress","external","href","primary","ExpandingWrapper","expanded","K","RainbowLight","keyframes","StyledCardAccent","KImage","Image","Kingdom","showExpandableSection","setShowExpandableSection","lpTokenBalancePCS","farmType","farmImage","split","toLocaleLowerCase","Number","earnings","rawTokenBalance","rawStakedBalance","rawEarningsBalance","tokenPrice","totalValueFormated","undefined","symbol","src","alt","ExpandableSectionButton","onlyArrow","StyledText","Text","CardValue","prefix","useCountUp","countUp","update","updateValue","FeeWrapper","Kingdoms","totalValue","useTotalValueKingdoms","useFarms","farmsLP","data","userDataLoaded","useWeb3React","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","isActive","activeFarms","filter","isArchivedPid","farmsList","farmsToDisplay","map","liquidity","farmsStakedMemoized","farmsStaked","PageHeader","as","size","mb","textAlign","target","rel","Page","id"],"mappings":"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","file":"static/js/7.39e70317.chunk.js","sourcesContent":["// import { useCallback } from 'react'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { getPoolApr, getFarmApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useBusdPriceFromPid, useFarmFromPid } from 'state/hooks'\r\n// import Balance from 'components/Balance'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst useKingdomAPRAPY = (\r\n  isKingdom: boolean,\r\n  isKingdomToken: boolean,\r\n  tokenPriceVsQuote: number,\r\n  poolWeightPCS: any,\r\n  compounding: number,\r\n  cubAPR: number,\r\n  lpTokenBalanceMC: number,\r\n  lpTotalInQuoteTokenPCS: number,\r\n  quoteTokenPriceUsd: number,\r\n  altPid?: number,\r\n) => {\r\n  const cakePrice = useBusdPriceFromPid(0)\r\n  const newFarm = useFarmFromPid(altPid)\r\n  let apr:number\r\n  let data = null\r\n\r\n  if (altPid === 12) {\r\n    const totalLiquidity = new BigNumber(newFarm.lpTotalInQuoteToken).times(newFarm.quoteToken.busdPrice)\r\n    apr = getFarmApr(newFarm.poolWeight, newFarm.tokenPriceVsQuote, totalLiquidity)\r\n\r\n    const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\r\n\r\n    const farmAPY = ((((apr / 100 / compounding) + 1) ** compounding) - 1) * 100\r\n    const totalAPY = farmAPY\r\n    const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n    data = { pcsApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString, newMultiplier: newFarm.multiplier }\r\n\r\n    return data\r\n  }\r\n\r\n  if (isKingdomToken)\r\n    apr = getPoolApr(\r\n      tokenPriceVsQuote,\r\n      tokenPriceVsQuote,\r\n      getBalanceNumber(new BigNumber(lpTokenBalanceMC).times(DEFAULT_TOKEN_DECIMAL), 18),\r\n      parseFloat('10'),\r\n    )\r\n  else {\r\n    const totalLiquidity = new BigNumber(lpTotalInQuoteTokenPCS).times(quoteTokenPriceUsd)\r\n\r\n    apr = getFarmApr(poolWeightPCS, cakePrice, totalLiquidity, isKingdom)\r\n  }\r\n\r\n  const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\r\n\r\n  const farmAPY = ((((apr / 100 / compounding) + 1) ** compounding) - 1) * 100\r\n  const totalAPY = cubAPR ? cubAPR + farmAPY : farmAPY\r\n  const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  data = { pcsApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString }\r\n\r\n  return data\r\n}\r\n\r\nexport default useKingdomAPRAPY\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface TextProps {\r\n  isDisabled?: boolean\r\n  fontSize?: string\r\n  color?: string\r\n  bold?: boolean\r\n}\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value?: number\r\n  decimals?: number\r\n  unit?: string\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {value && unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nBalance.defaultProps = {\r\n  fontSize: '32px',\r\n  isDisabled: false,\r\n  color: 'text',\r\n  decimals: 3,\r\n}\r\n\r\nexport default Balance\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, Flex, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Balance from 'components/Balance'\r\n\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface AprApyProps {\r\n  aprApy: any\r\n  lpLabel: string\r\n  addLiquidityUrl: string\r\n}\r\n\r\nconst AprApy: React.FC<AprApyProps> = ({ aprApy,  lpLabel, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const { farmAPR, apr, compounding, pcsApr, dailyAPR, farmAPY, totalAPYString, cakePrice } = aprApy\r\n\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"warning\">{TranslateString(354, 'Total APY')}:</Text>\r\n        <Text bold color=\"warning\">{totalAPYString}%</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Farm APR')}:</Text>\r\n        <Text>{`${new BigNumber(pcsApr).toFixed(2)}% (${new BigNumber(dailyAPR).toFixed(3)}%)`}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Compounds / year')}:</Text>\r\n        <Text>~{compounding}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n        <Balance\r\n          fontSize=\"16px\"\r\n          value={farmAPY}\r\n          decimals={2}\r\n          unit=\"%\"\r\n        />\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text>{TranslateString(736, 'CUB APR')}:</Text>\r\n        <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n          {apr ? (\r\n            <>\r\n              <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={apr} />\r\n              {farmAPR || apr.toLocaleString('en-US', { maximumFractionDigits: 2 })}%\r\n            </>\r\n          ) : (\r\n            <Skeleton height={24} width={80} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AprApy\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Flex, Text, Button as UiButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport Balance from 'components/Balance'\r\nimport CardBusdValue from 'views/Home/components/CardBusdValue'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport DepositModal from 'views/Farms/components/DepositModal'\r\nimport WithdrawModal from 'views/Farms/components/WithdrawModal'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport './KingdomCard.css'\r\n\r\nconst KCard = styled.div`\r\n  align-self: baseline;\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  /*padding: 6px 12px;*/\r\n  position: relative;\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n`\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 40px;\r\n  margin-top: 0.3rem;\r\n  display: block;\r\n`\r\n\r\nconst Values = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Brackets = styled.span`\r\n  color: ${(props) => props.theme.colors.text};\r\n`\r\n\r\ninterface KingdomCardProps {\r\n  farm?: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  addLiquidityUrl: string\r\n  account?: string\r\n}\r\n\r\nconst KingdomCard: React.FC<KingdomCardProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue ,\r\n  addLiquidityUrl,\r\n  account\r\n}) => {\r\n  const location = useLocation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { pid, isTokenOnly, isKingdom, isKingdomToken, lpSymbol, lpAddresses, token: { address } } = farm\r\n\r\n  const tokenName = lpSymbol.toUpperCase()\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const earningsBusd = rewardBalance ? new BigNumber(rewardBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  const web3 = useWeb3()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly || isKingdomToken){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress, isKingdomToken])\r\n\r\n  const { onApprove } = useApprove(lpContract, isKingdom)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const approvedButton = (\r\n    <Button\r\n      mt=\"8px\"\r\n      disabled={requestedApproval || location.pathname.includes('archived')}\r\n      onClick={handleApprove}\r\n    >\r\n      Approve Contract\r\n    </Button>\r\n  )\r\n\r\n  return (\r\n    <KCard>\r\n      <div className=\"k-card\">\r\n        <div className=\"flex-grid\">\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Balance (Wallet)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={walletBalance}\r\n                decimals={walletBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={walletBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            { isApproved ? (\r\n              <Button mt=\"8px\" fullWidth onClick={onPresentDeposit}>Deposit</Button>\r\n            ) : (\r\n              approvedButton\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Deposit (Staked)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={depositBalance}\r\n                decimals={depositBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={depositBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            { isApproved ? (\r\n              <Button mt=\"8px\" fullWidth onClick={onPresentWithdraw}>Withdraw</Button>\r\n            ) : (\r\n              approvedButton\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            <Text>CUB Rewards</Text>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={rewardBalance}\r\n                decimals={rewardBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={earningsBusd} /><Brackets>)</Brackets>\r\n            </Values>\r\n            <Button\r\n              disabled={rewardBalance === 0 || pendingTx || !isApproved}\r\n              onClick={async () => {\r\n                setPendingTx(true)\r\n                await onReward()\r\n                setPendingTx(false)\r\n              }}\r\n            >\r\n              Harvest\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </KCard>\r\n  )\r\n}\r\n\r\nexport default KingdomCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button as UiButton, Link, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { DEFAULT_TOKEN_DECIMAL, BASE_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL } from 'config'\r\nimport AprApy from 'views/Farms/components/FarmCard/AprApy'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport KingdomCard from './KingdomCard'\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 36px;\r\n  font-size: 1rem;\r\n  padding: 0 12px;\r\n`\r\n\r\nconst Details = styled.div`\r\n  margin-top: 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  /*padding-left: 0.8rem;\r\n  padding-right: 0.8rem;*/\r\n  /*font-size: 0.95rem*/\r\n`\r\n\r\nconst Detail = styled.div`\r\n  /*display: inline;\r\n  margin-right: 1rem;*/\r\n  /*& div {\r\n    font-family: Arial;\r\n    font-size: 0.8rem;\r\n    padding: 2px;\r\n  }*/\r\n  &:nth-child(1) {\r\n    width: 25%\r\n  }\r\n  &:nth-child(2) {\r\n    width: 33%\r\n  }\r\n`\r\n\r\nconst KDetail = styled.div`\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n`\r\n\r\nconst StyledLinkExternal = styled(Link)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst CubKingdom = styled.div`\r\n  color: ${(props) => props.theme.colors.text};\r\n  margin-top: 0.2rem;\r\n`\r\n\r\ninterface KingdomDetailProps {\r\n  farm: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  farmName: string\r\n  oneTokenQuoteValue: BigNumber\r\n  removed?: boolean\r\n  aprApy?: any\r\n  account?: string\r\n}\r\n\r\nconst KingdomDetail: React.FC<KingdomDetailProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue,\r\n  farmName,\r\n  oneTokenQuoteValue,\r\n  removed,\r\n  aprApy,\r\n  account,\r\n}) => {\r\n  const tokenValueFormated = oneTokenQuoteValue && oneTokenQuoteValue.toString() !== 'NaN'\r\n    ? `~$${oneTokenQuoteValue.times(DEFAULT_TOKEN_DECIMAL).toFixed(2)}`\r\n    : '-'\r\n  const { lpSymbol, multiplier, quoteToken, token, isKingdom, lpAddresses, isTokenOnly, isKingdomToken, kingdomContract, altPid } = farm\r\n  const lpLabel = lpSymbol && lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const exchangeUrl = isKingdom ? PCS_ADD_LIQUIDITY_URL : BASE_ADD_LIQUIDITY_URL\r\n  const addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = token.address[process.env.REACT_APP_CHAIN_ID]\r\n  const isToken = isTokenOnly || isKingdomToken\r\n  const farmContract= isToken ?\r\n    `https://bscscan.com/token/${tokenAddress}`\r\n    : `https://bscscan.com/token/${lpAddress}`\r\n  const vaultContract = `https://bscscan.com/token/${kingdomContract}`\r\n  const infoAddress = `https://pancakeswap.info/pair/${isTokenOnly ? tokenAddress : lpAddress}`\r\n\r\n  return (\r\n    <KDetail>\r\n      <KingdomCard\r\n        farm={farm}\r\n        walletBalance={walletBalance}\r\n        depositBalance={depositBalance}\r\n        rewardBalance={rewardBalance}\r\n        walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n        depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        account={account}\r\n      />\r\n      <Details className=\"k-details\">\r\n        <Detail>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>{lpSymbol}:</Text>\r\n            <Text>({tokenValueFormated})</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Multiplier:</Text>\r\n            <Text>{aprApy.newMultiplier ? `${aprApy.newMultiplier}*` : multiplier}</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Type:</Text>\r\n            <Text>Auto-compound</Text>\r\n          </Flex>\r\n          {altPid === 12 ? (\r\n            <CubKingdom>*CUB Kingdom multiplier coexists with CUB Den multiplier</CubKingdom>\r\n          ) : (\r\n            <Flex justifyContent=\"space-between\">\r\n              <Text>Farm:</Text>\r\n              <Text>{farmName}</Text>\r\n            </Flex>\r\n          )}\r\n        </Detail>\r\n        <Detail>\r\n          <AprApy\r\n            aprApy={aprApy}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        </Detail>\r\n        <Detail>\r\n          <StyledLinkExternal external href={farmContract}>Farm Contract</StyledLinkExternal>\r\n          <StyledLinkExternal external href={vaultContract}>Kingdom Contract</StyledLinkExternal>\r\n          {!removed && (\r\n            <StyledLinkExternal external href={addLiquidityUrl}>\r\n              {`Get ${lpLabel}`}\r\n            </StyledLinkExternal>\r\n          )}\r\n          <StyledLinkExternal external href={infoAddress}>See Token Info</StyledLinkExternal>\r\n        </Detail>\r\n      </Details>\r\n    </KDetail>\r\n  )\r\n}\r\n\r\nexport default KingdomDetail\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  /background-color: ${({ theme }) => theme.colors.primary};\r\n  opacity: 0.2;*/\r\n  height: 1px;\r\n  margin: 12px auto;\r\n  width: 100%;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Text, Image, Flex } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { provider } from 'web3-core'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useBusdPriceFromPid } from 'state/hooks'\r\nimport useKingdomAPRAPY from 'hooks/useKingdomAPRAPY'\r\nimport Balance from 'components/Balance'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport KingdomDetail from './KingdomDetail'\r\nimport Divider from './DividerBlue'\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\nconst K = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 0.4rem 0.8rem;\r\n  position: relative;\r\n`\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 8px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst KImage = styled(Image)`\r\n  width: 64px;\r\n`\r\n\r\n// export interface FarmWithStakedValue extends Farm {\r\n//   apy?: BigNumber\r\n// }\r\n\r\ninterface KingdomProps {\r\n  farm: FarmWithStakedValue\r\n  removed?: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst Kingdom: React.FC<KingdomProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const { apr, lpTotalInQuoteToken, lpSymbol, multiplier, isKingdom, isKingdomToken, tokenPriceVsQuote, poolWeightPCS, compounding, lpTokenBalancePCS = 0, lpTotalInQuoteTokenPCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd }, altPid, farmType } = farm\r\n  const farmImage = lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  let aprApy = useKingdomAPRAPY(\r\n    isKingdom,\r\n    isKingdomToken,\r\n    Number(tokenPriceVsQuote),\r\n    poolWeightPCS,\r\n    compounding,\r\n    apr,\r\n    lpTokenBalancePCS,\r\n    lpTotalInQuoteTokenPCS,\r\n    Number(quoteTokenPriceUsd),\r\n    altPid,\r\n  )\r\n\r\n  const { dailyAPR, totalAPY, newMultiplier, pcsApr } = aprApy\r\n  const { tokenBalance, stakedBalance, earnings } = farm.userData\r\n  const rawTokenBalance = tokenBalance ? getBalanceNumber(new BigNumber(tokenBalance)) : 0\r\n  const rawStakedBalance = stakedBalance ? getBalanceNumber(new BigNumber(stakedBalance)) : 0\r\n  const rawEarningsBalance = earnings ? getBalanceNumber(new BigNumber(earnings)) : 0\r\n\r\n  const tokenPrice = useBusdPriceFromPid(farm.pid)\r\n  let oneTokenQuoteValue = new BigNumber(0)\r\n\r\n  if (!farm.isKingdomToken)\r\n    oneTokenQuoteValue = lpTotalInQuoteTokenPCS ? new BigNumber(lpTotalInQuoteTokenPCS).div(new BigNumber(lpTokenBalancePCS)).times(quoteTokenPriceUsd).div(DEFAULT_TOKEN_DECIMAL) : new BigNumber(0)\r\n  else oneTokenQuoteValue = tokenPrice.div(DEFAULT_TOKEN_DECIMAL)\r\n\r\n  const walletBalanceQuoteValue = tokenBalance ? new BigNumber(tokenBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const totalValueFormated = lpTotalInQuoteToken\r\n    ? `$${Number(new BigNumber(lpTotalInQuoteToken).times(quoteTokenPriceUsd)).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const farmAPR = apr && apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  aprApy = { ...aprApy, compounding: farm.compounding, farmAPR, apr: altPid === 12 ? pcsApr : farm.apr, cakePrice, quoteTokenPriceUsd: Number(quoteTokenPriceUsd) }\r\n\r\n  return (\r\n    <>\r\n      <Divider />\r\n      <K>\r\n        {farm.token.symbol === 'CUB' && <StyledCardAccent />}\r\n        <div className=\"flex-grid k-grid\">\r\n          <div className=\"col\"><KImage src={`/images/farms/${farmImage}.png`} alt={lpSymbol} width={64} height={64} /></div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\">\r\n              <Text className=\"token\">{lpSymbol}</Text>\r\n            </Flex>\r\n            <Text>{farmType}</Text>\r\n            <Text> TVL {totalValueFormated}</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={totalAPY}\r\n                decimals={2}\r\n                unit=\"%\"\r\n              />\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={dailyAPR}\r\n                decimals={2}\r\n                unit=\"%\"\r\n              />\r\n              <Text>{newMultiplier ? `${newMultiplier}*` : multiplier}</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawTokenBalance}\r\n              decimals={rawTokenBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawStakedBalance}\r\n              decimals={rawStakedBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawEarningsBalance}\r\n              decimals={rawEarningsBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <ExpandableSectionButton\r\n              onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n              expanded={showExpandableSection}\r\n              onlyArrow\r\n            />\r\n          </div>\r\n        </div>\r\n        <ExpandingWrapper expanded={showExpandableSection}>\r\n          <KingdomDetail\r\n            farm={farm}\r\n            walletBalance={rawTokenBalance}\r\n            depositBalance={rawStakedBalance}\r\n            rewardBalance={rawEarningsBalance}\r\n            walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n            depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n            farmName={farmType}\r\n            oneTokenQuoteValue={oneTokenQuoteValue}\r\n            removed={removed}\r\n            aprApy={aprApy}\r\n            account={account}\r\n          />\r\n        </ExpandingWrapper>\r\n      </K>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdom\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst StyledText = styled(Text)`\r\n  line-height: 1.5;\r\n\r\n`\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, prefix, fontSize = '16px', }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <StyledText fontSize={fontSize} >\r\n      {prefix}{countUp}\r\n    </StyledText>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React, { useEffect, useCallback, useMemo } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Heading, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport Page from 'components/layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { useFarms, usePriceCakeBusd, useTotalValueKingdoms } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { Farm } from 'state/types'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\n\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Kingdom from './components/Kingdom'\r\nimport CardValue from './components/CardValue'\r\nimport './Kingdoms.css'\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Kingdoms: React.FC = () => {\r\n  const totalValue = useTotalValueKingdoms();\r\n  const { pathname } = useLocation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n\r\n  const cakePrice = usePriceCakeBusd()\r\n  const { account } = useWeb3React()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  // const activeFarms = farmsLP.filter((farm) => farm.isKingdom && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const activeFarms = farmsLP.filter((farm) => farm.isKingdom && !isArchivedPid(farm.pid))\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, isActive],\r\n  )\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    if (isActive) {\r\n      farmsStaked = farmsList(activeFarms)\r\n    }\r\n    return farmsStaked\r\n  }, [\r\n    activeFarms,\r\n    farmsList,\r\n    isActive,\r\n  ])\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <div className='k-header'>\r\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"10px\">\r\n            Kingdoms\r\n          </Heading>\r\n          <Flex>\r\n            <Text bold fontSize=\"24px\">\r\n              TVL&nbsp;\r\n            </Text>\r\n            <CardValue fontSize=\"24px\" value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          </Flex>\r\n        </div>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Composable Auto-Compounding\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Stake tokens for cross-platform farming plus CUB rewards\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          IMPORTANT: Must use <a target=\"_blank\" rel=\"noreferrer\" href=\"https://exchange.pancakeswap.finance/#/pool\">Pancakeswap V2 Exchange</a> for V2 Kingdom LP tokens until we add a V2 exchange for Cub Finance\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          CertiK Audit is Pending: Our other contracts have been audited by CertiK and Kingdoms are currently under review. Please use at your own discretion until the audit has been published\r\n        </Heading>\r\n        <FeeWrapper>\r\n          <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\r\n            Fees\r\n          </Heading>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Management Fee:</Text>\r\n            <Text>0.9%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Withdrawal Fee:</Text>\r\n            <Text>None</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Fee to CUB Staking Kingdom:</Text>\r\n            <Text>1%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>CUB Burn Rate:</Text>\r\n            <Text>100% of Fees Buyback and Burn CUB</Text>\r\n          </Flex>\r\n        </FeeWrapper>\r\n      </PageHeader>\r\n      <Page className=\"k-container\">\r\n        <div id=\"kingdoms\">\r\n          <div id=\"content-header\" className=\"k-content\">\r\n            <div className=\"flex-grid k-grid\">\r\n              <div className=\"col\" />\r\n              <div className=\"col\">\r\n                <Text>Token</Text>\r\n                <Text>Farm</Text>\r\n                <Text>TVL</Text>\r\n              </div>\r\n              <div className=\"col\">\r\n                <Text>Total APY</Text>\r\n                <Text>Daily APR</Text>\r\n                <Text>Multiplier</Text>\r\n              </div>\r\n              <div className=\"col\">\r\n                <Text>Balance</Text>\r\n                <Text>Deposit</Text>\r\n                <Text>Rewards</Text>\r\n              </div>\r\n              <div className=\"col\" />\r\n            </div>\r\n          </div>\r\n          {farmsStakedMemoized.map((farm) => (\r\n            <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n          ))}\r\n        </div>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdoms\r\n"],"sourceRoot":""}