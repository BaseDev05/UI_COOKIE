{"version":3,"sources":["hooks/useI18n.ts","utils/callHelpers.ts","views/Home/components/CardValue.tsx","hooks/useWeb3.ts","hooks/useContract.ts","views/Home/components/CardBusdValue.tsx","hooks/useHarvest.ts","utils/apr.ts","utils/getLiquidityUrlPathParts.ts","hooks/useStake.ts","hooks/useApprove.ts","hooks/useUnstake.ts","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","utils/compoundApyHelpers.ts","components/ApyCalculatorModal/index.tsx","views/Farms/components/FarmCard/ApyButton.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx"],"names":["useI18n","translations","useContext","TranslationsContext","translationId","fallback","data","length","foundTranslation","find","translation","stringId","text","includesVariable","includes","interpolatedText","isEmpty","Object","keys","forEach","dataKey","templateKey","RegExp","replace","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","on","tx","transactionHash","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","gas","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmergencyUnstake","harvest","isKingdom","claim","contract","user","nonce","signature","soushHarvest","soushHarvestBnb","BIG_ZERO","CardValue","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","style","useWeb3","library","useWeb3React","refEth","useState","Web3","getWeb3NoAccount","web3","setweb3","useCake","useMemo","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useKingdom","getKingdomsContract","useSousChef","id","getSouschefContract","CardBusdValue","props","useHarvest","farmPid","dispatch","useAppDispatch","kingdomContract","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farms","harvestPromises","reduce","accum","farm","Promise","all","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BLOCKS_PER_YEAR","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolWeight","cakePriceUsd","poolLiquidityUsd","farmType","yearlyCakeRewardAllocation","PCSCAKE_PER_YEAR","BAKE_PER_YEAR","BELT_PER_YEAR","CAKE_PER_BLOCK","liquidity","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","useStake","onStake","useApprove","onApprove","useUnstake","onUnstake","console","info","DepositModal","max","onConfirm","onDismiss","tokenName","addLiquidityUrl","isTokenOnly","isKingdomToken","val","setVal","pendingTx","setPendingTx","TranslateString","fullBalance","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","handleSelectMax","title","onSelectMax","onChange","symbol","inputTitle","variant","onClick","width","disabled","eq","gt","href","alignSelf","WithdrawModal","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","parseFloat","toFixed","getRoi","amountEarned","amountInvested","Grid","styled","GridItem","Description","Text","ApyCalculatorModal","linkLabel","linkHref","earningTokenSymbol","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","textTransform","mb","justifyContent","ApyButton","lpLabel","cakePrice","useModal","onPresentApyModal","event","stopPropagation","scale","ml","StyledSpacer","size","Spacer","s","spacing","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","map","child","i","Outer","Box","background","gradients","bubblegum","Inner","Container","PageHeader","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","ModalInput","isBalanceZero","position","pl","balance","balanceNumber","Number","toLocaleString","maximumFractionDigits","displayBalance","alignItems","pattern","inputMode","step","min","placeholder","mr","external"],"mappings":"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","file":"static/js/1.4c8f1274.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { isEmpty } from 'lodash'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\ninterface ContextData {\r\n  [key: string]: number | string\r\n}\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\r\n    if (translations.length === 0) {\r\n      return fallback\r\n    }\r\n\r\n    const foundTranslation = translations.find((translation) => {\r\n      return translation.data.stringId === translationId\r\n    })\r\n\r\n    if (foundTranslation) {\r\n      const { text } = foundTranslation.data\r\n      const includesVariable = text.includes('%')\r\n\r\n      if (includesVariable) {\r\n        let interpolatedText = text\r\n\r\n        // If dynamic tags are found but no data was passed return the fallback\r\n        if (isEmpty(data)) {\r\n          return fallback\r\n        }\r\n\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return text\r\n    }\r\n\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account, isKingdom) => {\r\n  if (isKingdom) {\r\n    return masterChefContract.methods\r\n      .withdraw(pid, '0')\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claim = async (contract, account, user, amount, nonce, signature) => {\r\n  return contract.methods\r\n    .withdraw(user, amount, nonce, signature)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getKingdomsContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useKingdom = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getKingdomsContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"16px\" lineHeight=\"1.5\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(isKingdom ? kingdomContract : masterChefContract, farmPid, account, isKingdom)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farms: any[]) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farms.reduce((accum, farm) => {\r\n      if (farm.isKingdom) return [...accum, harvest(kingdomContract, farm.pid, account, farm.isKingdom)]\r\n      return [...accum, harvest(masterChefContract, farm.pid, account, farm.isKingdom)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farms, masterChefContract, kingdomContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account, false)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, PCSCAKE_PER_YEAR, BAKE_PER_YEAR, BELT_PER_YEAR } from 'config'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (\r\n  poolWeight: BigNumber,\r\n  cakePriceUsd: BigNumber,\r\n  poolLiquidityUsd: BigNumber,\r\n  isKingdom?: boolean,\r\n  farmType?: string\r\n): number => {\r\n  // console.log('poolWeight',poolWeight.toNumber())\r\n  // console.log('cakePriceUsd',cakePriceUsd.toNumber())\r\n  // console.log('poolLiquidityUsd',poolLiquidityUsd.toNumber())\r\n  // if (farmType === 'Belt') {\r\n  //   console.log('poolWeight',poolWeight.toNumber())\r\n  //   console.log('cakePriceUsd',cakePriceUsd.toNumber())\r\n  //   console.log('poolLiquidityUsd',poolLiquidityUsd.toNumber())\r\n  // }\r\n\r\n  if (isKingdom) {\r\n    let yearlyCakeRewardAllocation = PCSCAKE_PER_YEAR.times(poolWeight)\r\n    if (farmType === 'Bakery') yearlyCakeRewardAllocation = BAKE_PER_YEAR.times(poolWeight)\r\n    else if (farmType === 'Belt') yearlyCakeRewardAllocation = BELT_PER_YEAR.times(poolWeight)\r\n\r\n    const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n    return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n  }\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const liquidity = poolLiquidityUsd.toNumber() ? poolLiquidityUsd : new BigNumber(0)\r\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(liquidity).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\nexport default null\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nconst useStake = (pid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(isKingdom ? kingdomContract : masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    },\r\n    [account, dispatch, masterChefContract, pid, kingdomContract, isKingdom],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery, useKingdom } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, isKingdom ? kingdomContract : masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWeb3React()\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\r\n    return tx\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nconst useUnstake = (pid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(isKingdom ? kingdomContract : masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid, kingdomContract, isKingdom],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23, 78]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmergencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl, isTokenOnly, isKingdomToken }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, isTokenOnly || isKingdomToken ? 'Stake tokens' : 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  isTokenOnly?: boolean\r\n  isKingdomToken?: boolean\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', isTokenOnly, isKingdomToken }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, isTokenOnly || isKingdomToken ? 'Unstake tokens' : 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const aprAsDecimal = farmApr / 100\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  tokenPrice: number\r\n  apr: number\r\n  linkLabel: string\r\n  linkHref: string\r\n  earningTokenSymbol?: string\r\n  roundingDecimals?: number\r\n  compoundFrequency?: number\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  tokenPrice,\r\n  apr,\r\n  linkLabel,\r\n  linkHref,\r\n  earningTokenSymbol = 'CUB',\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\r\n\r\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 1,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 7,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 30,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n    numberOfDays: 365,\r\n    farmApr: apr,\r\n    tokenPrice,\r\n    roundingDecimals,\r\n    compoundFrequency,\r\n  })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {earningTokenSymbol} {TranslateString(999, 'per')} $1000\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\r\n              roundingDecimals,\r\n            )}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand30D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {getRoi({\r\n              amountEarned: tokenEarnedPerThousand365D,\r\n              amountInvested: oneThousandDollarsWorthOfToken,\r\n            }).toFixed(roundingDecimals)}\r\n            %\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{tokenEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          `Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={`${TranslateString(999, 'Get')} ${lpLabel}`}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap-libs/uikit'\r\nimport Container from '../layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 16px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceNumber = Number(balance)\r\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\r\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\r\n    }\r\n    return balanceNumber.toLocaleString()\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance(max)}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n"],"sourceRoot":""}