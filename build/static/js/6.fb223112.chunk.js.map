{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/BNBHarvestBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/EarnAPRCard.tsx","views/Home/components/BridgeCard.tsx","views/Home/components/KingdomCard.tsx","views/Home/Home.tsx","hooks/useI18n.ts","hooks/useContract.ts","utils/callHelpers.ts","hooks/useWeb3.ts","views/Home/components/CardValue.tsx","components/UnlockButton.tsx","views/Home/components/CardBusdValue.tsx","hooks/useHarvest.ts","utils/apr.ts","hooks/useTokenBalance.ts","hooks/useBnbDividends.ts","hooks/useClaim.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","nonKingdomFarms","farmsConfig","filter","farm","isKingdom","kingdomFarms","a","calls","map","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","callsK","getKingdomsAddress","kingdomsABI","rawResultsK","resultsK","fetchBalances","useAllEarnings","balances","setBalance","res","resK","fetchAllBalances","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","BNBHarvestBalance","bnbDividends","bnbPrice","useBusdPriceFromLpSymbol","bnbRewards","amount","BIG_ZERO","bnbRewardsUSD","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","pendingTxDivs","setPendingTxDivs","balancesWithValue","balanceType","useBnbDividends","onClaim","useClaim","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","justifyContent","id","disabled","length","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cubPrice","circSupply","minus","cakeSupply","marketCap","times","prefix","CAKE_PER_BLOCK","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","farmsLP","useFarms","data","prices","useGetApiPrices","cakePrice","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","getAddress","quoteToken","toLowerCase","totalLiquidity","getFarmApr","poolWeight","maxApr","max","toLocaleString","maximumFractionDigits","animation","variant","exact","activeClassName","to","mt","BridgeCard","href","KingdomCard","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","translations","useContext","TranslationsContext","translationId","fallback","foundTranslation","find","translation","stringId","text","includesVariable","includes","interpolatedText","isEmpty","Object","keys","forEach","dataKey","templateKey","RegExp","replace","useIfoContract","web3","useWeb3","getIfoContract","useERC20","getBep20Contract","useCake","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useKingdom","getKingdomsContract","useBnbDvividendsContract","getBnbDvividendsContract","useSousChef","getSouschefContract","approve","lpContract","masterChefContract","methods","ethers","constants","MaxUint256","send","from","stake","deposit","toString","on","tx","transactionHash","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","gas","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmergencyUnstake","harvest","claim","contract","user","nonce","signature","soushHarvest","soushHarvestBnb","library","refEth","useRef","Web3","getWeb3NoAccount","setweb3","current","bold","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","props","useAuth","login","logout","onPresentConnectModal","useWalletModal","useHarvest","farmPid","dispatch","useAppDispatch","kingdomContract","txHash","fetchFarmUserDataAsync","farms","harvestPromises","Promise","all","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BLOCKS_PER_YEAR","totalStakingTokenInPool","apr","isNaN","isFinite","cakePriceUsd","poolLiquidityUsd","farmType","yearlyCakeRewardAllocation","PCSCAKE_PER_YEAR","BAKE_PER_YEAR","BELT_PER_YEAR","liquidity","slowRefresh","setTotalSupply","cakeContract","call","supply","fetchTotalSupply","tokenAddress","balanceOf","fetchBalance","setBnbDividends","axios","get","timeout","then","result","catch","error","console","log","fetchBnbDividends","bnbDividendsContract"],"mappings":"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","file":"static/js/6.fb223112.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress, getKingdomsAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport kingdomsABI from 'config/abi/kingdoms.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const nonKingdomFarms = farmsConfig.filter(farm => !farm.isKingdom)\r\n    const kingdomFarms = farmsConfig.filter(farm => farm.isKingdom)\r\n    const fetchBalances = async () => {\r\n      const calls = nonKingdomFarms.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCub',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = nonKingdomFarms.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      const callsK = kingdomFarms.map((farm) => ({\r\n        address: getKingdomsAddress(),\r\n        name: 'pendingCUB',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResultsK = await multicall(kingdomsABI, callsK)\r\n      const resultsK = kingdomFarms.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResultsK[index]) }))\r\n\r\n      setFarmsWithBalances([...results, ...resultsK])\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress, getKingdomsAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport kingdomsABI from 'config/abi/kingdoms.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const nonKingdomFarms = farmsConfig.filter(farm => !farm.isKingdom)\r\n    const kingdomFarms = farmsConfig.filter(farm => farm.isKingdom)\r\n    const fetchAllBalances = async () => {\r\n      const calls = nonKingdomFarms.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCub',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      const callsK = kingdomFarms.map((farm) => ({\r\n        address: getKingdomsAddress(),\r\n        name: 'pendingCUB',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const resK = await multicall(kingdomsABI, callsK)\r\n\r\n      setBalance([...res, ...resK])\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    const earningNumber = new BigNumber(earning)\r\n    if (earningNumber.eq(0)) {\r\n      return accum\r\n    }\r\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\r\n  }, 0)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nimport { useBusdPriceFromLpSymbol } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst BNBHarvestBalance = ({ bnbDividends }) => {\r\n  const { account } = useWeb3React()\r\n  const bnbPrice = useBusdPriceFromLpSymbol('BNB-BUSD LP')\r\n\r\n  const bnbRewards = bnbDividends && bnbDividends.amount ? new BigNumber(bnbDividends.amount).div(DEFAULT_TOKEN_DECIMAL) : BIG_ZERO\r\n  const bnbRewardsUSD = bnbRewards ? bnbRewards.multipliedBy(bnbPrice).toNumber() : 0\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        Locked\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={bnbRewards.toNumber()} lineHeight=\"1.5\" />\r\n      {!bnbPrice.eq(0) && <CardBusdValue value={bnbRewardsUSD} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default BNBHarvestBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, Flex } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport useBnbDividends from 'hooks/useBnbDividends'\r\nimport { useClaim} from 'hooks/useClaim'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport BNBHarvestBalance from './BNBHarvestBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cub/cub-bg.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [pendingTxDivs, setPendingTxDivs] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const bnbDividends = useBnbDividends()\r\n  const { onClaim } = useClaim(bnbDividends || {})\r\n  const bnbRewards = bnbDividends && bnbDividends.amount ? bnbDividends.amount : 0\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => {\r\n    const { pid, isKingdom } = farmWithBalance\r\n    return { pid, isKingdom }\r\n  }))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cub/token.svg\" alt=\"cub logo\" width={64} height={64} />\r\n        <Flex justifyContent='space-between'>\r\n          <div>\r\n            <Block>\r\n              <Label>{TranslateString(544, 'CUB to Harvest')}:</Label>\r\n              <CakeHarvestBalance />\r\n            </Block>\r\n            <Block>\r\n              <Label>{TranslateString(546, 'CUB in Wallet')}:</Label>\r\n              <CakeWalletBalance />\r\n            </Block>\r\n            <Actions>\r\n              {account ? (\r\n                <Button\r\n                  id=\"harvest-all\"\r\n                  disabled={balancesWithValue.length <= 0 || pendingTx}\r\n                  onClick={harvestAllFarms}\r\n                  width=\"100%\"\r\n                >\r\n                  {pendingTx\r\n                    ? TranslateString(548, 'Collecting CUB')\r\n                    : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\r\n                        count: balancesWithValue.length,\r\n                      })}\r\n                </Button>\r\n              ) : (\r\n                <UnlockButton width=\"100%\" />\r\n              )}\r\n            </Actions>\r\n          </div>\r\n          <div>\r\n            <Block>\r\n              <Label>BNB Dividends <br />for Staking CUB:</Label>\r\n              <BNBHarvestBalance bnbDividends={bnbDividends} />\r\n            </Block>\r\n            <Actions>\r\n              {account ? (\r\n                <Button\r\n                  disabled={bnbRewards === 0 || pendingTxDivs}\r\n                  onClick={async () => {\r\n                    setPendingTxDivs(true)\r\n                    await onClaim()\r\n                    setPendingTxDivs(false)\r\n                  }}\r\n                >\r\n                  Claim BNB\r\n                </Button>\r\n              ) : (\r\n                <UnlockButton width=\"100%\" />\r\n              )}\r\n            </Actions>\r\n          </div>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { CAKE_PER_BLOCK } from 'config'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport CardValue from './CardValue'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const cubPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = cubPrice.times(circSupply);\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Cub Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total CUB Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total CUB Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CUB/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={CAKE_PER_BLOCK.toNumber()} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n// import { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n  const totalValue = useTotalValue();\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(762, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {totalValue ? (\r\n          <>\r\n            <Heading size=\"xl\">\r\n              <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n            </Heading>\r\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all Farms and Dens')}</Text>\r\n          </>\r\n        ) : (\r\n          <Skeleton height={66} />\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'financeleo'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPRCard = () => {\r\n  const TranslateString = useI18n()\r\n  const { data: farmsLP } = useFarms()\r\n  const prices = useGetApiPrices()\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const highestApr = useMemo(() => {\r\n    const aprs = farmsLP\r\n      // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n      .filter((farm) => farm.multiplier !== '0X')\r\n      .map((farm) => {\r\n        if (farm.lpTotalInQuoteToken && prices) {\r\n          const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n          return getFarmApr(farm.poolWeight, cakePrice, totalLiquidity)\r\n        }\r\n        return null\r\n      })\r\n\r\n    const maxApr = max(aprs)\r\n    return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }, [cakePrice, farmsLP, prices])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn up to\r\n        </Heading>\r\n        <CardMidContent color=\"#1993fb\">\r\n          {highestApr ? (\r\n            `${highestApr}% ${TranslateString(736, 'APR')}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Farms\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPRCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Link } from '@pancakeswap-libs/uikit'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#53dee9, #4576d9);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst BridgeCard = () => {\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Instantly Swap\r\n        </Heading>\r\n        <CardMidContent color=\"invertedContrast\">ERC20 for BEP20</CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            on LeoBridge\r\n          </Heading>\r\n          <Link href=\"https://bridge.cubdefi.com/\">\r\n            <ArrowForwardIcon mt={30} color=\"contrast\" />\r\n          </Link>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default BridgeCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  /*background: linear-gradient(#53dee9, #4576d9);*/\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst KingdomCard = () => {\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <CardMidContent color=\"primary\">Kingdoms</CardMidContent>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          CUB&apos;s First Composable Yield Farming Contract\r\n        </Heading>\r\n        <Flex justifyContent=\"space-between\">\r\n          <CardMidContent color=\"primary\">LIVE</CardMidContent>\r\n          <NavLink exact activeClassName=\"active\" to=\"/kingdoms\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default KingdomCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\n// import LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport TwitterCard from 'views/Home/components/TwitterCard'\r\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\r\nimport BridgeCard from 'views/Home/components/BridgeCard'\r\nimport KingdomCard from 'views/Home/components/KingdomCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/cub/wide.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/cub/2logos.png') ,url('/images/cub/wide.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'Cub Finance')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'Cub Finance on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard/>\r\n          {/* <LotteryCard /> */}\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPRCard />\r\n          <BridgeCard />\r\n          <KingdomCard />\r\n          {/* <WinCard /> */}\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useContext } from 'react'\r\nimport { isEmpty } from 'lodash'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\ninterface ContextData {\r\n  [key: string]: number | string\r\n}\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\r\n    if (translations.length === 0) {\r\n      return fallback\r\n    }\r\n\r\n    const foundTranslation = translations.find((translation) => {\r\n      return translation.data.stringId === translationId\r\n    })\r\n\r\n    if (foundTranslation) {\r\n      const { text } = foundTranslation.data\r\n      const includesVariable = text.includes('%')\r\n\r\n      if (includesVariable) {\r\n        let interpolatedText = text\r\n\r\n        // If dynamic tags are found but no data was passed return the fallback\r\n        if (isEmpty(data)) {\r\n          return fallback\r\n        }\r\n\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return text\r\n    }\r\n\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import { useMemo } from 'react'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getLotteryContract,\r\n  getLotteryTicketContract,\r\n  getMasterchefContract,\r\n  getKingdomsContract,\r\n  getBnbDvividendsContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n} from 'utils/contractHelpers'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoContract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoContract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getProfileContract(web3), [web3])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryContract(web3), [web3])\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getMasterchefContract(web3), [web3])\r\n}\r\n\r\nexport const useKingdom = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getKingdomsContract(web3), [web3])\r\n}\r\n\r\nexport const useBnbDvividendsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBnbDvividendsContract(web3), [web3])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getClaimRefundContract(web3), [web3])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getEasterNftContract(web3), [web3])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getCakeVaultContract(web3), [web3])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const web3 = useWeb3()\r\n  return useMemo(() => getPredictionsContract(web3), [web3])\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { ethers } from 'ethers'\r\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account, isKingdom) => {\r\n  if (isKingdom) {\r\n    return masterChefContract.methods\r\n      .withdraw(pid, '0')\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const claim = async (contract, account, user, amount, nonce, signature) => {\r\n  return contract.methods\r\n    .claim(user, amount, nonce, signature)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: BIG_ZERO })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { library } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"16px\" lineHeight=\"1.5\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef, useKingdom } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number, isKingdom?: boolean) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(isKingdom ? kingdomContract : masterChefContract, farmPid, account, isKingdom)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract, kingdomContract, isKingdom])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farms: any[]) => {\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const kingdomContract = useKingdom()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farms.reduce((accum, farm) => {\r\n      if (farm.isKingdom) return [...accum, harvest(kingdomContract, farm.pid, account, farm.isKingdom)]\r\n      return [...accum, harvest(masterChefContract, farm.pid, account, farm.isKingdom)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farms, masterChefContract, kingdomContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account, false)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, PCSCAKE_PER_YEAR, BAKE_PER_YEAR, BELT_PER_YEAR } from 'config'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (\r\n  poolWeight: BigNumber,\r\n  cakePriceUsd: BigNumber,\r\n  poolLiquidityUsd: BigNumber,\r\n  isKingdom?: boolean,\r\n  farmType?: string\r\n): number => {\r\n  if (isKingdom) {\r\n    let yearlyCakeRewardAllocation = PCSCAKE_PER_YEAR.times(poolWeight)\r\n    if (farmType === 'Bakery') yearlyCakeRewardAllocation = BAKE_PER_YEAR.times(poolWeight)\r\n    else if (farmType === 'Belt') yearlyCakeRewardAllocation = BELT_PER_YEAR.times(poolWeight)\r\n\r\n    const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n    return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n  }\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const liquidity = poolLiquidityUsd.toNumber() ? poolLiquidityUsd : new BigNumber(0)\r\n  const apr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(liquidity).times(100)\r\n\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\nexport default null\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport axios from 'axios'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useBnbDividends = () => {\r\n  const [bnbDividends, setBnbDividends] = useState<any>()\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBnbDividends = async () => {\r\n      const res = await axios.get(`https://bnb.fbslo.net/?address=${account}`, { timeout: 7000 }).then(result => result.data).catch((error) => {\r\n        console.log('error',error)\r\n        return { error: true }\r\n      })\r\n\r\n      setBnbDividends(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBnbDividends()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return bnbDividends\r\n}\r\n\r\nexport default useBnbDividends\r\n","import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { claim } from 'utils/callHelpers'\r\nimport { useBnbDvividendsContract } from './useContract'\r\n\r\nexport const useClaim = (bnbDividends: any) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const bnbDividendsContract = useBnbDvividendsContract()\r\n  const { user = '', amount = '', nonce = '', signature = '' } = bnbDividends\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    const txHash = await claim(bnbDividendsContract, account, user, amount, nonce, signature)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [dispatch, account, user, amount, nonce, signature, bnbDividendsContract])\r\n\r\n  return { onClaim: handleClaim }\r\n}\r\n\r\nexport default useClaim\r\n"],"sourceRoot":""}